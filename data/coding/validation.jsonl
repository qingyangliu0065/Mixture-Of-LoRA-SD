{"input": "Write an R script to generate a chart to compare the sales between the current month and the previous month.", "output": "library(ggplot2)\n\ndf <- data.frame(Current=data1, Previous=data2)\n\nggplot(df, aes(x=rownames(df))) + \ngeom_col(aes(y=Current, fill=\"Current Month\"), position=position_dodge(), width=0.5, color=\"black\") +\ngeom_col(aes(y=Previous, fill=\"Previous Month\"), position=position_dodge(), width=0.5, color=\"black\") +\nlabs(fill = \"Sales\") +\nylab(\"Sales\")", "task_type": "coding"}
{"input": "Write a function to create a list with all the prime numbers in the range of 0 to 100.", "output": "def create_prime_list(upper_limit):\n    prime_list = []\n    for num in range(2,upper_limit+1):\n        flag=0\n        for i in range(2,num):\n            if num % i == 0:\n                flag=1\n        if flag==0:\n            prime_list.append(num)\n    return prime_list", "task_type": "coding"}
{"input": "For a given list of numbers, write a palindrome checker.", "output": "def is_palindrome(sample):\n    res = True\n    i = 0\n    j = len(sample) - 1\n    while i < j:\n        if sample[i] != sample[j]:\n            res = False\n            break\n        else:\n            i += 1\n            j -= 1\n            \n    return res", "task_type": "coding"}
{"input": "Create an Android app to accept user input and calculate the area of a circle.", "output": "public class MainActivity extends AppCompatActivity {\n\n    EditText radiusEditText;\n    TextView outputTextView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        radiusEditText = findViewById(R.id.radiusEditText);\n        outputTextView = findViewById(R.id.outputTextView);\n\n        findViewById(R.id.calculateButton).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                calculateAreaOfCircle();\n            }\n        });\n    }\n\n    private void calculateAreaOfCircle() {\n        double radius = Double.parseDouble(radiusEditText.getText().toString());\n        double area = Math.PI * radius * radius;\n\n        outputTextView.setText(String.valueOf(area));\n    }\n}", "task_type": "coding"}
{"input": "Create a linked list to store the values ```[10, 20, 30]```.", "output": "class Node:\n def __init__(self, data):\n   self.data = data\n   self.next = None\n\nclass LinkedList:\n def __init__(self):\n   self.head = None\n\nlist = [10, 20, 30]\nllist = LinkedList()\nllist.head = Node(list[0])\n \ntemp = llist.head\n \nfor i in range(1, len(list)):\n temp.next = Node(list[i])\n temp = temp.next", "task_type": "coding"}
{"input": "How would you implement a simple object oriented Programming concept in Python?", "output": "In Python, object-oriented programming is supported by classes which contain attributes that represent the characteristics of an object, and methods which represent the actions that an object can take. To implement a simple object-oriented concept in Python, we would first define a class that represents the type of object we wish to create. This class will contain attributes (i.e. data fields) that define the state of the object, as well as methods that define the behaviors of the object. Finally, we can create objects using the class definition, providing an initial state and access to the methods.", "task_type": "coding"}
{"input": "Generate all possible strings of length n using A, B and C", "output": "['AAA', 'AAB', 'AAC', 'ABA', 'ABB', 'ABC', 'ACA', 'ACB', 'ACC', 'BAA', 'BAB', 'BAC', 'BBA', 'BBB', 'BBC', 'BCA', 'BCB', 'BCC', 'CAA', 'CAB', 'CAC', 'CBA', 'CBB', 'CBC', 'CCA', 'CCB', 'CCC']", "task_type": "coding"}
{"input": "Using PHP, write a program to generate a string containing the nth Fibonacci number.", "output": "function Fibonacci($n)\n{\n    if ($n == 0)\n        return '0';\n    else if ($n == 1)\n        return '1';\n    else\n    {\n        $fibonaccinumbers[0] = 0;\n        $fibonaccinumbers[1] = 1;\n        for ($i = 2; $i <= $n; $i++)\n        {\n            $fibonaccinumbers[$i] = $fibonaccinumbers[$i - 1] +\n                                    $fibonaccinumbers[$i - 2];\n        }\n\n        return $fibonaccinumbers[$n];\n    }\n}", "task_type": "coding"}
{"input": "Explain the concept of binary search in an array.", "output": "Binary search is an algorithm used to find an element in a sorted array. It works by repeatedly dividing in half the array until the element being searched is found. Binary search starts by comparing the middle element of the array with the target value. If the target value matches the middle element, its position in the array is returned. If the target value is less than the middle element, the search continues in the lower half of the array. If the target value is greater than the middle element, the search continues in the upper half of the array. This process is repeated until the target element is found or until the entire array has been searched.", "task_type": "coding"}
{"input": "Create a Java class called Employee with a constructor taking name and salary as arguments.", "output": "public class Employee\n{\n    private String name;\n    private double salary;\n \n    public Employee(String name, double salary)\n    {\n        this.name = name;\n        this.salary = salary;\n    }\n    \n    // Getters and setters\n    public String getName()\n    {\n        return name;\n    }\n  \n    public void setName(String name)\n    {\n        this.name = name;\n    }\n  \n    public double getSalary()\n    {\n        return salary;\n    }\n  \n    public void setSalary(double salary)\n    {\n        this.salary = salary;\n    }\n}", "task_type": "coding"}
{"input": "Create a recursive function that returns the Fibonacci number corresponding to a given input.", "output": "def Fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(Fibonacci(n-1) + Fibonacci(n-2)) \n  \n# Driver Code \nnterms = 10\n  \n# check if the number of terms is valid \nif nterms <= 0: \n    print(\"Plese enter a positive integer\") \nelse: \n    print(\"Fibonacci sequence:\") \n    for i in range(nterms): \n        print(Fibonacci(i))", "task_type": "coding"}
{"input": "Given a string, write code to remove all the consecutive characters and output the new string.", "output": "def remove_consecutive_chars(string):\n  # create an empty string\n  new_string = ''\n\n  # iterate over the characters of the given string\n  for i in range(len(string)-1):\n    if string[i] != string[i+1]:\n      new_string += string[i]\n  \n  # add the last character of the string to the output\n  new_string += string[-1]\n  # return the new string\n  return new_string\n\nstring='AAABBBCCC'\nresult = remove_consecutive_chars(string)\nprint(\"The new string is:\", result)", "task_type": "coding"}
{"input": "Write a code to take two string inputs and generate the output string containing alternate characters from each string.", "output": "def alternate_char(str1, str2):\n    # get the length of string\n    n = len(str1)\n\n    # initialize the output string\n    output_str = ''\n\n    # generate the output string\n    for i in range(n):\n        output_str += str1[i] + str2[i]\n    \n    return output_str\n\nprint(alternate_char(str1, str2))", "task_type": "coding"}
{"input": "Write an assembly language program to generate a Fibonacci series with n number of elements.", "output": ".section __DATA, \"rw\"\n   arraylength: .int 2\n   array:       .int 0, 1\n\n.text\n   .global _start\n_start:\n   mov r1, #0\nloop:\n   sub r2, r1, #1\n\tadd r3, array, r2\n\tldr r2, [r3]\n\n   sub r3, r1, #2\n\tadd r4, array, r3\n\tldr r3, [r4]\n\t\n\tadd r5, r2, r3\n\t\n   add r3, array, r1\n\tstr r5, [r3]\n\n\tldr r1, =arraylength\n\tadd r2, r1, #1\n\tstr r1, =arraylength\n\n\tcmp r1, r2\n\tbne loop", "task_type": "coding"}
{"input": "Create a Spring boot program to find the area of a triangle.", "output": "import org.springframework.boot.autoconfigure.SpringBootApplication; \n\n@SpringBootApplication \npublic class App \n{ \n    // Function to calculate the area of triangle \n    public static double calculateArea(int a, int b, int c) \n    { \n        double s = (a + b + c) / 2; \n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c)); \n        return area; \n    } \n  \n    public static void main( String[] args ) \n    { \n        int a = 3; \n        int b = 4; \n        int c = 5; \n        System.out.println(\"The area of the triangle is: \" + calculateArea(a, b, c)); \n    } \n}", "task_type": "coding"}
{"input": "Get all permutations of string.", "output": "from itertools import permutations \n  \ndef permutations_string(string):\n    return list(permutations(string))\n\npermutations_string(\"abc\")\n\nOutput: [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]", "task_type": "coding"}
{"input": "Create a class structure in Java for an Employee object.", "output": "public class Employee {\n    private int id;\n    private String name;\n    private double salary;\n\n    // default constructor\n    public Employee() {\n    }\n\n    // parameterized constructor\n    public Employee(int id, String name, double salary) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.salary = salary;\n    }\n\n    // getters and setters\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n}", "task_type": "coding"}
{"input": "Write a Java Method that takes an array of integers and returns true if the array is sorted in ascending order.", "output": "public static boolean isSorted(int[] array) { \n    int n = array.length; \n    int temp = array[0]; \n  \n    for (int i = 1; i < n; i++) { \n        if (temp > array[i]) \n            return false; \n        temp = array[i]; \n    } \n  \n    return true; \n}", "task_type": "coding"}
{"input": "Using MongoDB, create a database to store user information.", "output": "// Import the mongodb library \nconst { MongoClient } = require('mongodb'); \n\n// Create global connection variable \nlet db; \n\n// Connecting to the MongoDB instance \nMongoClient.connect('mongodb://localhost:27017', {useNewUrlParser: true, useUnifiedTopology: true}, (err, client) => { \n    if (err) { \n        console.log('Error occurred while connecting to the MongoDB instance'); \n    } else { \n        console.log('Successfully connected to the MongoDB instance'); \n        db = client.db('users_db'); \n    } \n}); \n\n// Create users collection \ndb.createCollection('users', { \n    name: { type: String, required: true }, \n    age: { type: Number }, \n    email: { type: String } \n});", "task_type": "coding"}
{"input": "Explain the purpose of the \"head\" tag in HTML.", "output": "The \"head\" tag in HTML is used to contain metadata about a page. This metadata includes tags such as title, description, js/css resources to include,  additional search keywords, etc. This metadata is essential for web search engine optimization and helps improve the visibility of the page on search engines. Additionally, the \"head\" tag can also be used to include additional scripts and style sheets to be used in the page.", "task_type": "coding"}
{"input": "Suggest a way to delete a specific element from a linked list in C++.", "output": "We can delete a specific element from a linked list in C++ by traversing through the list and keeping a pointer to the previous node of the node to be deleted. Then we can change the next of the previous node to the node after the node to be deleted. This will detach the node to be deleted from the linked list and remove it.", "task_type": "coding"}
{"input": "Generate a working React component to parse GEDCOM data.", "output": "import React, { useState } from 'react';\n\nconst GEDCOMParser = () => {\n    const [data, setData] = useState();\n\n    const parseGEDCOM = (gedcomData) => {\n        let parsedData = {};\n        gedcomData.split(\"\\n\").forEach(line => {\n            let fields = line.split(\" \");\n            parsedData[fields[1]] = fields[2]\n        });\n        setData(parsedData);\n    }\n\n    return (\n        <React.Fragment>\n            <input\n                type=\"file\"\n                accept=\".ged\"\n                onChange={({ target }) => parseGEDCOM(target.file)}\n            />\n            {data && (\n                <div>\n                    {Object.keys(data).map(key => (\n                        <div key={key}>{key}: {data[key]}</div>\n                    ))}\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default GEDCOMParser;", "task_type": "coding"}
{"input": "Design a program in C to produce the Fibonacci sequence.", "output": "#include <stdio.h> \n  \n// Function to print the first n  \n// Fibonacci numbers \nvoid printFibo(int n) \n{ \n    int f1 = 0, f2 = 1, i; \n  \n    if (n < 1) \n        return; \n  \n    for (i = 1; i <= n; i++) \n    { \n        printf(\"%d \", f1); \n        int next = f1 + f2; \n        f1 = f2; \n        f2 = next; \n    } \n} \n  \n// driver code \nint main() \n{ \n    int n = 10; \n    printFibo(n); \n    return 0; \n}", "task_type": "coding"}
{"input": "Implement a function that can convert a number from one number system to another.", "output": "def binary_to_decimal(binary):\n    decimal = 0 \n    length = len(binary) \n    for digit in range(0, length): \n        decimal += int(binary[digit]) * pow(2, length - digit - 1) \n    return decimal \n\nprint(binary_to_decimal(\"60\"))\nOutput: 24", "task_type": "coding"}
{"input": "Rearrange the code to print the hierarchy of students in a Python class", "output": "students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]\n\nteachers = []\nstudents_list = []\n\nfor student in students:\n  if student[\"role\"] == \"teacher\":\n    teachers.append(student)\n  else:\n    students_list.append(student)\n\nprint(\"Teachers:\")\nfor teacher in teachers:\n  print(teacher[\"name\"])\n\nprint(\"Students:\")\nfor student in students_list:\n  print(student[\"name\"])", "task_type": "coding"}
{"input": "Implement a function to perform in-place array rotation.", "output": "def rotate_in_place(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n        count += 1", "task_type": "coding"}
{"input": "Write a code to generate a list with the first 20 Fibonacci numbers.", "output": "def fibonacci(n):\n    \"\"\"\n    Generate a list with the first n Fibonacci numbers.\n    \"\"\"\n    fib_list = [0, 1]\n\n    # Generate the list and stop when n is reached\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    \n    return fib_list\n\nif __name__ == '__main__':\n    print(fibonacci(20))", "task_type": "coding"}
{"input": "Build a script to print the words that have the most occurrences in a given string.", "output": "def most_occurrences(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\n    freq_words = [(freq[word], word) for word in freq]\n    freq_words.sort(reverse=True)\n    print(freq_words[:2])\n\nmost_occurrences(\"This is just a simple string\")", "task_type": "coding"}
{"input": "Write a function to normalize a vector in C++.", "output": "#include <iostream>\n#include <algorithm>\n#include <cmath>\n \n// Function to normalize a vector\nvoid normalize(std::vector<float>& vector)\n{\n    // Compute the magnitude\n    float magnitude = 0.0;\n    for (int i = 0; i < vector.size(); i++)\n        magnitude += vector[i] * vector[i];\n    magnitude = sqrt(magnitude);\n \n    // Normalize the vector\n    for (int i = 0; i < vector.size(); i++)\n        vector[i] /= magnitude;\n}", "task_type": "coding"}
{"input": "Given an array of integers, find the longest subarray with total sum less than the given sum.", "output": "arr = [1, -2, 2, 4, 3]\nsum = 3\n\n# create an empty list to store the longest subarray\nlongest = []\n\n# loop through the array\nfor i in range(len(arr)):\n    # set the sum of current subarray to 0 \n    curr_sum = 0\n    # another loop to check if any subarray of the array\n    # has a sum less than the given sum\n    for j in range(i, len(arr)):\n        curr_sum += arr[j]\n        # if any subarray is found update the longest list\n        if curr_sum < sum:\n            longest = arr[i: j + 1]\n\nprint(\"The longest subarray with total sum less than the given sum is:\", longest)", "task_type": "coding"}
{"input": "How could you execute a JavaScript code snippet named 'my_script.js' after the page has been loaded?", "output": "We can use the 'onload' event to execute our JavaScript code snippet after the page has been loaded. For example, we can use the following code to execute the 'my_script.js' file once the page has been loaded: \n\nwindow.onload = function() {\n    let script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src = \"my_script.js\";\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n};", "task_type": "coding"}
{"input": "Generate the Fibonacci sequence of length 10 and print the result.", "output": "\"\"\"\nGenerate the Fibonacci sequence of length 10 and print the result\n\"\"\"\n\ndef get_fibonacci_sequence(length):\n    a, b = 0, 1\n    # generate the Fibonacci sequence\n    sequence = []\n    for _ in range(length):\n        sequence.append(a)\n        a, b = b, a + b\n    # return the Fibonacci sequence\n    return sequence\n\n# get the Fibonacci sequence of length 10\nfib_sequence = get_fibonacci_sequence(10)\n# print the Fibonacci sequence\nprint(fib_sequence)", "task_type": "coding"}
{"input": "Read the given CSV and output the data as a HTML table.", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Joe</td>\n    <td>23</td>\n  </tr>\n  <tr>\n    <td>Billy</td>\n    <td>24</td>\n  </tr>\n</table>", "task_type": "coding"}
{"input": "Process the curl request and output a JSON from it.", "output": "var request = new XMLHttpRequest();\nrequest.open('GET', 'https://api.example.com/user/12', true);\n\nrequest.onload = function () {\n  // begin accessing JSON data here\n  var data = JSON.parse(this.response);\n\n  if (request.status >= 200 && request.status < 400) {\n    console.log(data);\n  } else {\n    console.log('error');\n  }\n}\n\nrequest.send();", "task_type": "coding"}
{"input": "Create a HTML form to take user input from a web page.", "output": "<form action=\"\">\n    <label>Name:</label>\n    <input type=\"text\" name=\"name\" placeholder=\"Your name\" required><br><br>\n    <label>Email:</label>\n    <input type=\"email\" name=\"email\" placeholder=\"Your email address\" required><br><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "task_type": "coding"}
{"input": "Develop a GUI application in Java to reverse a string.", "output": "import java.awt.BorderLayout;\nimport java.awt.event.*;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\nclass Reverse extends JFrame \n{\n  JTextField inputTF;\n  JTextField outputTF;\n  JButton reverseBtn;\n \n  Reverse() \n  {\n    inputTF = new JTextField(20);\n    outputTF = new JTextField(20);\n    outputTF.setEditable(false);\n    reverseBtn = new JButton(\"Reverse\");\n\n    JPanel panel = new JPanel();\n    panel.add(inputTF);\n    panel.add(reverseBtn);\n    panel.add(outputTF);\n\n    reverseBtn.addActionListener(new ActionListener() \n    {\n      public void actionPerformed(ActionEvent ae) \n      {\n        String userInput = inputTF.getText();\n        StringBuilder sb = new StringBuilder();\n        sb.append(userInput);\n        sb = sb.reverse();\n\n        outputTF.setText(sb.toString());\n      } \n    });\n    add(panel, BorderLayout.CENTER);\n    setVisible(true);\n  } \n}", "task_type": "coding"}
{"input": "Write a Java program to display a pyramid with the given height.", "output": "public class Pyramid \n{ \n\n    public static void printPyramid(int height) \n    { \n        int i, j; \n        for (i=0; i<height; i++) \n        { \n            for (j=0; j<=i; j++) \n            { \n                System.out.print(\"* \"); \n            } \n            System.out.println(); \n        } \n    } \n    public static void main(String args[]) \n    { \n        int height = 3; \n        printPyramid(height); \n    } \n}", "task_type": "coding"}
{"input": "Explain in detail what is the significance of a local variable in Python", "output": "A local variable in Python is a variable that is declared within a function or a class. It is a variable that only exists in the context of that function or class, and cannot be accessed outside the function or class in which it is declared. Local variables are also referred to as \"lexical\" or \"automatic\" variables because they are automatically scoped to the function or class in which they are declared. They are different from global variables, which are available to the entire program. Local variables are helpful in limiting the scope of a variable, which means that the variable is only accessible in the function or class in which it is declared. This can help make code more efficient, clear, and secure.", "task_type": "coding"}
{"input": "Design a program to compare two sorted lists and returning list with the common elements.", "output": "def compare_list(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list", "task_type": "coding"}
{"input": "Design a data structure in Java for storing student information.", "output": "public class Student {\n    private String studentId;\n    private String name;\n    private int age;\n    private String school;\n    private String address;\n    private String phoneNumber;\n\n    //Getters and Setters \n    public String getStudentId() {\n        return studentId;\n    }\n    \n    public void setStudentId(String studentId) {\n        this.studentId = studentId;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getSchool() {\n        return school;\n    }\n    \n    public void setSchool(String school) {\n        this.school = school;\n    }\n    \n    public String getAddress() {\n        return address;\n    }\n    \n    public void setAddress(String address) {\n        this.address = address;\n    }\n    \n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n    \n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n}", "task_type": "coding"}
{"input": "Create a program that can calculate the distance between two points in three-dimensional space.", "output": "def dist_points_3d(point1, point2):\n    \"\"\"Calculate the distance between two points in three-dimensional space.\"\"\"\n    distance = ((point1[0] - point2[0]) ** 2 + \n                (point1[1] - point2[1]) ** 2 + \n                (point1[2] - point2[2]) ** 2) ** 0.5\n    return distance", "task_type": "coding"}
{"input": "Write a Java code to create an arraylist.", "output": "// Code to create an ArrayList in Java\nimport java.util.ArrayList;\n\npublic class Demo {\n    public static void main(String[] args) {\n        // create an arraylist\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"C++\");\n        list.add(\"Python\");\n        System.out.println(list);\n\n        // print the size of the list\n        System.out.println(\"The size of the list is: \"+list.size());\n    }\n}", "task_type": "coding"}
{"input": "Write a C++ program to find the sum of all the perfect numbers between two given inputs.", "output": "#include <iostream> \nusing namespace std; \n  \nint perfectNo(int low, int high) \n{ \n    int sum = 0; \n    for (int i=low; i<high; i++) \n    { \n        int div_sum = 0; \n  \n        for (int j=1; j<i; j++) \n            if (i % j == 0) \n                div_sum += j; \n  \n        if (div_sum == i && i != 1) \n            sum += i; \n    } \n    return sum; \n} \n  \nint main() \n{ \n    int low = 1, high = 25; \n    cout << perfectNo(low, high) << endl; \n    return 0; \n}", "task_type": "coding"}
{"input": "Explain the concept of variable scoping in JavaScript.", "output": "In JavaScript, variable scoping determines the accessibility of variables. Variables declared outside of a function can be accessed within the same function or any other functions. On the other hand, variables declared inside a function are limited in scope and can only be accessed within the same function. This is known as the lexical scoping rule in JavaScript.", "task_type": "coding"}
{"input": "Veriyif if a given string is a valid email address.", "output": "import re\n\ndef is_valid_email(email):\n    regex = r\"^[a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"\n    return re.match(regex, email)", "task_type": "coding"}
{"input": "Write a function in JavaScript to partition the array into even and odd numbers.", "output": "function partitionArray(arr) {\n  const evenArr = [];\n  const oddArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 == 0) {\n      evenArr.push(arr[i]);\n    } else {\n      oddArr.push(arr[i]);\n    }\n  }\n  return [evenArr, oddArr];\n}", "task_type": "coding"}
{"input": "Given a linked list, design an algorithm to reverse it.", "output": "The algorithm must traverse the list and keep track of the nodes as it moves through it. The algorithm should create a new linked list with the elements in reverse order. To do this, the algorithm should traverse the original linked list and push every element onto a stack. Then, the algorithm should pop each element off the stack and insert it as the head of the new linked list. This process is iterative until the stack is empty.", "task_type": "coding"}
{"input": "Find the minimum among a list of integers.", "output": "def find_min(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \nif __name__ == '__main__':\n  numbers = [1, 15, 22, -5, 87]\n  print(find_min(numbers))", "task_type": "coding"}
{"input": "Create a function to determine if a String contains a valid US phone number", "output": "def isValidPhoneNumber(s):\n    # strip all the non-numeric characters\n    nums = ''.join(filter(str.isalnum, s))\n    \n    # ensure it is 10 digits long\n    if len(nums) != 10:\n        return False\n    \n    # ensure the last 7 digits are valid\n    if nums[3:10] in set('2', '3', '4', '5', '6', '7', '8', '9'):\n        return False\n    \n    # ensure first 3 digits are valid\n    area_codes = set('201', '202', '203', '205', '206', '207', '208', '209', \n                     '210', '212', '213', '214', '215', '216', '217', '218',\n                     '219', '224', '225', '226', '228', '229', '231', '234',\n                     '239', '240', '242', '244', '245', '248', '250', '251', \n                     '252', '253', '254', '256', '260', '262', '264', '267', \n                     '268', '269', '270', '276', '281', '284', '289', '301', \n                     '302', '303', '304', '305', '306', '307', '308', '309', \n                     '310', '312', '313', '314', '315', '316', '317', '318',\n                     '319', '320', '321', '323', '330', '331', '334', '336',\n                     '337', '339', '340', '347', '351', '352', '360', '362',\n                     '386', '401', '402', '403', '404', '405', '406', '407',\n                     '408', '409', '410', '412', '413', '414', '415', '417',\n                     '418', '419', '423', '424', '425', '430', '431', '432',\n                     '434', '435', '440', '441', '443', '450', '468', '473',\n                     '478', '479', '480', '484', '501', '502', '503', '504', \n                     '505', '506', '507', '508', '509', '510', '512', '513', \n                     '515', '516', '517', '518', '519', '520', '530', '540', \n                     '541', '551', '557', '559', '561', '562', '563', '564', \n                     '567', '570', '571', '573', '574', '580', '585', '586', \n                     '601', '602', '603', '605', '606', '607', '608', '609', \n                     '610', '612', '614', '615', '616', '617', '618', '619', \n                     '620', '623', '626', '628', '630', '631', '636', '641', \n                     '646', '650', '651', '661', '662', '678', '681', '682', \n                     '701', '702', '703', '704', '705', '706', '707', '708', \n                     '712', '713', '714', '715', '716', '717', '718', '719', \n                     '720', '724', '725', '727', '731', '732', '734', '737', \n                     '740', '754', '757', '758', '760', '762', '763', '765', \n                     '769', '770', '772', '773', '774', '775', '778', '780', \n                     '781', '784', '785', '786', '787', '801', '802', '803', \n                     '804', '805', '806', '807', '808', '809', '810', '812', \n                     '813', '814', '815', '816', '817', '818', '828', '830', \n                     '831', '832', '843', '845', '847', '848', '850', '856', \n                     '857', '858', '859', '860', '862', '863', '864', '865', \n                     '870', '872', '878', '901', '903', '904', '906', '907', \n                     '908', '909', '910', '912', '913', '914', '915', '916', \n                     '917', '918', '919', '920', '925', '927', '928', '931',\n                     '936', '937', '940', '941', '947', '949', '951', '952', \n                     '954', '956', '970', '971', '972', '973', '978', '979', \n                     '980', '984', '985', '989')\n    if nums[:3] not in area_codes:\n        return False\n\n    return True", "task_type": "coding"}
{"input": "Implement an algorithm to find the sum of all the elements in an array.", "output": "// Algorithm to calculate the sum of all the elements in an array\n\n// Step 1: Initialize a variable 'sum' and set it equal to 0\nint sum = 0;\n\n// Step 2: Iterate through the array and add each element to 'sum'\nfor (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n}\n\n// Step 3: Return the value of sum\nreturn sum;", "task_type": "coding"}
{"input": "Write a Python script to take two list and output the common elements of the given lists.", "output": "def findCommon(list1,list2): \n    common = [] \n      \n    # traverse through elements of list1 \n    for x in list1: \n          \n        # traverse through elements of list2 \n        for y in list2: \n              \n            # if common element is found append to list \n            if x == y: \n                common.append(x) \n    return common", "task_type": "coding"}
{"input": "Choose a sorting algorithm and write a function in C++ to sort a list of numbers.", "output": "void selectionSort(int arr[], int n)  \n{  \n    int i, j, min_idx;  \n  \n    // One by one move boundary of unsorted subarray  \n    for (i = 0; i < n-1; i++)  \n    {  \n        // Find the minimum element in unsorted array  \n        min_idx = i;  \n        for (j = i+1; j < n; j++)  \n        if (arr[j] < arr[min_idx])  \n            min_idx = j;  \n  \n        // Swap the found minimum element with the first element  \n        swap(&arr[min_idx], &arr[i]);  \n    }  \n}", "task_type": "coding"}
{"input": "Create a PHP script to find the factorial of a given integer.", "output": "<?php \nfunction factorial($num) { \n    if ($num == 0) { \n        return 1; \n    } \n    else { \n    return $num * factorial($num - 1); \n    } \n} \n  \n$num = 5; \necho \"Factorial of $num is  \" . factorial($num); \n?>", "task_type": "coding"}
{"input": "What is the purpose of a library in software development?", "output": "The purpose of a library in software development is to provide a collection of related functions and data structures that can be used by a program. Libraries are used to simplify or abstract away the details of how a particular operation is implemented or offer prepackaged functionality. Libraries offer code reuse, faster development time, and optimized performance. They also act as the interface between the application and the system or the environment it is running on.", "task_type": "coding"}
{"input": "What is the purpose of declaring an enum in Java?", "output": "The purpose of declaring an enum in Java is to clearly identify a set of related constants that can be tracked. Enums are used to define a special type that contains a fixed set of constants. Enums provide type safety and make the code more self-documenting. They also make it easier for the compiler to check for correct usage since enums can be easily identified.", "task_type": "coding"}
{"input": "Write a C++ program to print out the sum of the first 100 integers.", "output": "#include <iostream> \nusing namespace std; \n  \nint main() \n{ \n    int i, sum = 0; \n      \n    //Computes the sum \n    for (i = 1; i <= 100; i++) \n    { \n        sum += i; \n    } \n      \n    cout << \"Sum of first 100 natural numbers = \"\n         << sum << endl; \n  \n    return 0; \n}", "task_type": "coding"}
{"input": "Create a HTML web page which shows the news for the day.", "output": "<html>\n<head>\n  <title>Today's News</title>\n</head>\n<body>\n  <h1>Today's News</h1>\n  <div class=\"news-container\">\n    <div class=\"news-article\"> ... </div>\n    <div class=\"news-article\"> ... </div>\n    <div class=\"news-article\"> ... </div>\n  </div>\n</body>\n</html>", "task_type": "coding"}
{"input": "Generate random numbers in range [0,10] in C++.", "output": "#include <iostream> \n#include <cstdlib> \n#include <ctime> \n  \n// Main function \nint main() \n{ \n    srand((unsigned)time(0)); \n    for (int i = 0; i < 100; i++) \n    { \n        int random_number = rand() % 11; \n        std::cout << random_number << ' '; \n    } \n  \n    return 0; \n}", "task_type": "coding"}
{"input": "Create a Python class for a thread-safe queue.", "output": "import threading\n\nclass ThreadSafeQueue():\n    def __init__(self):\n        self.queue = []\n        self.lock = threading.Lock()\n\n    def push(self, item):\n        with self.lock:\n            self.queue.append(item)\n\n    def pop(self):\n        with self.lock:\n            item = self.queue.pop(0)\n        return item", "task_type": "coding"}
{"input": "Generate all possible combinations of strings that can be formed using the given characters", "output": "import itertools\n\ncombinations = [''.join(i) for i in itertools.product(chars)]\n\n# Output: [\"a\", \"b\", \"c\", \"ab\", \"ac\", \"ba\", \"bc\", \"ca\", \"cb\", \"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", "task_type": "coding"}
{"input": "Modify the previous program to also print the sum of the subarray elements", "output": "max_sum = 0 \nstart = 0 \nend = 0\n\n# Loop through each element of the array\nfor i in range(len(arr)): \n    sum = 0\n  \n    # Find maximum sum subarray\n    for j in range(i, len(arr)): \n        sum += arr[j] \n        if (sum > max_sum and sum <= k): \n            max_sum = sum \n            start = i \n            end = j \n  \n# Print maximum subarray and its sum\nprint(\"Maximum sum subarray with sum <=\", k, \"is\") \nprint(\"[\", end=\"\") \nfor i in range(start, end+1): \n    print(arr[i], end=\", \") \nprint(\"]\")\nprint(\"Sum of the subarray elements:\", max_sum)", "task_type": "coding"}
{"input": "Create a Python program to calculate the mean, median, and mode of a given set of data.", "output": "def calculate_mean(data):\n    '''Function to calculate mean of data'''\n    mean = sum(data) / len(data)\n    return mean\n\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\n    count_dict = {}\n    mode_list = []\n    # count the frequency of each element\n    for i in data:\n        count_dict[i] = data.count(i)\n    # find the maximum frequency\n    max_freq = max(count_dict.values())\n    # find all elements with maximum frequency\n    for k,v in count_dict.items():\n        if max_freq == v:\n            mode_list.append(k)\n    return mode_list\n\ndata = [1, 4, 6, 3, 8, 9]\nmean = calculate_mean(data)\nmedian = calculate_median(data)\nmode = calculate_mode(data)\n\nprint(f\"Mean of data is: {mean}\")\nprint(f\"Median of data is: {median}\")\nprint(f\"Mode of data is: {mode}\")", "task_type": "coding"}
{"input": "Generate a classification network in a deep learning framework.", "output": "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation\n\nmodel = Sequential()\n\nmodel.add(Dense(64, input_dim = 8))\nmodel.add(Activation('relu'))\nmodel.add(Dense(16))\nmodel.add(Activation('sigmoid'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss = 'categorical_crossentropy',\n              optimizer = 'adam',\n              metrics = ['accuracy'])", "task_type": "coding"}
{"input": "Create a SQL query to find the total revenue for services in the month of February.", "output": "SELECT SUM(t.total)\nFROM orders o\nINNER JOIN order_items t ON o.order_id = t.order_id\nINNER JOIN products p ON t.product_id = p.product_id\nWHERE p.type = 'service' \n  AND MONTH(o.order_date) = 2\n  AND YEAR(o.order_date) = YEAR(CURDATE());", "task_type": "coding"}
{"input": "Design a C++ program to read and display a matrix.", "output": "#include <iostream>\n\nusing namespace std; \n\nint main(){\n    int r, c, e; \n    cout << \"Input number of rows : \"; \n    cin >> r; \n    cout << \"Input number of columns : \"; \n    cin >> c; \n    \n    int M[r][c]; \n    // Take input of elements \n    for(int i = 0; i < r; ++i){\n        cout << \"Enter elements of row \"<< i+1; \n        for(int j = 0; j < c; ++j){\n            cin >> e; \n            M[i][j] = e;\n        }\n    }\n  \n    // Display \n    cout << \"Elements of matrix\\n\"; \n    for(int i = 0; i < r; ++i){ \n        for(int j = 0; j < c; ++j){ \n            cout << M[i][j] << \" \";\n        } \n        cout << endl;\n    } \n    return 0;\n}", "task_type": "coding"}
{"input": "Name the components of a typical machine learning pipeline.", "output": "A typical machine learning pipeline consists of data pre-processing, model training, model evaluation and model deployment. Data pre-processing involves cleaning, formatting, and transforming the data, while model training involves selecting an appropriate model and using it to learn from the data. Model evaluation evaluates the models and assists in model selection. The final step is deployment of the model, to enable inference from and prediction on new data points.", "task_type": "coding"}
{"input": "How do you set up a local development environment for a Node.js application?", "output": "Setting up a local development environment for a Node.js application involves installing a compatible version of Node.js and setting up the necessary modules. After installation, node’s package manager, NPM, can be used to install the packages and dependencies for the application. Additionally, an IDE such as Visual Studio Code can be used for writing and running the code.", "task_type": "coding"}
{"input": "Suggest three methods for removing duplicate elements from an array in JavaScript.", "output": "Three methods for removing duplicate elements from an array in JavaScript are:\n1. Using the Set object: The Set object lets you store unique values of any type, escluding duplicate values.\n2. Using the filter method: The filter method creates a new array with all elements that pass the test implemented by the provided function.\n3. Using the reduce method: The reduce method applies a function to each element in the array to reduce it to a single value. The function needs to return a new value every time it is called.", "task_type": "coding"}
{"input": "You are given a list of numbers, write a program to calculate the mode.", "output": "from collections import Counter\n\ndef find_mode(lst):\n    counter = Counter(lst)\n    mode_vals = [val for val, count in counter.items() if count == max(counter.values())]\n    return min(mode_vals)\n\nprint(find_mode([1, 2, 3, 3, 4, 4, 5]))", "task_type": "coding"}
{"input": "Write a code to get the top 5 Twitter trends in the US.", "output": "\"\"\"\nGet the top 5 Twitter trends in the US\n\"\"\"\n\nimport tweepy\n\ndef get_top_trends():\n    # Setup authorization\n    auth = tweepy.OAuthHandler('','')\n    auth.set_access_token('','')\n    api = tweepy.API(auth)\n\n    # Get trends\n    trends_result = api.trends_place(23424977)\n    trends = trends_result[0]['trends']\n\n    # Get top 5 trends\n    top_trends = []\n    for trend in trends:\n        if trend['tweet_volume'] is not None and len(top_trends) < 5:\n            top_trends.append(trend['name'])\n\n    return top_trends\n\nif __name__ == '__main__':\n    print(get_top_trends())", "task_type": "coding"}
{"input": "Find all substrings of a string that are palindromes in Python.", "output": "def get_all_palindromes(input_string):\n    palindromes = []\n    for substring_length in range(len(input_string)):\n        for i in range(len(input_string) - substring_length + 1):\n            sub_string = input_string[i: i + substring_length]\n            if sub_string == sub_string[::-1]:\n                palindromes.append(sub_string)\n    return palindromes\n\n# Usage\npalindromes = get_all_palindromes(\"banana\")\nprint(palindromes) # ['a', 'ana', 'anana', 'b', 'na', 'nana']", "task_type": "coding"}
{"input": "Create a Python script to find the greatest common divisor (GCD) of a pair of integers.", "output": "def findGCD(x, y): \n  \n    # This function implements the Euclidian algorithm \n    # to find GCD of two numbers \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver program \ngcd = findGCD(10, 12) \nprint(gcd)", "task_type": "coding"}
{"input": "Write a JSON object that contains five key-value pairs.", "output": "{\n    \"name\": \"John Smith\",\n    \"age\": 35,\n    \"email\": \"john.smith@example.com\",\n    \"phone\": \"+1 123 456 7890\",\n    \"address\": \"123 Main Street, Anytown, US\"\n}", "task_type": "coding"}
{"input": "In C++, write a function to allocate memory for an array of integers.", "output": "// C++ program to allocate memory for an array of integers \n\n#include<iostream> \nusing namespace std; \n  \nint* allocatearray(int size) \n{ \n    // Allocate memory for given number of integers \n    int *ptr = new int[size]; \n  \n    // Initialize the array \n    for (int i = 0; i < size; i++) \n        ptr[i] = i+10; \n  \n    return ptr; \n} \n  \n// Main function \nint main() \n{ \n    int size = 5; \n    int *ptr = allocatearray(size); \n  \n    cout << \"Array elements are \"; \n    for (int i = 0; i < size; i++) \n        cout << ptr[i] << \" \"; \n  \n    cout << endl; \n  \n    delete[] ptr; \n  \n    return 0; \n}", "task_type": "coding"}
{"input": "Provide a function to implement a Binary Tree traversal.", "output": "def printTree(root): \n    \n    # Check if tree is empty\n    if root == None: \n        return\n    \n    # First print the root data\n    print(root.data, end=\" \")\n    \n    # First recur on left child\n    printTree(root.left)\n    \n    # the recur on right child\n    printTree(root.right)", "task_type": "coding"}
{"input": "Create a Python script to compact a given list of elements.", "output": "def compact_list(lst):\n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Iterate through lst\n    for item in lst:\n        if item != current:\n            current = item\n            new_list.append(current)\n    # Return the new list\n    return new_list\n    \n# Call the function with the given list\nmy_list = [1,1,2,3,3,3,4,4,4,4,5]\nprint(compact_list(my_list)) # [1,2,3,4,5]", "task_type": "coding"}
{"input": "Create a function to detect if two given strings are anagrams or not.", "output": "def is_anagram(str1, str2):\n    word1 = ''.join(sorted(str1))\n    word2 = ''.join(sorted(str2))\n    if word1 == word2:\n        return True\n    return False\n\nresult = is_anagram(str1, str2)\nprint(\"Is anagram:\", result)", "task_type": "coding"}
{"input": "Write a C# program to remove all adjacent duplicates from a string.", "output": "string removeAdjacentDuplicates(string str) \n{ \n    int l = str.Length; \n    char[] array = str.ToCharArray(); \n  \n    int index = 0; \n    for (int i = 0; i < l; i++) \n    { \n        if (i == 0 || array[i - 1] != array[i]) \n            array[index++] = array[i]; \n        else\n            while (i + 1 < l && array[i + 1] == array[i]) \n                i++; \n    } \n  \n    return new string(array, 0, index); \n}", "task_type": "coding"}
{"input": "Produce a function which can take two strings as input and check if they are anagrams.", "output": "def is_anagram(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\n    # sort the strings \n    str1_sorted = ''.join(sorted(str1_lower))  \n    str2_sorted = ''.join(sorted(str2_lower)) \n\n    # compare the sorted strings \n    if(str1_sorted == str2_sorted):  \n        return True\n    else: \n        return False", "task_type": "coding"}
{"input": "Create an API by combining the given HTML and JavaScript code.", "output": "let getGreeting = (name) => {\n  return `Hello, ${name}`;\n}\n\nlet outputElement = document.getElementById(\"output\");\n\nlet getName = () => {\n  return \"John\";\n}\n\nconst render = (message, element) => {\n  element.innerHTML = message;\n}\n\nrender(getGreeting(getName()), outputElement);", "task_type": "coding"}
{"input": "Generate a C program to encrypt a sentence using Caesar cipher.", "output": "#include <stdio.h> \n#include <string.h> \n\nchar encrypt(char ch, int key); \n\nint main() \n{ \n    char message[] = \"The quick brown fox jumps over the lazy dog\"; \n    int key;\n  \n    printf(\"Enter the key: \"); \n    scanf(\"%d\", &key);\n\n    char encrypted_message[100]; \n  \n    for (int i = 0; i < strlen(message); ++i) { \n        encrypted_message[i] = encrypt(message[i], key); \n    }\n\n    printf(\"Encrypted message: %s\\n\", encrypted_message); \n    return 0; \n} \n\nchar encrypt(char ch, int key) \n{ \n    if (ch >= 'a' && ch <= 'z') \n        return (char)('a' + (ch - 'a' + key) % 26); \n    else if (ch >= 'A' && ch <= 'Z') \n        return (char)('A' + (ch - 'A' + key) % 26); \n    else\n        return ch; \n}", "task_type": "coding"}
{"input": "Below is the code of a shopping list application. Modify it to add a function to calculate the total cost of all items in the list.", "output": "shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}\n\ndef calculate_cost(list):\n    cost = 0\n    for item in list:\n        cost += list[item]\n    return cost\n\ntotal_cost = calculate_cost(shopping_list)\nprint(total_cost)  # prints 10.25", "task_type": "coding"}
{"input": "Create a function to check if the two strings can be made equal by replacing the letters with asterisks in the same order.", "output": "public boolean canBeEqual(String s1, String s2) {\n    if (s1.length() != s2.length()) return false;\n    int len = s1.length();\n    for (int i = 0; i < len; i++) {\n        if (s1.charAt(i) != s2.charAt(i) && s2.charAt(i) != '*') return false;\n    }\n    return true;\n}", "task_type": "coding"}
{"input": "Write a class in Python to store the objects of student and their grades.", "output": "# Class to store student and grades\n\nclass StudentGrades:\n    def __init__(self, student_name):\n        self.student_name = student_name\n        self.grades = {}\n     \n    def add_grade(self, course_name, grade):\n        self.grades[course_name] = grade\n    \n    def get_total_grade(self):\n        total_grade = 0\n        for grade in self.grades.values():\n            total_grade += grade\n        return total_grade", "task_type": "coding"}
{"input": "Write a Java program for sorting a given list of numbers in descending order.", "output": "import java.util.Arrays; \n\npublic class SortList { \n    public static void main(String[] args) \n    { \n        int unsortedList[] = {7, 6, 5, 4, 3, 2, 1}; \n        Arrays.sort(unsortedList);\n  \n        int n = unsortedList.length; \n        for (int i=n-1; i>=0; i--) \n            System.out.print(unsortedList[i]+\" \"); \n    } \n}", "task_type": "coding"}
{"input": "Construct an HTML table with two columns and 4 rows.", "output": "<table>\n  <tr>\n    <th>First Column</th>\n    <th>Second Column</th>\n  </tr>\n  <tr>\n    <td>Row 1</td>\n    <td>Row 1</td>\n  </tr>\n  <tr>\n    <td>Row 2</td>\n    <td>Row 2</td>\n  </tr>\n  <tr>\n    <td>Row 3</td>\n    <td>Row 3</td>\n  </tr>\n  <tr>\n    <td>Row 4</td>\n    <td>Row 4</td>\n  </tr>\n</table>", "task_type": "coding"}
{"input": "Create a Python class for a product that includes data fields for name, description, and price.", "output": "class Product:\n  def __init__(self, name, description, price):\n    self.name = name\n    self.description = description\n    self.price = price\n\n  def __str__(self):\n    return f\"Name: {self.name}\\nDescription: {self.description}\\nPrice: {self.price}\"", "task_type": "coding"}
{"input": "Write a React component that implements a toggle button.", "output": "class ToggleButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonState: false,\n    };\n  }\n  \n  handleClick() {\n    this.setState({ buttonState: !this.state.buttonState });\n  }  \n\n  render() {\n    let buttonText = this.state.buttonState ? 'ON' : 'OFF';\n    return (\n      <button onClick={this.handleClick.bind(this)}>\n        {buttonText}\n      </button>\n    );\n  }\n}", "task_type": "coding"}
{"input": "Suppose there is an array of numbers. Write a Java program to sort the array in ascending order.", "output": "public class SortAscending { \n    public static void main(String[] args) \n    {\n        int[] numbers = {3,8,5,1,2,6,4};\n        int temp = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = i+1; j < numbers.length; j++) {\n                if (numbers[i] > numbers[j]) {\n                    //swap elements\n                    temp = numbers[i]; // assign value of i to temp\n                    numbers[i] = numbers[j];  // assign value of j to i\n                    numbers[j] = temp;  // assign value of temp to j\n                }\n            }\n        }\n        System.out.println(\"Array elements in ascending order:\");\n        for (int i = 0; i < numbers.length; i++) { \n            System.out.print(numbers[i]+\" \"); \n        } \n    }\n}", "task_type": "coding"}
{"input": "Modify the following code so that it returns the lowest common multiple of two given numbers?", "output": "def lowest_common_multiple(x, y): \n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n    return lcm", "task_type": "coding"}
{"input": "Translate the following C++ program into Java.", "output": "import java.util.Scanner;\n\npublic class Program {    \n    public static void main(String[] args) {      \n        Scanner scanner = new Scanner(System.in);\n        int num1 = 0;\n        int num2 = 0;\n        int result = 0;\n       \n        System.out.print(\"Enter two numbers separated by a space: \");\n        num1 = scanner.nextInt();\n        num2 = scanner.nextInt();\n       \n        result = num1 + num2;\n       \n        System.out.println(\"The sum of \" + num1 + \" and \"\n         + num2 + \" is \" + result);\n    }\n}", "task_type": "coding"}
{"input": "Given a number N, write a function to check if N is prime.", "output": "function isPrime(n)\n{\n    // alleven numbers are not prime\n    if (n % 2 == 0) return false;\n\n    // check odd divisors b/w 3 and sqrt(n)\n    let limit = Math.sqrt(n);\n    for (let i = 3; i <= limit; i=i+2)\n    {\n        // if evenly divisible then not prime\n        if (n % i == 0) return false;\n    }\n\t\n    return true;\n}", "task_type": "coding"}
{"input": "Suggest a method in Java to compare two strings.", "output": "The easiest way to compare two strings in Java is to use the built-in String class's equals() method. This method compares all characters in the strings, and returns true if the strings are equal or false otherwise. For example, given the strings \"Hello\" and \"Goodbye\", the following code would evaluate to false:\n\nString s1 = \"Hello\";\nString s2 = \"Goodbye\";\nboolean equal = s1.equals(s2); // false", "task_type": "coding"}
{"input": "Make a matrix multiplication program that takes an arbitrary number of matrices as input.", "output": "def matrix_multiplication(*matrices):\n    res = [[0 for _ in range(len(matrices[0][0]))]\n        for _ in range(len(matrices[0]))]\n    for y in range(len(matrices[0])):\n        for x in range(len(matrices[0][0])):\n            for m in range(len(matrices)):\n                res[y][x] += matrices[m][y][x]\n    return res", "task_type": "coding"}
{"input": "Design an algorithm that computes the minimum number of moves taking an array of integers to a sorted array.", "output": "def minMoves(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\n    return moves", "task_type": "coding"}
{"input": "Describe the different types of loops in Java.", "output": "In Java, there are three types of loops: while loops, for loops and do-while loops. While loops execute a block of code until a certain condition is met. For loops are used when the number of iterations is known, with the loop iterating a specific number of times. Do-while loops are similar to while loops, except the condition is tested after the loop iteration, so the loop body will always execute at least once.", "task_type": "coding"}
{"input": "Write a basic python program to accept a string input, use it to create a dictionary and sort it by alphabetical order", "output": "inp =raw_input(\"Enter String:\")\nmy_dict = {}\nfor character in inp:\n     if character not in my_dict:\n         my_dict[character] = 1\n     else:\n         my_dict[character] += 1\n\nsorted_order = sorted(my_dict.items(), key=lambda x: x[0])\n\nprint(\"Sorted Dictionary\")\nfor character in sorted_order:\n    print(\"{} : {}\".format(character[0], character[1]))", "task_type": "coding"}
{"input": "Write a code to send a message \"Hello World!\" using the Twilio API.", "output": "from twilio.rest import Client\n\n# Your Account SID from twilio.com/console\naccount_sid = \"XXXXXXXXXXXXXXXXXXXXXXX\"\n# Your Auth Token from twilio.com/console\nauth_token  = \"XXXXXXXXXXXXXXXXXXXXXXX\"\n\nclient = Client(account_sid, auth_token)\n\nmessage = client.messages.create(\n    to=\"+123456789\", \n    from_=\"+0987654321\",\n    body=\"Hello World!\")\n\nprint(message.sid)   # Output the message id", "task_type": "coding"}
{"input": "How does recursion work?", "output": "Recursion is a method of problem solving where the solution to a problem relies on solving smaller instances of the same problem. In computing, recursion is a process by which a method calls itself continuously. A base case is used to terminate the recursion, and each time the method calls itself, it works on a smaller version of the problem. Recursive algorithms can be used to solve a wide range of problems, from sorting and searching algorithms, to graph traversal and problems in computer graphics.", "task_type": "coding"}
{"input": "Create an algorithm that takes two numbers, a and b, and finds their greatest common divisor (GCD).", "output": "// Algorithm to find the GCD of two numbers\n\n// Function to find GCD \nfunction findGCD(a, b) { \n    // If both a and b are 0 \n    if (a == 0 && b == 0) \n        return 0; \n  \n    // If a is 0, GCD is b \n    if (a == 0) \n        return b; \n  \n    // If b is 0, GCD is a \n    if (b == 0) \n        return a; \n  \n    // Find GCD recursively \n    return findGCD(b, a % b); \n}\n\n// Variable to hold a and b\nvar a = 12;\nvar b = 18;\n\n// Find GCDs\nvar gcd = findGCD(a, b); \n  \n// Print GCD\nconsole.log(\"The GCD of\", a, \"and\", b, \"is\", gcd);", "task_type": "coding"}
{"input": "Describe what a quicksort algorithm does?", "output": "Quicksort is a widely used sorting algorithm that employs the divide-and-conquer approach. It works by partitioning a given array into two subarrays, the left consisting of smaller elements and the right consisting of larger elements. The sorting algorithm then recursively sorts each subarray until the array is completely sorted. Quicksort has a time complexity of O(n log n) in the best case, making it one of the most efficient sorting algorithms.", "task_type": "coding"}
{"input": "Given a dictionary of words and a set of characters, how would you find the longest word which can be constructed from the given set of characters?", "output": "One way to find the longest word which can be constructed from a set of characters is by using a trie data structure. To do this, first create the trie from the given dictionary of words, then traverse it to look for the longest word which can be constructed from the given set of characters. At each node, check if the character at the current node is present in the given set, and if yes, traverse down. If no, then backtrack until a valid character is found.", "task_type": "coding"}
{"input": "Design an object-oriented class in Python that stores a book's title, author, and publisher.", "output": "class Book:\n  \n  def __init__(self, title, author, publisher):\n    self._title = title\n    self._author = author\n    self._publisher = publisher\n\n  def get_title(self):\n    return self._title\n\n  def set_title(self, title):\n    self._title = title\n\n  def get_author(self):\n    return self._author\n  \n  def set_author(self, author):\n    self._author = author\n\n  def get_publisher(self):\n    return self._publisher\n  \n  def set_publisher(self, publisher):\n    self._publisher = publisher", "task_type": "coding"}
{"input": "Construct a C++ class to store a matrix.", "output": "#include <cstdio> \n#include <vector> \nusing namespace std; \n\nclass Matrix { \n    private: \n        vector<vector<int>> matrix; \n        int rows, cols; \n  \n    public: \n        // Default constructor \n        Matrix(int r = 0, int c = 0); \n        \n        // Parametrized constructor\n        Matrix(int r, int c, int ver[][c]);  \n  \n        // Copy constructor \n        Matrix(Matrix& orig); \n  \n        // Destructor \n        ~Matrix(); \n  \n        // Access matrix elements \n        int operator()(const int& row, \n                       const int& col) const; \n        int& operator()(const int& row, \n                        const int& col); \n  \n        // Utility functions \n        int getRows() const; \n        int getCols() const; \n}; \n  \nMatrix::Matrix(int r, int c) \n    : rows(r), cols(c) \n{ \n    // Allocate memory for the matrix \n    matrix.resize(rows); \n    for (int i = 0; i < rows; i++) \n        matrix[i].resize(cols); \n} \n\nMatrix::Matrix(int r, int c, int ver[][c])\n    : rows(r), cols(c)\n{\n    // Allocate memory for the matrix\n    matrix.resize(rows);\n    for (int i = 0; i < rows; i++)\n        matrix[i].resize(cols);\n    \n    // Copy the matrix\n    for (int i = 0; i < rows; i++) \n        for (int j = 0; j < cols; j++) \n            matrix[i][j] = ver[i][j]; \n} \n  \n  \nMatrix::Matrix(Matrix& orig) \n    : Matrix(orig.getRows(), orig.getCols()) \n{ \n    for (int i = 0; i < rows; i++) \n        for (int j = 0; j < cols; j++) \n            matrix[i][j] = orig(i, j); \n} \n  \nMatrix::~Matrix()\n{\n    rows = 0;\n    cols = 0;\n    matrix.clear();\n}\n  \nint Matrix::getRows() const\n{ \n    return rows; \n} \n  \nint Matrix::getCols() const\n{ \n    return cols; \n} \n  \nint Matrix::operator()(const int& row, \n                       const int& col) const\n{ \n    return matrix[row][col]; \n} \n  \nint& Matrix::operator()(const int& row, \n                        const int& col)\n{ \n    return matrix[row][col]; \n}", "task_type": "coding"}
{"input": "Given an array of integers and an integer, return true if any two integers in the array add up to the given integer.", "output": "def test_sum(arr, sum): \n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] + arr[j] == sum: \n                return True \n    return False\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \n        print(\"Array doesn't have two elements with the given sum\")", "task_type": "coding"}
{"input": "Design an API to pull company data from an external source.", "output": "\"\"\"\nAPI to pull company data from an external source.\n\nParameters:\n1. company_id: Unique id of the company\n2. fields: List of strings of fields to include in the response\n\nReturns:\nA JSON containing the specified fields from the external source.\n\"\"\"\n\ndef get_company_data(company_id, fields):\n    # use an external API to fetch the data\n    response = requests.get(f\"http://example.com/api/company?id={company_id}\")\n    data = response.json()\n    response_data = {}\n    for field in fields:\n        response_data[field] = data[field]\n    return response_data", "task_type": "coding"}
{"input": "Construct a 2-dimensional array, A, of size M*N, filled with all zeroes.", "output": "A = [[0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0]]", "task_type": "coding"}
{"input": "Use the back-propagation algorithm to learn the weights of a given neural network.", "output": "# Initialize weights with random values & weights\nweights = np.random.uniform(-1,1, (num_nodes, num_inputs))\nbias = np.random.uniform(-1,1, num_nodes)\n\n#Forward pass\nwhile True:\n    \n    # Compute a_L and estimated output y_hat\n    a_L, y_hat = compute_forward_pass(x, weights, bias)\n    \n    # Compute the loss\n    loss = compute_loss(y_hat, y)\n    \n    # Compute delta and derivatives\n    delta = compute_delta(a_L, y)\n    weights_derivatives, bias_derivatives = compute_derivatives(x, a_L, delta)\n\n    # Update the weights\n    weights -= learning_rate * weights_derivatives\n    bias -= learning_rate * bias_derivatives", "task_type": "coding"}
{"input": "Construct a function to check whether a string is a valid IPv4 address or not.", "output": "def is_valid_ipv4(string):\n    # Split the string at the '.'s\n    parts = string.split(\".\")\n\n    # Check if the length of the parts is valid\n    if len(parts) != 4:\n            return False\n\n    # Iterate over each part and check if it is a valid number\n    for part in parts:\n        if not part.isdigit() or int(part) > 255 or int(part) < 0:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    string = \"192.168.1.1\"\n    print(is_valid_ipv4(string))", "task_type": "coding"}
{"input": "Extract the phone number from given string and output it as an integer.", "output": "\"\"\"\nExtract the phone number from given string and output it as an integer\n\"\"\"\n\ndef extract_phone_number(s):\n    s = s.replace('+', '')\n    numbers = \"\"\n    for c in s:\n        if c.isdigit():\n            numbers += c\n    return int(numbers)\n\nif __name__ == '__main__':\n    s = \"Hi, my number is +1-345--678-9012\"\n    num = extract_phone_number(s)\n    print(num)", "task_type": "coding"}
{"input": "Generate a function to calculate the grade of a student based on their marks.", "output": "def calculateGrade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"", "task_type": "coding"}
{"input": "Make a class in Python which will represent a binary search tree.", "output": "class BinarySearchTree:\n \n    def __init__(self, value): \n        self.left = None\n        self.right = None\n        self.value = value\n \n    def inorder(self):\n        if self.left:\n            self.left.inorder()\n        print(self.value)\n        if self.right:\n            self.right.inorder()\n \n    def insert(self, value):\n        if value <= self.value:\n            if self.left is None:\n                self.left = BinarySearchTree(value)\n            else:\n                self.left.insert(value)\n        elif value > self.value:\n            if self.right is None:\n                self.right = BinarySearchTree(value)\n            else:\n                self.right.insert(value)", "task_type": "coding"}
{"input": "Show how this array could be sorted using the insertion sort algorithm.", "output": "// Initial Array\n[3, 4, 8, 1, 5]\n\n// 1st Pass\n[3, 4, 8, 1, 5] // Move 8 to the left\n[3, 4, 1, 8, 5]\n\n// 2nd Pass\n[3, 4, 1, 8, 5] // Move 4 to the left\n[3, 1, 4, 8, 5]\n\n// 3rd Pass\n[3, 1, 4, 8, 5] // Move 3 to the left\n[1, 3, 4, 8, 5]\n\n// 4th Pass\n[1, 3, 4, 8, 5] // Move 8 to the right\n[1, 3, 4, 5, 8]\n\n// Final Array\n[1, 3, 4, 5, 8]", "task_type": "coding"}
{"input": "Create a function to take two input strings and return the longest common substring.", "output": "def longest_common_substring(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\n    return longest_substring", "task_type": "coding"}
{"input": "Perform a linear search to find if a key exists in an array using C.", "output": "// Perform linear search \nint flag = 0; \nfor (int i = 0; i < 5; i++) { \n   if (arr[i] == key) { \n      flag = 1; \n      break; \n   } \n} \nif (flag == 1) \n    printf(\"Present\"); \nelse\n    printf(\"Not Present\");", "task_type": "coding"}
{"input": "Implement a function in Java to find the frequency of a particular character in a given string.", "output": "public static int getCharFrequency(String str, char c) \n{ \n   int count = 0; \n   for (int i = 0; i < str.length(); i++)  \n   { \n       if (str.charAt(i) == c) \n           count++; \n   } \n   return count; \n}", "task_type": "coding"}
{"input": "Write a JavaScript code that returns the current date in the format “Wednesday, November 20, 2019”.", "output": "let today = new Date();\nlet day = today.getDay();\nlet daylist = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\nlet month = today.getMonth()+1;\nlet year = today.getFullYear();\n\nlet result = daylist[day]+\", \"+month+\" \"+today.getDate()+\", \"+year;", "task_type": "coding"}
{"input": "Write a C++ program to generate Fibonacci numbers up to a maximum of n values.", "output": "#include <iostream>\n\nint main() {\n    int n = 20;\n    int a = 0, b = 1, c;\n\n    std::cout << a << \" \" << b << \" \";\n\n    for (int i = 2; i < n; ++i) {\n        c = a + b;\n        std::cout << c << \" \";\n        a = b;\n        b = c;\n    }\n\n    return 0;\n}", "task_type": "coding"}
{"input": "What is the meaning of the term “variable” in programming?", "output": "In programming, a variable is a symbolic name for a value that can change over the course of a program. It usually refers to a memory location where a whole value is stored. It can also refer to an expression that produces a value. Variables can store different values of different types, such as integers, floats, strings, and Booleans.", "task_type": "coding"}
{"input": "How can one manage memory in C++?", "output": "In C++, memory can be managed by allocating and deallocating memory dynamically. This can be done either manually, using the new and delete operators, or by the use of smart pointers and other library functions. One can also free up memory by deleting unneeded objects, or by taking advantage of resource-managing classes like std::string, std::array, and std::vector.", "task_type": "coding"}
{"input": "Create a algorithm to calculate the fibonacci number of nth term.", "output": "def fib(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            c = a + b\n            a = b\n            b = c\n        return b", "task_type": "coding"}
{"input": "Create a Python code snippet to create a line chart with three different categories.", "output": "import matplotlib.pyplot as plt\n\n# Data to plot\ncategory1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]\n\n# Create the line plot\nplt.plot(category1, label='Category 1')\nplt.plot(category2, label='Category 2')\nplt.plot(category3, label='Category 3')\n\n# change font type and size\nplt.rc('font', size=16)\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()", "task_type": "coding"}
{"input": "Using Angular, create a service to get the current date.", "output": "import { Injectable } from '@angular/core'; \nimport { DatePipe } from '@angular/common'; \n\n@Injectable({\n  providedIn: 'root'\n}) \nexport class DateService { \n  constructor(private datePipe: DatePipe) { \n  } \n\n  getCurrentDate(): string { \n    return this.datePipe.transform(new Date(), 'yyyy-MM-dd');  \n  } \n}", "task_type": "coding"}
{"input": "Create a JavaScript function for the linear search algorithm.", "output": "// Linear search algorithm \nfunction linearSearch(array, item) {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === item) {\n      return i;\n    }\n  }\n  return -1; \n}\n\n// Example Usage\nlet array = [2, 3, 4, 5, 6, 7];\nlet item = 5;\nlet index = linearSearch(array, item);\n// index should be 3", "task_type": "coding"}
{"input": "Create a GUI interface for a multiplayer card game using PyQt5.", "output": "import sys \nimport PyQt5 \nfrom PyQt5.QtWidgets import QApplication, QWidget \n  \n  \nclass Game(QWidget): \n    def __init__(self): \n        super().__init__() \n        self.title = 'Multiplayer Card Game' \n        self.left = 400 \n        self.top = 400 \n        self.width = 300 \n        self.height = 100 \n        self.initUI()\n  \n    def initUI(self): \n        self.setWindowTitle(self.title) \n        self.setGeometry(self.left, self.top,  \n                         self.width, self.height)\n        self.show() \n  \napp = QApplication(sys.argv) \nscreen = Game() \nsys.exit(app.exec_())", "task_type": "coding"}
{"input": "Create a NodeJS server that listens on port 8080 and serves a simple HTML page.", "output": "const http = require('http');\nconst port = 8080;\n\nconst server = http.createServer(function (request, response) {\n    response.writeHead(200, { \"Content-Type\": \"text/html\" }); \n    response.write('<html><body><h1>Hello, World!</h1></body></html>');  \n    response.end(); \n});\n\nserver.listen(port);\nconsole.log(\"Listening at port\", port);", "task_type": "coding"}
{"input": "Analyze the following code and explain what it does:\n\ndef func(n):\n    if n == 0:\n        return 0\n    else:\n        return n + func(n - 1)", "output": "This code implements a recursive function to compute the sum of numbers from 1 to n. Specifically, the base case is when n is 0, and the recursive case is when n is greater than 0. In the recursive case, the function will call itself with n-1 as the argument, and then adds n to the result of that call. Thus, each recursive call will add one more number until it reaches the base case. This is known as the base case and recursion principle. The result of the function will be the sum of the numbers from 1 to n.", "task_type": "coding"}
{"input": "Write a Java program to print a right triangle star pattern with a given base.", "output": "public class RightTrianglePattern \n{ \n  \n    // Function to demonstrate printing pattern \n    public static void printPattern(int baseSize) \n    { \n        int i, j; \n  \n        // outer loop to handle the number of rows \n        for(i=0; i<baseSize; i++) \n        { \n            // inner loop to handle number spaces  \n            // values changing according to requirement \n            for(j=2*(baseSize-i); j>=0; j--) \n            { \n                // printing spaces \n                System.out.print(\" \"); \n            } \n              \n            //  inner loop to handle number of columns \n            //  values changing according to outer loop \n            for(j=0; j<=i; j++) \n            { \n                // printing stars \n                System.out.print(\"*\" + \" \"); \n            } \n            \n            System.out.println(); \n        }  \n    } \n  \n    // Driver Function\n    public static void main(String args[]) \n    { \n        int baseSize = 4;\n        printPattern(baseSize); \n    } \n\n}", "task_type": "coding"}
{"input": "Write an SQL query to return the customers whose purchases include both productid 100 and 101", "output": "SELECT c.customer_id \nFROM Customers c\n    INNER JOIN Purchases p\n    ON c.customer_id = p.customer_id\nWHERE p.productid = 100\n    AND p.customer_id\nIN \n    (SELECT DISTINCT p2.customer_id\n    FROM Purchases p2\n    WHERE p2.productid = 101)", "task_type": "coding"}
{"input": "Create a program to determine whether a given sequence is an arithmetic progression or not.", "output": "def is_arithmetic_progression(arr):\n # Check if the given array is empty\n if len(arr) == 0:\n  return False\n # Initialize the common difference and the first element\n commonDifference = arr[1] - arr[0]\n firstElement = arr[0]\n # Iterate over the array\n for i in range(len(arr)):\n  if arr[i] != firstElement + (i * commonDifference):\n   return False\n # If all elements are in an arithmetic progression\n return True", "task_type": "coding"}
{"input": "Given an array containing words and a string, find the shortest word in the array that is a substring of the string", "output": "\"\"\"\nGiven an array containing words and a string, find the shortest word in the array that is a substring of the string.\n\"\"\"\n\ndef find_shortest_substring(words, string): \n    min_length = float(\"inf\")\n    min_word = None\n    for word in words:\n        j = string.find(word)\n        if j>-1 and len(word)<min_length:\n            min_length = len(word)\n            min_word = word\n    return min_word\n\nif __name__ == '__main__': \n    words = [\"apple\", \"banana\", \"cat\", \"dog\"]\n    string = \"aquickbrownfoxjumpsoverthelazydog\"\n    print(find_shortest_substring(words, string))", "task_type": "coding"}
{"input": "Generate an array with the numbers from -10 to 10 in incremental order.", "output": "let arr = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];", "task_type": "coding"}
{"input": "Create a Visual Studio Code extension that provides auto-complete features for a specific language.", "output": "This Visual Studio Code extension will create an Auto-Complete Provider for a specific language (e.g. JavaScript, Python, etc.). It will analyze the syntax of a given language and provide word suggestions while typing in the source code. The extension should be able to detect the language type from the file extension and then provide the auto-complete suggestions accordingly.", "task_type": "coding"}
{"input": "Write an HTML code to create a simple two-column table and fill it with 4 random colors.", "output": "<table>\n  <thead>\n    <th>Color 1</th>\n    <th>Color 2</th>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"background-color: #e12b33;\">&nbsp;</td>\n      <td style=\"background-color: #2771e1;\">&nbsp;</td>\n    </tr>\n    <tr>\n      <td style=\"background-color: #f3af02;\">&nbsp;</td>\n      <td style=\"background-color: #30e717;\">&nbsp;</td>\n    </tr>\n  </tbody>\n</table>", "task_type": "coding"}
{"input": "Create a function in Python that takes two strings and checks if the characters in the second string exist in the first string.", "output": "def char_exists_in_string(s1, s2):\n    for char in s2:\n        if char not in s1:\n            return False\n    \n    return True\n\nif __name__ == '__main__':\n    s1 = \"hello world\"\n    s2 = \"llo\"\n    print(char_exists_in_string(s1, s2))", "task_type": "coding"}
{"input": "Write a Java code snippet to show the below numbers in a tabular format on the console.", "output": "int [] nums = {8, 10, 12};\nSystem.out.println(\"Number  \\tNumber  \\tNumber\");\nfor(int i=0; i<nums.length; i++) {\n    System.out.println(nums[i] + \"\\t\\t\" + nums[i+1] + \"\\t\\t\" + nums[i+2]);\n    i++;\n}", "task_type": "coding"}
{"input": "Modify the following code to kill a thread after 10 seconds.", "output": "import threading \nimport signal \nfrom time import sleep \n\ndef exitThread(signum, frame): \n    raise SystemExit \n\ndef worker(): \n    try: \n        signal.signal(signal.SIGALRM, exitThread) \n        signal.alarm(10) \n        while True: \n            print(\"Thread\")  \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()", "task_type": "coding"}
{"input": "Generate a random password which contains 8 characters including characters, digits, and symbols.", "output": "import string\nimport random\n\ndef generate_password():\n    # get all letters and digits\n    chars = string.ascii_letters + string.digits + string.punctuation\n\n    # generate a 8 character password from chars\n    password = ''.join(random.sample(chars, 8))\n\n    return password\n\n# example\npassword = generate_password()\nprint(password) # >$z]e#43", "task_type": "coding"}
{"input": "Write a Python code to calculate the sum of three given numbers, if the values are equal, then return triple their sum", "output": "def sumThree(n1, n2, n3):\n    \"\"\"\n    This function returns the sum of three numbers\n\tIf the values are equal, it will return triple their sum\n    \"\"\"\n    if n1 == n2 == n3:\n        return 3 * (n1 + n2 + n3)\n    else:\n        return n1 + n2 + n3", "task_type": "coding"}
{"input": "Create an Angular component that displays information about a user.", "output": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-info',\n  template: `\n    <div>\n      <p>ID: {{ user.id }}</p>\n      <p>Name: {{ user.name }}</p>\n      <p>Age: {{ user.age }}</p>\n      <p>Email: {{ user.email }}</p>\n    </div>\n  `\n})\nexport class UserInfoComponent implements OnInit {\n\n  user = {\n    id: 1,\n    name: 'Bob',\n    age: 23,\n    email: 'bob@example.com'\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}", "task_type": "coding"}
{"input": "Explain what is meant by a backtracking algorithm.", "output": "A backtracking algorithm is an algorithmic technique that is used to find all (or some) solutions to a problem by incrementally building a solution and testing it against the given constraints. If the solution is not feasible or the constraints are not satisfied, the algorithm takes a step back and explores a different path of solution construction. The process continues until a solution is found or all the possibilities are exhausted.", "task_type": "coding"}
{"input": "What is aHeap data structure?", "output": "A heap is a specialized tree-based data structure in which the root-node key is compared with the keys of its children and arranged accordingly. It is typically used to implement priority queues where the key for each item is based on its priority. Heaps are also used for sorting, representing graphs, and as a data structure for the heapsort sorting algorithm.", "task_type": "coding"}
{"input": "Compose a Java program to print a given pattern on the screen.", "output": "public class Pattern {\n    public static void main(String[] args) {\n        int N = 5;\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                System.out.print(Math.abs(i-j)+1 + \" \");\n            }\n            System.out.println();\n        }\n    }\n} \n// Output \n1 2 3 4 5 \n2 1 2 3 4 \n3 2 1 2 3 \n4 3 2 1 2 \n5 4 3 2 1", "task_type": "coding"}
{"input": "Write a basic HTML structure with a header and a footer", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Document</title>\n</head>\n<body>\n <header>\n  <!-- Header Content Here -->\n </header>\n\n <main>\n  <!-- Page Content Here -->\n </main>\n\n <footer>\n  <!-- Footer Content Here -->\n </footer>\n</body>\n</html>", "task_type": "coding"}
{"input": "Write a Java program that takes an array of integers and prints the numbers that are divisible by 5", "output": "// Create the array of integers\nint[] numbers = {10, 20, 25, 15};\n \n// Iterate over array and print numbers divisible by 5\nfor (int number : numbers) {\n  if (number % 5 == 0) {\n    System.out.println(number);\n  }\n}\n \n// Output: 10 20 25", "task_type": "coding"}
{"input": "Design an algorithm in C to find all substrings of a given string.", "output": "void findAllSubstrings(char * str) \n{ \n    int n = strlen(str); \n  \n    /* Pick starting point in outer loop \n       and lengths of different strings for \n       a given starting point*/\n    for (int len = 1; len <= n; len++) \n        for (int i = 0; i <= n - len; i++) \n            printSubStr(str, i, i + len - 1); \n} \n  \n/* Print the substring between beg and end */\nvoid printSubStr(char *str, int beg, int end) \n{ \n    for (int i = beg; i <= end; i++) \n        printf(\"%c\", str[i]); \n  \n    printf(\"\\n\"); \n}", "task_type": "coding"}
{"input": "Design the algorithm to perform a depth-first search on given binary tree", "output": "def DFS(root):\n    s = Stack()\n    s.push(root)\n    while (s.size() > 0):\n        node = s.pop()\n        # Do something with the node\n        if (node.left != NULL):\n            s.push(node.left)\n        if (node.right != NULL):\n            s.push(node.right)", "task_type": "coding"}
{"input": "Create a recursive Python function to generate the Fibonacci series up to n-th terms.", "output": "\"\"\"\nCreate a recursive Python function to generate the Fibonacci series up to n-th terms.\n\"\"\"\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n    print(fibonacci(5))  # 5", "task_type": "coding"}
{"input": "Design a function in Python to toggle whether a given HTML tag has a given class.", "output": "def toggle_class(html_string, tag, tag_class):\n    soup = BeautifulSoup(html_string, 'html.parser')\n    tag_html = soup.find(tag)\n\n    if tag_html:\n        classes = tag_html.get('class')\n        if classes and tag_class in classes:\n            classes.remove(tag_class)\n        else:\n            classes.append(tag_class)\n        tag_html['class'] = classes\n    return soup.decode()\n\n# Usage\nhtml_string = '<div class=\"myClass\">Hello world</div>'\ntag = 'div'\ntag_class = 'myClass'\nnew_html_string = toggle_class(html_string, tag, tag_class)\nprint(new_html_string)\n# Output: <div>Hello world</div>", "task_type": "coding"}
{"input": "Create a function to sort an array of objects by the value of a certain key.", "output": "def sort_by_key(arr, key):\n  sorted_arr = sorted(arr, key=lambda k: k[key])\n  return sorted_arr\n\n# Testing\narr = [{'name': 'john', 'age': 20}, {'name': 'tim', 'age': 25}, {'name': 'mike', 'age': 30}]\nsorted_arr = sort_by_key(arr, 'age')\nprint(\"Sorted array by age: \", sorted_arr)", "task_type": "coding"}
{"input": "In a Java program, write a method to find the longest common subsequence of two strings.", "output": "public static String longestCommonSubsequence(String s1,String s2) {\n   int l1 = s1.length();\n   int l2 = s2.length();\n\n   int[][] aux = new int[l1+1][l2+1];\n   for (int i = 0; i < l1; i++) {\n      for (int j = 0; j < l2; j++) {\n         if (s1.charAt(i) == s2.charAt(j))\n            aux[i+1][j+1] = aux[i][j] + 1;\n         else\n            aux[i+1][j+1] = Math.max(aux[i+1][j], aux[i][j+1]);\n      }\n   }\n   StringBuilder sb = new StringBuilder();\n   for (int i = l1, j = l2; i != 0 && j != 0; ) {\n      if (aux[i][j] == aux[i-1][j])\n         i--;\n      else if (aux[i][j] == aux[i][j-1])\n         j--;\n      else {\n         sb.append(s1.charAt(i-1));\n         i--;\n         j--;\n      }\n   }\n   return sb.reverse().toString();\n}", "task_type": "coding"}
{"input": "Generate an algorithm that creates a Fibonacci sequence", "output": "def Fibonacci_sequence(length): \n    fib_seq = [0, 1]\n    if length == 1:\n        return [0]\n    elif length == 2:\n        return fib_seq\n    else:\n        for i in range(2, length):\n            fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n        return fib_seq\n\nif __name__ == '__main__':\n    length = 7\n    print(Fibonacci_sequence(length))", "task_type": "coding"}
{"input": "Write a code to take in a string and determine if the string is a palindrome or not.", "output": "def is_palindrome(string):\n    \"\"\"\n    Return True is the input string is a Palindrome, False if not.\n    Input: string\n    Output: Boolean\n    \"\"\"\n    # Cast input to string\n    if not isinstance(string, str):\n        string = str(string)\n    \n    # Reverse the string\n    rev_string = string[::-1]\n    \n    #Compare original string with reversed string\n    if string == rev_string:\n        return True\n    else:\n        return False", "task_type": "coding"}
{"input": "Write a function in Java to instantiate an Employee class with a given name and age.", "output": "public class Employee {\n\tprivate String name;\n\tprivate int age;\n\t\n\tpublic Employee(String name, int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n}", "task_type": "coding"}
{"input": "Design a function in Python to find all the elements in an array that are divisible by 3.", "output": "arr = [3, 8, 15, 20, 7]\n\ndef divisible_by_3(arr):\n    result = []\n    for element in arr:\n        if element % 3 == 0:\n            result.append(element)\n    return result\n\nprint(divisible_by_3(arr)) # Output: [3, 15, 20]", "task_type": "coding"}
{"input": "You are given a string array. Code a JavaScript function to remove duplicate strings from the array.", "output": "function removeduplicates(arr){\n    let arrDupRemoved = [];\n    for (let i = 0; i < arr.length; i++){\n      if(arrDupRemoved.indexOf(arr[i]) === -1){\n        arrDupRemoved.push(arr[i]);\n      }\n    }\n    return arrDupRemoved;\n  }\n\nconsole.log(removeduplicates(arrStrings)) // prints [\"apple\", \"orange\", \"banana\"]", "task_type": "coding"}
{"input": "Create a C program to swap two numbers using pointers.", "output": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 50;\n    int y = 100;\n    \n    printf(\"x = %d and y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"x = %d and y = %d\\n\", x, y);\n    \n    return 0;\n}", "task_type": "coding"}
{"input": "Design a function that will print out the leap years in a given interval", "output": "def print_leap_years(start_year, end_year): \n    for year in range(start_year, end_year + 1):\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            print(year)\n\nprint_leap_years(2015, 2050)", "task_type": "coding"}
{"input": "Make the following code thread-safe by implementing mutex locks.", "output": "#include <pthread.h>\n#include <mutex>\n\nint global_int = 0;\nstd::mutex mtx;\n\nvoid* inc_func(void* arg) {\n   mtx.lock();\n   global_int++;\n   mtx.unlock();\n   return NULL;\n}\n\nint main() {\n   pthread thread_a, thread_b; \n   std::unique_lock<std::mutex> lock(mtx);\n   ...\n   lock.unlock();\n   return 0;\n}", "task_type": "coding"}
{"input": "Create a C program that prints out the Fibonacci sequence.", "output": "#include <stdio.h>\n\nint main()\n{\n    int i, num, first=0, second=1, next;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &num);\n    printf(\"Fibonacci Series: \");\n    for (i = 0; i < num; i++)\n    {\n        if (i <= 1)\n            next = i;\n        else\n        {\n            next = first + second;\n            first = second;\n            second = next;\n        }\n        printf(\"%d \", next);\n    }\n    return 0;\n}", "task_type": "coding"}
{"input": "Describe how to create a 'dockerfile'", "output": "A Dockerfile is created by specifying a set of instructions for how to build an image for a Docker container. A Dockerfile should specify a base image and the desired version, update the package manager, set environment variables, run commands, define the port mapping for the application, add files from the host filesystem to the image, and set an entrypoint for the container.", "task_type": "coding"}
{"input": "What is the purpose of a join operation in a relational database?", "output": "A join operation in a relational database is used to combine data from two or more tables based on a common field. This is done to match and retrieve related data from one or multiple tables and then use it as a single result. The most common type of join is an inner join, which combines only the matching records from both tables. Other types of join operations are left join and right join, which combines all the data from a specified table and contains only the matching data from the other table.", "task_type": "coding"}
{"input": "Write code in Java to calculate the minimum number of coins needed to make change for a given amount.", "output": "public int calculateCoins(int amount, int[] array){ \n    int coinsNeeded = 0; \n    for (int i = array.length - 1; i >= 0; i--){ \n          \n        // Find the largest denomination \n        // which is smaller than amount \n        while (amount >= array[i]){ \n            amount = amount - array[i]; \n            coinsNeeded++; \n        } \n    } \n    return coinsNeeded; \n}", "task_type": "coding"}
{"input": "Write a method that prints out all the prime numbers between 1 and 100.", "output": "public static void printPrimeNumbers(){ \n    System.out.println(\"Prime numbers between 1 to 100 are : \"); \n    for (int i = 1; i <= 100; i++) { \n        boolean isPrime = true;\n        for (int j = 2; j < i; j++) { \n            if (i % j == 0) { \n                isPrime = false;\n                break; \n            } \n        } \n        if (isPrime) \n            System.out.print(i + \" \"); \n    } \n} \n\n// Output:\n// Prime numbers between 1 to 100 are : \n// 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97", "task_type": "coding"}
{"input": "Create a SQL query to get a list of the top 5 email domains from a customer table.", "output": "SELECT TOP 5 SUBSTRING(Email, LEN(Email) - CHARINDEX('@', REVERSE(Email)) + 2, LEN(Email)) \nAS Domain\nFROM Customers \nGROUP BY SUBSTRING(Email, LEN(Email) - CHARINDEX('@', REVERSE(Email)) + 2, LEN(Email)) \nORDER BY Domain DESC", "task_type": "coding"}
{"input": "Write a C program that takes an integer as input and prints the sum of all its digits.", "output": "#include<stdio.h> \n\n//Function to find the sum of digits \nint SumOfDigits(int n) \n{ \n\tint sum = 0; \n\twhile(n>0) \n\t{ \n\t\t//Extracting the last digit of the number \n\t\tint rem = n % 10;  \n\t\tsum = sum + rem; \n\t\t\n\t\t//Removing the last digit from the number \n\t\tn = n / 10; \n\t} \n\treturn sum; \n} \n\n//Test Program\nint main() \n{ \n\tint num = 473; \n\tprintf(\"Sum of Digits of %d = %d\", num, SumOfDigits(num)); \n\n\treturn 0; \n}", "task_type": "coding"}
{"input": "Implement a binary search algorithm in Python for searching for a specific element in a given list of numbers.", "output": "def binary_search(lst, target):\n\n    \"\"\"\n    Implements a binary search algorithm \n    in Python for searching for a specific \n    element in the given list of numbers.\n    \"\"\"\n    low = 0\n    high = len(lst)-1\n\n    while low <= high:\n        mid = (low + high)//2\n        if lst[mid] == target:\n            return mid\n\n        elif lst[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1", "task_type": "coding"}
{"input": "How do you use the built-in function filter() in  Python?", "output": "The filter() function in Python takes a function and an iterable as input arguments. The filter() function filters out elements from the given iterable (for example, a list) that don't satisfy the given condition determined by the function. It returns an iterator containing the filtered elements. Syntax: filter(function, iterable) Example: my_list = [1,4,5,6,7] filtered_list = filter(lambda x: x % 2 == 0, my_list) print(list(filtered_list)) Output: [4, 6]", "task_type": "coding"}
{"input": "What is a state machine in software engineering?", "output": "A state machine in software engineering is a model of computation used to design programs and algorithms that have an input, a process, and an output. A state machine is built from a set of states, any of which can be the current state at any given time, and it transitions from one state to another in reaction to events or inputs. The process of the state machine is the set of predefined operations associated with each state and the set of transitions that dictate how the state machine moves from one state to another.", "task_type": "coding"}
{"input": "Change the following code to reduce its running time", "output": "def find_target(nums, target): \n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    nums = [2, 3, 5, 7]\n    target = 5\n    index = -1\n    for i in range(0, len(nums)):\n        if nums[i] == target:\n            index = i\n            break\n    if (index == -1):\n        print(\"Target not found!\")\n    else:\n        print(\"Target found at index:\", index)", "task_type": "coding"}
{"input": "Compare and contrast the two most popular NoSQL databases - MongoDB and Redis.", "output": "MongoDB and Redis are two of the most popular NoSQL databases. MongoDB is a document-oriented database, while Redis is an open-source in-memory data structure store. MongoDB is known for its scalability and flexible query language whereas Redis is best-suited for caching and real-time applications. MongoDB is best for storing structured, semi-structured and unstructured data, and Redis is used primarily for rapid data manipulation and retrieval of data stored in the key-value store. MongoDB offers an ACID (Atomicity, Consistency, Isolation, and Durability) compliant system with multi-document transactions, while Redis primarily has single-document atomic operations. MongoDB is best for structured or semi-structured data, while Redis is best for caching and real-time applications that require fast data access.", "task_type": "coding"}
{"input": "What is the time complexity of linear search in an unsorted array?", "output": "The time complexity of linear search in an unsorted array is O(n), where n is the number of elements in the array. This is because in linear search, the algorithm has to inspect each element in the array in order sequentially until it finds the desired element. As the size of the array increases, the time taken to search increases linearly.", "task_type": "coding"}
{"input": "Develop a web page that displays the current temperature in various cities.", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Weather Tracker</title>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n</head>\n<body>\n    <h1>Current Weather</h1>\n    <div class=\"data-table\"></div>\n\n    <script>\n        $(function() {\n            $.get('https://weather-tracker-server.herokuapp.com', function(data) {\n                var cityNames = [];\n                var temperatures = [];\n                $(data).each(function(index, item) {\n                    cityNames.push(item.name);\n                    temperatures.push(item.temperature);\n                });\n                $('.data-table').append(`<span>City</span><span>Temperature</span>`);\n                for (var i = 0; i < data.length; i++) {\n                    $('.data-table').append(`<span>${cityNames[i]}</span><span>${temperatures[i]}</span>`);\n                }\n            });\n        });\n    </script>\n</body>\n</html>", "task_type": "coding"}
{"input": "Create a program to check if a given string is a palindrome", "output": "\"\"\"\nCreate a program to check if a given string is a palindrome\n\"\"\"\n\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n-i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_palindrome(\"racecar\"))", "task_type": "coding"}
{"input": "Write an HTML form to collect a user's name, email address, and password.", "output": "<form>\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\" />\n  <label>Email:</label>\n  <input type=\"text\" name=\"email\" />\n  <label>Password:</label>\n  <input type=\"password\" name=\"passwd\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "task_type": "coding"}
{"input": "What is static typing in programming?", "output": "Static typing is a type of type system where the type of each variable is determined at compile-time instead of at runtime. This means that the variables and their types are checked at compile-time of the program and any type mismatch will result in an error. This leads to better performance as it prevents runtime errors due to type mismatch and also makes the code more readable.", "task_type": "coding"}
{"input": "Construct an array which contains the count of each character present in the given string.", "output": "def characterCount(str): \n    # create a dictionary and store count \n    # of every character \n    freq = {} \n  \n    for i in str: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n          \n    # return the dictionary    \n    return freq \n  \n# Driver code \nstr = \"Hello world\"\nprint(characterCount(str))", "task_type": "coding"}
{"input": "Given a linked list, remove all elements from it which have greater value than a given number X.", "output": "class node:\n    def __init__(self, data):\n        self. data = data\n        self. next = None\n\ndef removeGreater(head, value):\n    while head and head.data > value:\n        head = head.next\n    p = head\n    while p and p.next:\n        if p.next.data > value:\n            p.next = p.next.next\n        else:\n            p = p.next\n    return head\n\nif __name__ == '__main__':\n    head = node(7)\n    head.next = node(14)\n    head.next.next = node(28)\n    head.next.next.next = node(21)\n    head.next.next.next.next = node(32)\n\n    result = removeGreater(head, 21)\n    while result:\n        print(result.data, end=\" \")\n        result= result.next", "task_type": "coding"}
{"input": "Create a C++ code that will find the second maximum element in an array of numbers.", "output": "#include <bits/stdc++.h>\nusing namespace std;\n \n// function to find the second maximum element in an array\nint findSecondMax(int arr[], int n) \n{ \n    // Initialize maximum and second maximum\n    int max = INT_MIN; \n    int smax = INT_MIN; \n  \n    for (int i = 0; i < n; i++) \n    { \n        // If current element is greater than max \n        if (arr[i] > max) \n        { \n            // update second maximum \n            smax = max; \n  \n            // update maximum element \n            max = arr[i]; \n        } \n  \n        // If arr[i] is in between max and second maximum \n        else if (arr[i] > smax && arr[i] != max) \n            smax = arr[i]; \n    } \n    // return second maximum \n    return smax; \n} \n  \n// Driver Program \nint main() \n{ \n    int arr[] = { 2, 1, 3, 4, 5 }; \n    int n = 5; \n    cout << findSecondMax(arr, n) << endl; \n    return 0; \n} \n\nOutput:\n4", "task_type": "coding"}
{"input": "Modify the following code so that it takes a user input for the numbers for which to calculate the sum.", "output": "def sum_numbers():\n    number_list = []\n    input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    while input_numbers != \"q\":\n        number_list.append(int(input_numbers))\n        input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    return sum(number_list)", "task_type": "coding"}
{"input": "Create a Java program that reads an array of integers from the console and prints out the largest number.", "output": "import java.util.Scanner;\n\npublic class LargestNum {\n    public static void main(String[] args){\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Input the size of array: \");\n        int n = scanner.nextInt();\n\n        int[] arr = new int[n];\n        System.out.println(\"Input \"+n+\" elements in the array:\");\n        for(int i = 0; i < n; i++){\n            arr[i] = scanner.nextInt();\n        }\n\n        int max = arr[0];\n\n        for (int anArr : arr) {\n            if (anArr > max)\n                max = anArr;\n        }\n\n        System.out.println(\"Largest number in the array is \" + max);\n    }\n}", "task_type": "coding"}
{"input": "Train a Random Forest classifier in Python on the Iris dataset.", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Import Iris dataset\niris_data = pd.read_csv(\"iris.csv\")\n\n# Split dataset into training and testing\nX = iris_data.drop(\"species\", axis=1)\ny = iris_data['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Train a Random Forest classifier\nclf = RandomForestClassifier() \nclf.fit(X_train, y_train)\n\n# Make predictions\npreds = clf.predict(X_test)", "task_type": "coding"}
{"input": "Modify the following C program so that it can print the result in reverse order.", "output": "#include <stdio.h>\n \nint main()\n{\n   int arr[] = {1, 2, 3, 4, 5};\n   int size, i;\n \n   size = sizeof(arr) / sizeof(arr[0]);\n \n   for (i = size - 1; i >= 0; i--) {\n      printf(\"%d \", arr[i]);\n   }\n   return 0;\n}", "task_type": "coding"}
{"input": "Write an HTML program to capture the entered text in an input box", "output": "<html> \n  <head>\n    <title>Text Capturing</title>\n  </head>\n \n  <script>\n    function captureText() {\n      var text = document.getElementById(\"inputBox\").value; \n      alert(\"Entered text: \" + text);\n    }\n  </script>\n\n  <body>\n    <h1> Text Capturing </h1>\n    <input type=\"text\" id=\"inputBox\" />\n    <button onclick=\"captureText()\">Capture Text</button> \n  </body>\n</html>", "task_type": "coding"}
{"input": "Generate a Java code to display the multiplication table from 1 to 10.", "output": "public static void main(String args[])\n{\n    for (int i=1; i<=10; i++)\n    {\n        for (int j=1; j<=10; j++)             \n            System.out.print(i+\"*\"+j+\"=\"+(i*j)+\"  \");\n \n        System.out.println();\n    }\n}", "task_type": "coding"}
{"input": "Create a SQL database schema for storing customers and their payments.", "output": "CREATE TABLE customer (\nID INTEGER PRIMARY KEY,\nname VARCHAR(255) NOT NULL,\nemail VARCHAR(255) NOT NULL,\nphone_number VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE payment (\npayment_id INTEGER PRIMARY KEY,\ncustomer_id INTEGER NOT NULL,\namount INTEGER NOT NULL,\ndate DATETIME NOT NULL,\nFOREIGN KEY (customer_id) REFERENCES customer(ID)\n);", "task_type": "coding"}
{"input": "Program a function in JavaScript to remove adjacent duplicates from the given array.", "output": "function removeDuplicates(arr) {\n  let output = [];\n  arr.forEach(function(element, index) {\n    if (arr[index] != arr[index + 1]) {\n      output.push(element);\n    }\n  }); \n  return output;\n}\n\nconsole.log(removeDuplicates([2, 3, 3, 3, 6, 9, 9])); \n// Output: [2, 3, 6, 9]", "task_type": "coding"}
{"input": "Perform a web scraping to retrieve the prices of a specific product.", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nwebsite = requests.get('https://www.amazon.com/Apple-iPhone-12-Unlocked-128GB/dp/B08HeG719F/ref=sr_1_1')\nsoup = BeautifulSoup(website.content, 'html.parser')\n\nprice_divs = []\nprice_divs = soup.find_all('span', {'class': 'a-price-whole'})\n\nfor price_div in price_divs:\n    print(price_div.text)", "task_type": "coding"}
{"input": "Write a Python function to generate the powerset of a given list.", "output": "def generate_powerset(list):\n powerset = []\n for i in range(2**len(list)):\n  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]\n  powerset.append(subset)\n return powerset\n\ndef is_bit_set(num, bit):\n return (num & (1 << bit)) != 0", "task_type": "coding"}
{"input": "Create a basic HTML structure with a table to display a list of cities and their population.", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Cities and Population</title>\n</head>\n<body>\n <h1>Cities and Population</h1>\n <table>\n  <thead>\n    <tr>\n      <th>City</th>\n      <th>Population</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Insert City Name</td>\n      <td>Insert Population</td>\n    </tr>\n  </tbody>\n </table>\n</body>\n</html>", "task_type": "coding"}
{"input": "Design an algorithm to calculate the maximum profit for buying/selling 1 share of a company's stock.", "output": "Let us consider buying and selling 1 share of the stock \n1. Initialize the local maximum profit = 0 and the minimum element = 9 \n2. Run a loop from i=1 to n and update the local maximum profit and the minimum element as you iterate \n3. For each iteration i, check the profit obtained by selling the share at price[i] and subtract the profit obtained by buying the share at min element \n4. If the obtained profit is more than the local maximum profit, then update the local maximum profit \n5. Return the local maximum profit", "task_type": "coding"}
{"input": "Create a Java program that removes duplicate elements from an array.", "output": "import java.util.HashSet;\n\npublic class RemoveDuplicates {\n public static int[] removeDuplicates(int arr[]) \n    { \n        // HashSet for removing duplicates\n        HashSet<Integer> set = new HashSet<>();\n  \n        // adding elements to HashSet \n        for(int i=0; i<arr.length; i++) \n            set.add(arr[i]); \n  \n        // Converting HashSet to array\n        int i=0;\n        int new_arr[] = new int[set.size()];\n        for (Integer val : set)  \n            new_arr[i++] = val; \n        return new_arr; \n    } \n}", "task_type": "coding"}
{"input": "Create a function to reversed an array in place.", "output": "def reverse_array(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start += 1\n        end -= 1\n    return arr\n\nprint(reverse_array(arr))", "task_type": "coding"}
{"input": "How would you generate a Fibonacci sequence up to n in a list?", "output": "def generate_fibonacci_sequence(n):\n    result = [1]\n \n    current_number = 1\n    next_number = 1\n    while current_number <= n:\n        result.append(current_number)\n        current_number, next_number = next_number, current_number + next_number\n \n    return result\n\nif __name__ == '__main__':\n print(generate_fibonacci_sequence(10))", "task_type": "coding"}
{"input": "Create a function that takes two String as parameters and return true if one String is substring of the other", "output": "public static boolean isSubstring(String s1, String s2){\n        int len1 = s1.length();\n        int len2 = s2.length();\n        if(len1 < len2){\n            if(s2.contains(s1)){\n                return true;\n            }\n        }else{\n            if(s1.contains(s2)){\n                return true;\n            }\n        }\n        return false;\n    }", "task_type": "coding"}
{"input": "Design a program to compute the median of 3 integers.", "output": "def median(a,b,c):\n    if a >= b:\n        if c >= a:\n            return a\n        elif b >= c:\n            return b\n        else:\n            return c\n    else:\n        if c >= b:\n            return b\n        elif a >= c:\n            return a\n        else:\n            return c", "task_type": "coding"}
{"input": "Parse the following HTML code to get all the hyperlinks in the page.", "output": "import re\n\nhtml_code = '''\n<a href=\"https://example.com/about\">About</a>\n<a href=\"https://example.com/products\">Products</a>\n'''\n\nlinks = re.findall(r'href=\"(.*?)\"', html_code)\nprint(links)\n# Output: ['https://example.com/about', 'https://example.com/products']", "task_type": "coding"}
{"input": "Write a Java program to find all pairs of integers from an array whose sum equals a given number.", "output": "public static List<int[]> findSumPairs(int[] arr, int target) {\n    List<int[]> pairs = new ArrayList<>();\n \n    Map<Integer, Integer> numFreqMap = new HashMap<>();\n    for (int value : arr) {\n        numFreqMap.put(value, numFreqMap.getOrDefault(value, 0) + 1);\n    }\n    \n    for (int value : arr) {\n        int targetSubValue = target - value;\n \n        if (numFreqMap.containsKey(targetSubValue)) {\n            int targetSubValueFreq = numFreqMap.get(targetSubValue);\n \n            if (targetSubValue == value) {\n                if (targetSubValueFreq >= 2) {\n                    int[] pair = {value, targetSubValue};\n                    pairs.add(pair);\n                }\n            } else {\n                int[] pair = {value, targetSubValue};\n                pairs.add(pair);\n            }\n \n            numFreqMap.put(targetSubValue, 0);\n        }\n    }\n \n    return pairs;\n}", "task_type": "coding"}
{"input": "Use the given JSON data to create a function that returns the number of males in the dataset.", "output": "def get_num_males(data):\n    # create a counter variable\n    num_males = 0\n    # loop through the data\n    for person in data:\n        if person['gender'] == 'male':\n            num_males += 1\n    # return the number of males\n    return num_males", "task_type": "coding"}
{"input": "Write a function to get data from a NoSQL database.", "output": "function getData(dbName, collectionName, query, fields) {\n  return db.get(dbName)\n    .collection(collectionName)\n    .find(query, fields)\n    .toArray();\n}\n\n// Usage\nlet searchQuery = { username: 'admin' };\nlet fieldsToReturn = { firstName: 1, lastName: 1 }; \nlet results = getData(\"MyDatabase\", \"userData\", searchQuery, fieldsToReturn);", "task_type": "coding"}
{"input": "Create a Python class to represent a 3 x 3 matrix with variable values.", "output": "class Matrix:\n    def __init__(self, a00=0, a01=0, a02=0, a10=0, a11=0, a12=0, a20=0, a21=0, a22=0):\n        self.matrix = [[a00, a01, a02],\n                        [a10, a11, a12],\n                        [a20, a21, a22]]\n    \n    def __str__(self):\n        return str(self.matrix)", "task_type": "coding"}
{"input": "Create an HTML page with a table containing the name and age of 5 people.", "output": "<html>\n  <head>\n    <title>People Age Table</title>\n  </head>\n \n  <body>\n    <table>\n      <tr>\n        <th>Name</th>\n        <th>Age</th>\n      </tr>\n      \n      <tr>\n        <td>John</td>\n        <td>25</td>\n      </tr>\n      <tr>\n        <td>Lisa</td>\n        <td>22</td>\n      </tr>\n      <tr>\n        <td>Emily</td>\n        <td>19</td>\n      </tr>\n      <tr>\n        <td>George</td>\n        <td>21</td>\n      </tr>\n      <tr>\n        <td>Samuel</td>\n        <td>20</td>\n      </tr>\n    </table>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Create a PHP program to count the number of occurrences of a given word in a string.", "output": "<?php\n\nfunction count_occurrences($string, $word) {\n    $words = explode(\" \", $string);\n    $count = 0;\n    foreach ($words as $w)\n        if (strtolower($w) == strtolower($word))\n            $count++;\n    return $count;\n}\n\n$string = \"Test string\";\n$word = \"string\";\n\necho count_occurrences($string, $word);\n\n?>\n// Output: 1", "task_type": "coding"}
{"input": "Write a function in Java to find the length of the longest common subsequence of two strings.", "output": "public static int longestCommonSubsequence(String s1, String s2) {\n    int[][] dp = new int[s1.length() + 1][s2.length() + 1];\n\n    for (int i = 0; i <= s1.length(); i++) {\n        for (int j = 0; j <= s2.length(); j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 0;\n            } else if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            } else {\n                dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n    }\n    return dp[s1.length()][s2.length()];\n}", "task_type": "coding"}
{"input": "Implement a linked list using C language.", "output": "// Linked List Structure \nstruct Node \n{ \n    int data; \n    struct Node* link; \n}; \n  \n// Utility function to create a new node \nNode* newNode(int data) \n{ \n    Node* node = (Node*)malloc(sizeof(Node)); \n  \n    node->data = data; \n    node->link = NULL; \n  \n    return node; \n}", "task_type": "coding"}
{"input": "Write a Python program to analyze the sentiment of a given text.", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsia = SentimentIntensityAnalyzer()\nsentiment = sia.polarity_scores(input_text)\nprint(sentiment)\n# {'neg': 0.404, 'neu': 0.596, 'pos': 0.0, 'compound': -0.7424}", "task_type": "coding"}
{"input": "Generate a HTML page with 3 columns using Bootstrap.", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\"> \n    <title>Bootstrap Example</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <!-- Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <!-- Your content goes here -->\n      </div>\n      <div class=\"col-md-4\">\n        <!-- Your content goes here -->\n      </div>\n      <div class=\"col-md-4\">\n        <!-- Your content goes here -->\n      </div>  \n    </div>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Construct a class in Java that creates methods for finding the area and circumference of a circle.", "output": "public class Circle {\n  double radius;\n \n  public Circle(double radius) {\n    this.radius = radius;  \n  }\n \n  public double getArea(){\n    return Math.PI * Math.pow(radius, 2);\n  }\n \n  public double getCircumference(){\n    return 2 * Math.PI * radius;\n  }\n}", "task_type": "coding"}
{"input": "Write a function to create a Nim game board with size n.", "output": "def create_game_board(n):\n    # Create an empty list\n    game_board = []\n    # Loop based on number of rows\n    for i in range(n):\n        # Create an empty row\n        row = []\n        # Loop based on number of columns\n        for j in range(n):\n            # Add value 0 at each position\n            row.append(0)\n        # Add the row in empty list\n        game_board.append(row)\n    # Return the game board\n    return game_board", "task_type": "coding"}
{"input": "Suggest an algorithm for sorting a list of integers.", "output": "// Bubble Sort Algorithm\n// Set a flag to indicate whether there are any swaps during the current iteration\n// Initialize the flag to false and iterate until the flag turns true\n// During the iteration, compare each pair of adjacent elements and swap them if necessary\n// After each iteration, set the flag to false\n// If it is still false after iteration, break the loop since the list must be sorted\n\nvar list = [7, 4, 5, 10, 3];\nvar flag = false;\nwhile (flag === false) {\n    flag = true;\n    for (var i=0; i<list.length -1; i++) {\n        if (list[i] > list[i+1]) {\n            var temp = list[i];\n            list[i] = list[i+1];\n            list[i+1] = temp;\n            flag = false;\n        }\n    }\n}\nconsole.log(list); // prints [3, 4, 5, 7, 10]", "task_type": "coding"}
{"input": "Generate an HTML table with 3 columns for Name, Email and Phone Number.", "output": "<table>\n    <tr>\n        <th>Name</th>\n        <th>Email</th>\n        <th>Phone Number</th>\n    </tr>\n    <tr>\n        <td>John Doe</td>\n        <td>john@example.com</td>\n        <td>123-456-7890</td>\n    </tr>\n</table>", "task_type": "coding"}
{"input": "What would be the JavaScript code to remove duplicate values from an array?", "output": "const inputArray = [1, 2, 3, 4, 4, 2, 5];\n\nconst outputArray = inputArray.filter((arrayVal, indexVal) => {\n  return inputArray.indexOf(arrayVal) === indexVal;\n});\n\nconsole.log(outputArray); // [1, 2, 3, 4, 5]", "task_type": "coding"}
{"input": "Create an array of all the prime numbers up to 50.", "output": "def is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \nprime_array = []\nfor i in range(2, 51):\n    if is_prime(i):\n        prime_array.append(i)", "task_type": "coding"}
{"input": "Develop a Python script to count the number of characters, words, and sentences present in a given string.", "output": "string = 'This is a sample sentence to test the program.'\ncharacter_count = len(string)\nword_count = len(string.split())\nsentence_count = len(string.split('.'))\n\nprint('Number of characters: ', character_count)\nprint('Number of words: ', word_count)\nprint('Number of sentences: ', sentence_count)\n\nOutput:\nNumber of characters: 45\nNumber of words: 8\nNumber of sentences: 1", "task_type": "coding"}
{"input": "Explain what is a stack data structure in programming.", "output": "A stack is a linear data structure that works on the principle of last-in, first-out (LIFO). It is a collection of objects or elements which can be added or removed from the top of the stack. It is commonly used as a way to store temporary data, and allows for fast retrieval of the data, as it is only necessary to access the item at the top of the stack. In computer science, the stack is used for a wide range of applications, including memory and runtime storage management, expression evaluation, and more.", "task_type": "coding"}
{"input": "Create an HTML page to list the students in a class list in a table.", "output": "<html>\n  <head>\n    <title>Class List</title>\n  </head>\n  <body>\n    <h2>Class List</h2>\n    <table>\n      <tr>\n        <th>Name</th><th>Age</th><th>Gender</th>\n      </tr>\n      <tr>\n        <td>John Doe</td><td>21</td><td>Male</td>\n      </tr>\n      <tr>\n        <td>Catrine Smith</td><td>18</td><td>Female</td>\n      </tr>\n      <tr>\n        <td>John Wilkins</td><td>19</td><td>Male</td>\n      </tr>\n    </table>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Write a code to create an array of 10 random numbers between 0 and 1.", "output": "import java.util.Random; \n\npublic class RandomArray {\n    public static void main(String[] args) {\n        Random rand = new Random(); \n  \n        float array[] = new float[10];  \n  \n        for(int i = 0; i < 10; i++) { \n            array[i] = rand.nextFloat(); \n        }\n  \n        System.out.println(\"Array of 10 random numbers between 0 and 1: \");\n        for (int i = 0; i < 10; i++) { \n            System.out.println(array[i]); \n        } \n    }\n}", "task_type": "coding"}
{"input": "Create an HTML form that takes 5 inputs: name, age, gender, email, and phone.", "output": "<form>\n  <label>Name:</label><input type=\"text\" name=\"name\" required /><br/>\n  <label>Age:</label><input type=\"text\" name=\"age\" required /><br/>\n  <label>Gender:</label><input type=\"text\" name=\"gender\" required /><br/>\n  <label>Email:</label><input type=\"text\" name=\"email\" required /><br/>\n  <label>Phone:</label><input type=\"text\" name=\"phone\" required /><br/>\n  <input type=\"submit\" />\n</form>", "task_type": "coding"}
{"input": "Create a HTML table to present student information.", "output": "<table>\n <tr>\n  <td>Name</td><td>Age</td><td>Gender</td><td>Address</td>\n </tr>\n <tr>\n  <td>John Doe</td><td>24</td><td>Male</td><td>123 Main Street</td>\n </tr>\n</table>", "task_type": "coding"}
{"input": "Write a code to print out a multiplication table of a number in Python.", "output": "def print_multiplication_table(num): \n    for i in range(1,11):  \n       print(num,'x',i,'=',num*i)\n\nprint_multiplication_table(5) \n# OUTPUT: 5 x 1 = 5\n        5 x 2 = 10\n        5 x 3 = 15\n        5 x 4 = 20\n        5 x 5 = 25\n        5 x 6 = 30\n        5 x 7 = 35\n        5 x 8 = 40\n        5 x 9 = 45\n        5 x 10 = 50", "task_type": "coding"}
{"input": "Create a JavaScript code to validate the syntax of a given string.", "output": "// Function to validate a given string \nfunction validate(str) { \n    \n    // Regex pattern to check if the string has any special characters \n    let strRegex = /^[A-Za-z]+$/; \n  \n    // Check if the string is valid \n    if(strRegex.test(str)) { \n        return true; \n    } \n    else { \n        return false; \n    } \n} \n  \n// String to be validated \nlet str = \"Hello world\"; \n  \n// Function call \nlet result = validate(str); \n  \n// Print the result \nconsole.log(result);", "task_type": "coding"}
{"input": "Build a function to convert an adjacency matrix into an adjacency list.", "output": "def adjacency_matrix_to_list(A):\n    \"\"\"\n    Convert an adjacency matrix to an adjacency list\n    \n    Parameters\n    ----------\n    A: 2D list representing an adjacency matrix\n    \n    Returns\n    -------\n    adj_list: Adjacency list\n    \"\"\"\n    n = len(A)\n    adj_list = [[] for i in range(n)]\n        \n    for i in range(n):\n        for j in range(n):\n            if A[i][j] == 1:\n                adj_list[i].append(j)\n                \n    return adj_list", "task_type": "coding"}
{"input": "How can you use object serialization in programming?", "output": "Object serialization is a process in programming to convert an object into a format that can be easily stored and accessed. It's commonly used to transfer objects between programs, preserve data across time, or save objects to a database. Object serialization can be useful when you need to store information, pass the object to another program, or transmit it over a network.", "task_type": "coding"}
{"input": "Generate a unique ID for a given string.", "output": "# generate a unqiue ID for the given string\nimport uuid \n  \n# string \nstring = \"Hello World\"\n  \n# printing the original string \nprint(\"The original string is : \" + string) \n  \n# generating the unique ID \nstring_id = uuid.uuid4() \n  \n# printing the unique ID \nprint(\"The unique id for given string is : \", string_id)", "task_type": "coding"}
{"input": "Write a function in Python to merge two sorted arrays.", "output": "def merge_sorted_arrays(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            arr3[k] = arr1[i]\n            i += 1\n        else:\n            arr3[k] = arr2[j]\n            j += 1\n        k += 1\n\n    # Copy remaining elements \n    while i < n1:\n        arr3[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < n2:\n        arr3[k] = arr2[j]\n        j += 1\n        k += 1\n\n    return arr3", "task_type": "coding"}
{"input": "Write a code to simulate Conway’s Game of Life.", "output": "\"\"\"\nWrite a code to simulate Conway’s Game of Life\n\"\"\"\n\nimport numpy as np\n\ndef conways_game_of_life(state, iterations):\n    # make a copy of the game state\n    game_state = np.copy(state)\n    # loop over the number of iterations\n    for _ in range(iterations):\n        # calculate the number of neighbors for each cell\n        num_neighbors = (game_state[0:-2,0:-2] + game_state[0:-2,1:-1] + game_state[0:-2,2:] +\n                        game_state[1:-1,0:-2] + game_state[1:-1,2:] +\n                        game_state[2:,0:-2] + game_state[2:,1:-1] + game_state[2:,2:]).astype(np.uint8)\n        # decide if a cell should live or die based on the number of neighbors\n        game_state[1:-1, 1:-1][(num_neighbors == 2) | (num_neighbors == 3)] = 1\n        game_state[1:-1, 1:-1][(num_neighbors != 2) & (num_neighbors != 3)] = 0\n    # return the modified current state\n    return game_state", "task_type": "coding"}
{"input": "Using a for loop, calculate the distance between one point to every other point in the given list.", "output": "# Using a for loop, calculate the distance between one point to every other point in the given list\nfrom math import sqrt\n\ndistances = []\nfor i in range(len(points)):\n    for j in range(len(points)):\n        if i != j:\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            distances.append(distance)\n\nprint(distances)  # Output: [2.8284271247461903, 4.242640687119285, 2.8284271247461903]", "task_type": "coding"}
{"input": "Generate a dictionary with the key-value pairs {1:1, 2:4, 3:9, 4:16}", "output": "def generate_dict():\n    \"\"\"Generate a dictionary with the key-value pairs {1:1, 2:4, 3:9, 4:16}\"\"\"\n    my_dict = {}\n    for i in range(1, 5):\n        my_dict[i] = i**2\n    return my_dict\n\ngenerate_dict() # Outputs {1:1, 2:4, 3:9, 4: 16}", "task_type": "coding"}
{"input": "Create a for loop which prints a Fibonacci series up to 10 numbers.", "output": "int first = 0;\nint second = 1;\nint next;\n\nfor (int i = 0; i < 10; i++) {\n  if(i <= 1){\n    next = i;\n  }\n  else {\n    next = first + second;\n    first = second;\n    second = next;\n  }\n  cout << next << \" \";\n}", "task_type": "coding"}
{"input": "Given an array of integers, write a method to return the indices of the two numbers such that they add up to a specific target.", "output": "def twoSum(nums, target): \n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]+nums[j] == target:\n                result.append(i)\n                result.append(j)\n    return result\n\nindices = twoSum(nums, 9)\nprint(indices)\n// Output: [0, 2]", "task_type": "coding"}
{"input": "Create a program to list the 3 most frequent words in a string.", "output": "def top_three_words(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] +=1\n        else:\n            word_dict[word] = 1\n    sorted_dict = sorted(word_dict.items(), key = lambda x: x[1], reverse = True)\n    top_three = [word[0] for word in sorted_dict[:3]]\n    return top_three", "task_type": "coding"}
{"input": "Write a script to check if a given number is a palindrome or not.", "output": "# Function to check whether the inputNumber is palindrome or not\ndef is_palindrome(inputNumber):\n\n   # negative numbers are not palindrome\n   if inputNumber < 0:\n       return False\n\n   # find the number of digits in the inputNumber\n   div = 1\n   while (inputNumber / div >= 10):\n       div *= 10\n\n   # check if the most significant and least significant digits match\n   while (inputNumber != 0):\n       # compare first and last digits\n       firstdigit = inputNumber // div\n       lastdigit =  inputNumber % 10\n       if firstdigit != lastdigit:\n           return False\n\n       # remove the most and least significant digit of inputNumber\n       inputNumber = (inputNumber % div) // 10\n\n       # reduce div by a factor of 2,  since 2 digits\n       # were removed\n       div = div // 100\n   return True\n\n# Driver code to test above\ninputNumber = 121\nif is_palindrome(inputNumber) :\n  print(\"Yes\")\nelse:\n  print(\"No\")", "task_type": "coding"}
{"input": "Write a function to generate a random password based on the given parameters.", "output": "import random\nimport string\n\ndef generate_password(min_length, max_length, upper_case, lower_case, number):\n    password = []\n    for _ in range(min_length, max_length + 1):\n        password.append(random.choice(string.ascii_lowercase if lower_case else '') +\n                        random.choice(string.ascii_uppercase if upper_case else '') +\n                        random.choice(string.digits if number else ''))\n    \n    random.shuffle(password)\n    return ''.join(password)\n\n# Driver code\nprint(generate_password(8, 8, True, True, True))", "task_type": "coding"}
{"input": "Create a program that reads user inputs and stores them in a list.", "output": "# Initializing empty list \nmyList = [] \n  \n# running infinity loop \nwhile True:     \n    # Input from user \n    ele = input(\"Enter any Element: \") \n      \n    # insert the element \n    myList.append(ele) \n  \n    # Output after adding the element \n    print(\"Updated list: \", str(myList))", "task_type": "coding"}
{"input": "Develop a code in R that returns the maximum from a list.", "output": "#function to return maximum\nmax <- function(x)\n{\n  max_num <- 0 #Initialize maximum number\n  for (i in x)\n  {\n    if (i > max_num)\n    {\n      max_num <- i\n    }\n  }\n  return (max_num)\n}\n \n#Test\nlist <- c(10, 30, 20, 5, 100)\nmaximum <- max(list)\nprint(maximum)", "task_type": "coding"}
{"input": "Given a string s, create a function to find the character that appears the most and return its index.", "output": "def most_freq_char(s):\n freq_dict = {}\n \n for char in s:\n if char in freq_dict:\n freq_dict[char] += 1\n else:\n freq_dict[char] = 1\n \n max_freq = 0\n max_char = \"\"\n \n for key in freq_dict:\n if max_freq < freq_dict[key]:\n max_freq = freq_dict[key]\n max_char = key\n \n return s.index(max_char)", "task_type": "coding"}
{"input": "Given an array of integers and a target value, write a Java program to determine whether this array contains two elements with the given target sum.", "output": "boolean containsTargetSum(int[] arr, int target){\n  for (int i = 0; i < arr.length; i++){\n    for (int j = 1; j < arr.length; j++){\n      if (arr[i] + arr[j] == target)\n        return true;\n    }\n  }\n  return false;\n}", "task_type": "coding"}
{"input": "Implement an algorithm in C++ for finding the largest number in an array.", "output": "#include <iostream> \n\nusing namespace std; \n  \nint largestNumber(int arr[], int n) \n{ \n    int max = arr[0]; \n  \n    for (int i = 0; i < n; i++) \n    { \n        if (arr[i] > max) \n            max = arr[i]; \n    } \n  \n    return max; \n} \n  \nint main() \n{ \n    int arr[] = {3, 7, 1, -2, 9, 5}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    cout <<\"The largest element is \"<< largestNumber(arr, n); \n  \n    return 0; \n}", "task_type": "coding"}
{"input": "Add a function to the following JavaScript code to search a value in a given array", "output": "const arr = [12, 5, 8, 130, 44];\n\nfunction searchValue(arr, value) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === value) {\n            return (i);\n        }\n    }\n    return -1;\n}", "task_type": "coding"}
{"input": "Write a function in Python to select all the elements from a list whose index is a multiple of 3.", "output": "def select_multiples_of_3(input_list):\n    result = []\n    for index, num in enumerate(input_list):\n        if index % 3 == 0:\n            result.append(num)\n    return result\n\n# test\ntest_list = [2, 5, 8, 12, 9, 82, 3]\nprint(select_multiples_of_3(test_list)) # [2, 12, 3]", "task_type": "coding"}
{"input": "Compute the sum of two give two-dimensional arrays.", "output": "def matrix_sum(a, b):\n    result = [[0 for d in range(len(a))] for d in range(len(a[0]))]\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] + b[i][j]\n    return result", "task_type": "coding"}
{"input": "Write a TensorFlow program to construct a basic neural network", "output": "import tensorflow as tf\n\n# Set up the layers for the model\nmodel = tf.keras.models.Sequential([\n    # Set up the first layer\n    tf.keras.layers.Dense(64, input_shape = (784, ), activation = 'relu'),\n    # Set up the second layer\n    tf.keras.layers.Dense(64, activation = 'relu'),\n    # Set up the output layer\n    tf.keras.layers.Dense(10, activation = 'softmax')\n])\n\n# Compile the model\nmodel.compile(\n  optimizer = 'adam',\n  loss = 'sparse_categorical_crossentropy',\n  metrics = ['accuracy']\n)", "task_type": "coding"}
{"input": "What is the difference between a Node.js callback and a promise?", "output": "A callback is a function that is passed as an argument to another function and is executed when the callback function completes its task. A promise is an object that can be returned synchronously from an asynchronous function. It acts as a placeholder for the eventual result of the asynchronous function and allows you to register callbacks for either a successful or a failed completion of the asynchronous task. The main differences between callbacks and promises are that callbacks don't handle exceptions, don't have the ability to be chained together, and must be explicitly invoked. Promises have a wider range of features and are less prone to error.", "task_type": "coding"}
{"input": "Use TensorFlow to build a deep learning model for predicting the price of a given stock.", "output": "import tensorflow as tf\n\n# define the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Input(shape=(1,), name=\"Input_Layer\", dtype=tf.float32),\n tf.keras.layers.Dense(32, activation='relu', name=\"Hidden_Layer_1\"),\n tf.keras.layers.Dense(32, activation='relu', name=\"Hidden_Layer_2\"),\n tf.keras.layers.Dense(1, activation='sigmoid', name=\"Output_Layer\")\n])\n\n# compile the model\nmodel.compile(\noptimizer=tf.keras.optimizers.Adam(),\nloss=tf.keras.losses.MeanSquaredError(),\nmetrics=[tf.keras.metrics.MeanAbsoluteError()],\n)\n\n# fit the model\nmodel.fit(x_train, y_train, batch_size=32, epochs=10, validation_data=(x_val, y_val))", "task_type": "coding"}
{"input": "Write a C++ function to calculate the maximum subarray sum of a given array.", "output": "int maxSumSubArray(vector<int> arr) \n{ \n    int max_so_far = arr[0]; \n    int curr_max = arr[0]; \n  \n    for (int i = 1; i < arr.size(); i++) \n    { \n        curr_max = max(arr[i], curr_max+arr[i]); \n        max_so_far = max(max_so_far, curr_max); \n    } \n    return max_so_far; \n}", "task_type": "coding"}
{"input": "Determine the frequency of each word in a sentence using a hashmap in JavaScript.", "output": "let string = \"This is a test sentence\";\nlet wordsArray = string.split(\" \"); \nlet frequencyMap = {};\nwordsArray.forEach(word => {\n    frequencyMap[word] = frequencyMap[word] ? frequencyMap[word] + 1 : 1;\n});\nconsole.log(frequencyMap);\n// Output: {This: 1, is: 1, a: 1, test: 1, sentence: 1}", "task_type": "coding"}
{"input": "Implement a python class named 'Temperature' that ranks a temperature value as cold, warm, or hot given a threshold value of 30.", "output": "class Temperature:\n  def __init__(self, value, threshold=30):\n    self.value = value\n    self.threshold = threshold\n\n  def rank(self):\n    if self.value < self.threshold:\n        return \"cold\"\n    elif self.value == self.threshold:\n        return \"warm\"\n    else:\n        return \"hot\"", "task_type": "coding"}
{"input": "What is dependency injection and how can it be implemented with JavaScript?", "output": "Dependency injection is a technique for separating the creation of an object’s dependencies from its own behavior. With JavaScript, it can be implemented with the use of ES2015 modules, which allow functions and objects from other modules to be imported. Then, instead of directly creating an object’s dependencies, they can be passed in upon creation. This makes the code more modular and easily testable.", "task_type": "coding"}
{"input": "Given a string, what is the best way to reverse the characters in it?", "output": "\"\"\"\nThe best way to reverse the characters in a string is by using the slicing option of a string object. \n\nThe string slicing reverses a string by slicing it from the end of the string and going to the beginning of the string. This can be done with the following syntax:\n\nstring_name[::-1]\n\nFor example, to reverse the string \"Hello World!\", the following can be used:\n\n\"Hello World!\"[::-1]\n\nwhich will output \"!dlroW olleH\". \n\"\"\"", "task_type": "coding"}
{"input": "Write a Perl program to generate Fibonacci series.", "output": "#include <stdio.h> \n  \nint main() \n{ \n    int n, first = 0, second = 1, next; \n  \n    printf(\"Enter the number of terms \\n\"); \n    scanf(\"%d\", &n); \n  \n    printf(\"First %d terms of Fibonacci series are :\\n\", n); \n  \n    int i; \n    for (i = 0; i < n; i++) { \n        if (i <= 1) \n            next = i; \n        else { \n            next = first + second; \n            first = second; \n            second = next; \n        } \n        printf(\"%d\\n\", next); \n    } \n  \n    return 0; \n}", "task_type": "coding"}
{"input": "Create a basic HTML page with a table that displays the index, name, and link of the top 10 global universities.", "output": "<html>\n  <head>\n    <title>Top 10 Global Universities</title>\n  </head>\n  <body>\n    <h1>Top 10 Global Universities</h1>\n    <table>\n      <tr>\n        <th>Index</th>\n        <th>Name</th>\n        <th>Link</th>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Massachusetts Institute of Technology</td>\n        <td>https://www.mit.edu/</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Stanford University</td>\n        <td>https://www.stanford.edu/</td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>Harvard University</td>\n        <td>https://www.harvard.edu/</td>\n      </tr>\n      <tr>\n        <td>4</td>\n        <td>California Institute of Technology</td>\n        <td>https://www.caltech.edu/</td>\n      </tr>\n      <tr>\n        <td>5</td>\n        <td>University of Oxford</td>\n        <td>https://www.ox.ac.uk/</td>\n      </tr>\n      <tr>\n        <td>6</td>\n        <td>University of Cambridge</td>\n        <td>https://www.cam.ac.uk/</td>\n      </tr>\n      <tr>\n        <td>7</td>\n        <td>Princeton University</td>\n        <td>https://www.princeton.edu/</td>\n      </tr>\n      <tr>\n        <td>8</td>\n        <td>Imperial College London</td>\n        <td>https://www.imperial.ac.uk/</td>\n      </tr>\n      <tr>\n        <td>9</td>\n        <td>University of Chicago</td>\n        <td>https://www.uchicago.edu/</td>\n      </tr>\n      <tr>\n        <td>10</td>\n        <td>ETH Zurich (Swiss Federal Institute of Technology)</td>\n        <td>https://www.ethz.ch/</td>\n      </tr>\n    </table>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Generate a web page that shows the company name, logo, and description.", "output": "\"\"\"\nGenerate a web page that shows the company name, logo, and description\n\"\"\"\n\n<html>\n  <head>\n    <title>Global Inc.</title>\n  </head>\n  <body>\n    <h1>Global Inc.</h1>\n    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Global_Inc_logo.svg/220px-Global_Inc_logo.svg.png\">\n    <p>Global Inc. is a leading technology provider of innovative solutions for customers around the globe.</p>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Create a program to find all the factors of a given number", "output": "\"\"\"\nCreate a program to find all the factors of a given number \n\"\"\"\n\ndef find_factors(num):\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\nif __name__ == '__main__':\n    print(find_factors(24))", "task_type": "coding"}
{"input": "Explain why it is important to have exception handling", "output": "Exception handling is important for a program as it allows the program to gracefully handle any unexpected or erroneous conditions. This helps keep the program running by providing meaningful feedback and prompts to the user. It also helps reduce the risk of having some part of the program crashing due to an unforeseen and avoidable event. Exception handling also encourages developers to write more robust and structured code as they are aware that their code might be faced with unpredictable conditions, and they will expect their code to be able to handle them gracefully.", "task_type": "coding"}
{"input": "Can you explain the bubble sort algorithm?", "output": "Bubble sort is a simple sorting algorithm which iterates through a list and compares adjacent elements, swapping them if they are in the incorrect order. This process is repeated until the list is sorted in its correct order. It is a slow algorithm as it requires multiple iterations of the list, but it is simple to understand and implement.", "task_type": "coding"}
{"input": "Write a Java program to iterate through a HashMap.", "output": "import java.util.HashMap; \nimport java.util.Map; \n  \npublic class Main { \n    public static void main (String[] args) \n    { \n        // Creating a HashMap \n        Map<String, Integer> hash_map = new HashMap<String, Integer>(); \n  \n        // Mapping int values to string keys \n        hash_map.put(\"Geeks\", 10); \n        hash_map.put(\"4\", 15); \n        hash_map.put(\"Geeks\", 20); \n        hash_map.put(\"Welcomes\", 25); \n        hash_map.put(\"You\", 30); \n  \n        // Displaying the HashMap \n        for (Map.Entry mapElement : hash_map.entrySet()) { \n            String key = (String)mapElement.getKey(); \n            int value = (int)mapElement.getValue(); \n            System.out.println(\"Key: \" + key + \"\\t Value: \" + value); \n        } \n    } \n}", "task_type": "coding"}
{"input": "Create an HTML page that renders two checkboxes and a button using JavaScript.", "output": "<html>\n    <head>\n        <script>\n            function renderCheckboxes() {\n                var checkboxes = document.createElement(\"input\");\n                checkboxes.type = \"checkbox\";\n                checkboxes.name = \"checkbox\";\n                checkboxes.value = \"1\";\n           \n                document.body.appendChild(checkboxes);\n                var checkboxes2 = document.createElement(\"input\");\n                checkboxes2.type = \"checkbox\";\n                checkboxes2.name = \"checkbox2\";\n                checkboxes2.value = \"2\";\n               \n                document.body.appendChild(checkboxes2);\n                var btn = document.createElement(\"BUTTON\");\n                btn.innerHTML = \"Submit\";\n                document.body.appendChild(btn);\n            }\n       </script>\n   </head>\n   <body onLoad=\"renderCheckboxes()\">\n   </body>\n</html>", "task_type": "coding"}
{"input": "Generate a code to perform a Merge Sort on an unsorted array of numbers.", "output": "def mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2 \n        L = arr[:mid] \n        R = arr[mid:] \n  \n        mergeSort(L) \n        mergeSort(R) \n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1", "task_type": "coding"}
{"input": "Edit the provided HTML structure to add an ordered list inside the body with 3 list items.", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n</head>\n<body>\n<ol>\n  <li>List Item 1</li>\n  <li>List Item 2</li>\n  <li>List Item 3</li>\n</ol>\n</body>\n</html>", "task_type": "coding"}
{"input": "Describe how to use the reduce() function in Python.", "output": "The reduce() function in Python is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along. This function is defined in the “functools” module. It applies the function in a manner that the resultant of the function of the current element and the next element is the new element, and so the process continues until the end of the list is reached. For example, to find the sum of all elements in a list:\n\nlist_nums = [2, 3, 4]\n\ndef list_sum(x, y):\n     return x + y\n\nlist_sum = reduce(list_sum, list_nums)\n\nprint(\"Output:\", list_sum)", "task_type": "coding"}
{"input": "Create a Flask application to redirect the user to a given URL when the user input is valid.", "output": "from flask import Flask, redirect, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        if request.form['userInput']:\n            url = 'https://www.example.com'\n            return redirect(url)\n    return '''\n    <form method=\"POST\">\n        <input type=\"text\" name=\"userInput\" placeholder=\"Type something..\" />\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n    '''\n\nif __name__ == \"__main__\":\n    app.run()", "task_type": "coding"}
{"input": "Suggest a data structure to store the student details for a school.", "output": "A dictionary could be used to store the student details. Each key could be the student's name, and each value could be a tuple containing the student's age, grade and classes.\n\nstudent_data = {\n    'John' : (15, 8, ['Math', 'English']),\n    'Mary' : (14, 7, ['Science', 'History'])\n}", "task_type": "coding"}
{"input": "Create a function that takes two parameters and returns an array with those two numbers in it.", "output": "def create_array(param1, param2):\n    \"\"\"A function that takes two parameters and returns an array with those two numbers in it.\"\"\"\n    arr = [param1, param2]\n    return arr\n\n# Let's test it\narr = create_array(1, 5)\nprint(arr) # Output: [1, 5]", "task_type": "coding"}
{"input": "Explain the algorithm used in linear search.", "output": "Linear search is an algorithm for finding a particular value in an array. It works by sequentially going through each item in the array, comparing the desired value with each item until it is either found or the end of the array is reached. If the item is found, it's index in the array is returned, otherwise, -1 is returned indicating the value wasn't found.", "task_type": "coding"}
{"input": "Generate a random string of 10 characters with two vowels, three consonants and five digits.", "output": "import random\n\ndef generate_string(vowels,consonants,digits):\n    s = ''\n    for _ in range(vowels):\n        s+=random.choice('aeiou')\n    for _ in range(consonants):\n        s+=random.choice('bcdfghjklmnpqrstvwxyz')\n    for _ in range(digits):\n        s+=str(random.randint(0,9))\n    return s\n\nprint(generate_string(2,3,5))", "task_type": "coding"}
{"input": "Create a PHP script to provide pagination on a website.", "output": "<?php \n \n// Get the total number of items \n$total_items = //sql query to get total items \n\n// Calculate the total number of pages \n$total_pages = ceil( $total_items / 10 ); \n\n// Determine the current page number \nif ( ! isset( $_GET['pagenum'] ) ) \n{ \n    $pagenum = 1; \n} \nelse \n{ \n    $pagenum = intval( $_GET['pagenum'] ) ; \n} \n\n// Create the pagination links \n$pagination_links  = paginate_links( array( \n    'base'     => add_query_arg( 'pagenum', '%#%' ), \n    'format'   => '', \n    'total'    => $total_pages, \n    'current'  => $pagenum, \n    'show_all' => false, \n    'end_size' => 1, \n    'mid_size' => 2, \n    'prev_next'  => True, \n    'prev_text'  => __('« Previous'), \n    'next_text'  => __('Next »'), \n    'type'      => 'plain', \n    ) \n);\n\n// Display the pagination links \nif ($pagination_links) \n{ \n    echo $pagination_links; \n}\n?>", "task_type": "coding"}
{"input": "Produce a Java program that converts miles to kilometers.", "output": "class MilesToKilometers {\n public static void main(String[] args) {\n \n // Convert miles to kilometers\n double miles = 10;\n double kilometers = miles * 1.60934;\n \n System.out.println(\"Miles: \" + miles);\n System.out.println(\"Kilometers: \" + kilometers);\n }\n}", "task_type": "coding"}
{"input": "Explain why a stack can be used to reverse a string?", "output": "A stack can be used to reverse a string because it follows the Last In First Out (LIFO) principle. This means that the last item to be added in the stack will be the first item to be removed. So when a string is pushed onto the stack, the characters will be stored in reverse order - the last character to be pushed will be the first character to be popped. By popping the characters one at a time, we can reverse the string.", "task_type": "coding"}
{"input": "Create a sorting algorithm to sort a given list of numbers from lowest to highest.", "output": "def sort_list(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr", "task_type": "coding"}
{"input": "Write a Java method that checks if a nested integer contains an even number.", "output": "public static boolean containsEven(List<Object> list) {  \n    for (Object obj : list) {          \n        if(obj instanceof Integer){\n            if((Integer)obj % 2 == 0){\n                return true;                   \n            }\n        } \n        else if(obj instanceof List<?>){\n            if (containsEven((List<?>)obj)){\n                return true;\n            }\n        }\n    } \n    return false;\n}", "task_type": "coding"}
{"input": "Build a quickly-sortable tree from a given array.", "output": "class TreeNode: \n    def __init__(self, key): \n        self.left = None\n        self.right = None\n        self.key = key \n\ndef quick_sort_tree(arr):\n    if not arr:\n        return None\n\n    pivot = arr[0]\n    pivot_node = TreeNode(pivot)\n    \n    left_subtree_elements  = [x for x in arr[1:] if x < pivot]\n    right_subtree_elements = [x for x in arr[1:] if x >= pivot]\n\n    pivot_node.left  = quick_sort_tree(left_subtree_elements)  \n    pivot_node.right = quick_sort_tree(right_subtree_elements) \n\n    return pivot_node", "task_type": "coding"}
{"input": "Write a Java code to read a string from the user and print it reversed.", "output": "import java.util.Scanner;\n\npublic class ReverseString \n{\n    public static void main(String[] args) \n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String str = in.nextLine();\n        in.close();\n\n        char[] arr = str.toCharArray();\n\n        for (int i = arr.length - 1; i >= 0; i--) \n        {\n            System.out.print(arr[i]);\n        }\n    }\n}", "task_type": "coding"}
{"input": "Build an HTML table based on the given data.", "output": "<table>\n    <tr><th>Name</th><th>Age</th><th>City</th></tr>\n    <tr><td>John</td><td>20</td><td>London</td></tr>\n    <tr><td>Bob</td><td>19</td><td>Paris</td></tr>\n    <tr><td>Alice</td><td>18</td><td>New York</td></tr>\n</table>", "task_type": "coding"}
{"input": "Create a code which prints a multiplication table of given size.", "output": "def print_multiplication_table(n): \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            print(i*j, end=\"\\t\") \n        print(\"\\n\") \n\nprint_multiplication_table(4)\n\nOutput:\n1\t2\t3\t4\t\n2\t4\t6\t8\t\n3\t6\t9\t12\t\n4\t8\t12\t16", "task_type": "coding"}
{"input": "Explain what a stack is and its uses.", "output": "A stack is an abstract data structure which follows the Last In First Out (LIFO) principle, meaning that the last element that was added to the stack is the first element that will be removed from the stack. Stacks are used to implement functions such as undo/redo, back/forward, and recursion. They are also used to efficiently evaluate arithmetic expressions, store temporary data, and to perform traversal and searching algorithms.", "task_type": "coding"}
{"input": "Using Java, write a program to check whether an integer is even or odd.", "output": "public class OddOrEven {\n\n public static void main(String[] args) {\n \n  int num = 7;\n \n  // if number is divisible by two then it is even\n  if (num % 2 == 0)\n  System.out.println(\"Even\");\n  else\n  System.out.println(\"Odd\");\n }\n}\n\n# Output:\nOdd", "task_type": "coding"}
{"input": "Implement a matrix multiplication program in Java.", "output": "public class MatrixMultiplication \n{\n    static int N = 5; \n  \n    static int[][] multiply(int[][] A,  \n                     int[][] B) \n    { \n        int[][] C = new int[N][N]; \n  \n        for (int i = 0; i < N; i++) \n        { \n            for (int j = 0; j < N; j++) \n            { \n                for (int k = 0; k < N; k++) \n                { \n                    C[i][j] += A[i][k] * B[k][j]; \n                } \n            } \n        } \n        return C; \n    } \n  \n    static void printMatrix \n                           (int[][] matrix) \n    { \n        for (int i = 0; i < N; i++) \n        { \n            for (int j = 0; j < N; j++) \n            { \n                System.out.print(matrix[i][j] + \" \"); \n            } \n            System.out.println(); \n        } \n    } \n  \n    public static void main (String[] args) \n    { \n        int[][] A = { { 1, 1, 1 },  \n                      { 2, 2, 2 },  \n                      { 3, 3, 3 },  \n                      { 4, 4, 4 },  \n                      { 5, 5, 5 } }; \n  \n        int[][] B = { { 1, 1, 1 },  \n                      { 2, 2, 2 },  \n                      { 3, 3, 3 },  \n                      { 4, 4, 4 },  \n                      { 5, 5, 5 } }; \n  \n        int[][] C = multiply(A, B); \n        printMatrix(C); \n    } \n}", "task_type": "coding"}
{"input": "Given a list of numbers, create a function that finds the two elements that sum to a given target number.", "output": "def two_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n\nresult = two_sum(nums, target)\nprint(result) \n\n# Output: [2, 3]", "task_type": "coding"}
{"input": "Design a database schema for a retail store that tracks customers, purchases, and items.", "output": "CREATE TABLE customers (\n\tid INTEGER NOT NULL AUTO_INCREMENT,\n\tname VARCHAR(255),\n\taddress VARCHAR(255),\n\temail VARCHAR(255),\n\tPRIMARY KEY (id)\n);\n \nCREATE TABLE items (\n\tid INTEGER NOT NULL AUTO_INCREMENT,\n\tname VARCHAR(255),\n\tprice DECIMAL(8,2),\n\tPRIMARY KEY (id)\n);\n \nCREATE TABLE purchases (\n\tid INTEGER NOT NULL AUTO_INCREMENT,\n\tcustomer_id INTEGER NOT NULL,\n\titem_id INTEGER NOT NULL,\n\tquantity INTEGER,\n\tPRIMARY KEY (id),\n\tFOREIGN KEY (customer_id) REFERENCES customers(id),\n\tFOREIGN KEY (item_id) REFERENCES items(id)\n);", "task_type": "coding"}
{"input": "Analyze the sentiment of this statement using Python.", "output": "import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"I am truly happy with the amazing results\"\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(sentence)\n\nprint(\"The sentiment of the statement is:\", sentiment['compound'])", "task_type": "coding"}
{"input": "Take the following list of temperatures in Celsius and convert them to Fahrenheit.", "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * (9/5)) + 32\n\nif __name__ == '__main__':\n    temperatures = [10, 15, 20, 25, 30]\n    fahrenheit_temperatures = []\n    for temp in temperatures:\n        fahrenheit_temperatures.append(celsius_to_fahrenheit(temp))\n    \n    print(fahrenheit_temperatures)", "task_type": "coding"}
{"input": "Find the GCD of two integers.", "output": "def gcd(a, b): \n\n    # Base case \n    if a == 0:\n        return b \n      \n    return gcd(b % a, a) \n  \n# Driver code\na = 8\nb = 12\nprint(\"GCD of\",a,\"and\",b,\"is\", gcd(a, b))", "task_type": "coding"}
{"input": "Develop a html form that gets user's name, email, and a valid phone number.", "output": "<form action=\"action_page.php\">\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" id=\"name\" name=\"Name\" required><br>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" id=\"email\" name=\"Email\" required><br>\n  <label for=\"phone\">Phone:</label><br>\n  <input type=\"number\" name=\"phone\" pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\" required><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "task_type": "coding"}
{"input": "Design an HTML form that requires the user to enter three pieces of information: a name, email address, and password", "output": "<form action=\"\">\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" id=\"name\" name=\"username\" placeholder=\"Enter your name here\" required>\n  <br><br>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email address here\" required>\n  <br><br>\n  <label for=\"password\">Password:</label><br>\n  <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password here\" required>\n  <br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "task_type": "coding"}
{"input": "Assign values to the given array of length 10 and print it using a Java program.", "output": "public class PrintArray {\n    public static void main(String[] args) {\n        int[] array = new int[10];\n        for (int i = 0; i < 10; i++) {\n            array[i] = i;\n        }\n        for (int i = 0; i < 10; i++) {\n            System.out.print(array[i] + \" \");\n        }\n    }\n}", "task_type": "coding"}
{"input": "Write a Python program to parse a date string and display the date in ISO 8601 format.", "output": "from datetime import datetime\nimport re\n\n# Parse the date string \ndate = datetime.strptime(date_string, '%d %B %Y')\n\n# Convert the date to ISO 8601 format\niso_8601 = date.strftime(\"%Y-%m-%d\")\n\n# Print the ISO 8601 formatted date\nprint(iso_8601)", "task_type": "coding"}
{"input": "Generate a web page with a navigation bar on it.", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Navbar Page</title>\n    <style>\n      .navbar {\n        width: 100%;\n        background-color: #555;\n      }\n      .navbar a {\n        float: left;\n        padding: 12px;\n        color: white;\n        text-decoration: none;\n        font-size: 17px;\n      }\n      .navbar a:hover {\n        background-color: #000;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"navbar\">\n      <a href=\"#home\">Home</a>\n      <a href=\"#about\">About</a>\n      <a href=\"#contact\">Contact</a>\n    </div>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Using HTML and CSS, create a page layout with two columns and a header row.", "output": "<html>\n  <head>\n    <style>\n      .table {  \n        display: table; \n        width: 100%;\n      }\n      .table-row {  \n        display: table-row;\n      }\n      .table-cell { \n        display: table-cell;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"table\">\n      <div class=\"table-row\">\n        <div class=\"header table-cell\">Header</div>\n      </div>\n      <div class=\"table-row\">\n        <div class=\"table-cell\">Column 1</div>\n        <div class=\"table-cell\">Column 2</div>\n      </div>\n    </div>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Explain what is the critical section on a process.", "output": "The critical section of a process is a section of code that must be executed without interruption by other processes. In a multi-threaded system, the critical section is used to guarantee that only one thread can access resources or data structures at any given time. It also ensures that operations that must be mutually exclusive are executed in order to prevent race conditions.", "task_type": "coding"}
{"input": "Create an HTML page with a table to display student scores.", "output": "<!DOCTYPEhtml> \n<html> \n    <head> \n        <title>Score Table</title> \n    </head> \n    <body> \n        <h3>Score Table</h3> \n        <table> \n            <tr> \n                <th>Student Name</th> \n                <th>Score</th> \n            </tr> \n            <tr> \n                <td>Student A</td> \n                <td>80</td> \n            </tr> \n            <tr> \n                <td>Student B</td> \n                <td>90</td> \n            </tr> \n        </table> \n    </body> \n</html>", "task_type": "coding"}
{"input": "Create an HTML code to produce a form which contains two text fields (username and password) and submit button.", "output": "<form>\n    <label>Username:</label>\n    <input type=\"text\" name=\"username\" required>\n    <br/><br/>\n    <label>Password:</label>\n    <input type=\"password\" name=\"password\" required>\n    <br/><br/>\n    <input type=\"submit\" value=\"Submit\" >\n</form>", "task_type": "coding"}
{"input": "Generate a valid C++ code to implement a linked list with basic operations.", "output": "#include<iostream>\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n};\n\nclass LinkedList {\n    Node* head;\n\npublic:\n    LinkedList(){ \n         head = NULL; \n    }\n    \n    void append(int data) {\n        Node* newNode = new Node;\n        newNode->data = data;\n        newNode->next = NULL;\n\n        if (head == NULL) {\n            head = newNode;\n        } else {\n            Node* temp = head;\n            while (temp->next != NULL) {\n                temp = temp->next;\n            }\n            temp->next = newNode;\n        }\n    }\n\n    void deleteNodeByData(int data) {\n        if (head == NULL) {\n            return;\n        }\n\n        if (head->data == data) {\n            Node *temp = head;\n            head = head->next;\n            delete temp;\n            return;\n        }\n\n        Node *prev;\n        Node *curr = head;\n\n        while(curr != NULL && curr->data != data) {\n            prev = curr;\n            curr = curr->next;\n        }\n\n        prev->next = curr->next;\n        delete curr;\n        return;\n    }\n\n\n    void printList() { \n        Node* temp = head;\n        while (temp != NULL) {\n            cout << temp->data << endl; \n            temp = temp->next; \n        } \n    }\n};", "task_type": "coding"}
{"input": "Write a Bash script to quickly calculate the mean for a set of numbers", "output": "#!/bin/bash\n\n#Create array from set of numbers\narr=(5 10 15 20)\n\n#Initialize sum and count\nsum=0\ncount=0\n\n#Loop through the array and sum up the values\nfor item in ${arr[@]}; do\n    let sum=sum+$item \n    let count=count+1\ndone\n\n#Calculate mean\necho $(echo $sum/$count | bc -l)", "task_type": "coding"}
{"input": "What is an example of a bubble sort algorithm?", "output": "Example of a bubble sort algorithm:\n\nvoid bubble_sort(int arr[], int n) \n{ \n   int i, j; \n   for (i = 0; i < n-1; i++)           \n       for (j = 0; j < n-i-1; j++)  \n           if (arr[j] > arr[j+1]) \n              swap(&arr[j], &arr[j+1]); \n}", "task_type": "coding"}
{"input": "What are the advantages of using a graphical user interface?", "output": "The advantages of using a graphical user interface (GUI) include improved usability and accessibility, better visual communication of information, easier drag-and-drop capabilities, improved data visualization, and the ability to add graphics, sound and video to enhance user experience. GUI's also facilitate multi-tasking, allowing users to view and manipulate multiple windows and documents simultaneously.", "task_type": "coding"}
{"input": "Classify and label the outputs from a logistic regression.", "output": "The outputs from the logistic regression are [-1, 0.1, 0.6, 1.8]. \nThe labels for these outputs are: -1 = \"Negative Class\", 0.1 = \"Close to Negative Class\", 0.6 = \"Neutral Class\", 1.8 = \"Positive Class\".", "task_type": "coding"}
{"input": "Make a C++ program to delete a node from a doubly linked list at a given position.", "output": "void deleteNode(struct Node **head_ref, int position) \n{ \n    if (*head_ref == NULL) \n        return; \n  \n    // Store head node \n    struct Node* temp = *head_ref; \n  \n    // If header is removed \n    if (position == 0) \n    { \n        *head_ref = temp->next;   // Change head \n        free(temp);               // free old head \n        return; \n    } \n  \n    // Find previous node of the node to be deleted \n    for (int i=0; temp!=NULL && i<position-1; i++) \n        temp = temp->next; \n  \n    // If position is more than number of ndoes \n    if (temp == NULL || temp->next == NULL) \n        return; \n  \n    // Node temp->next is the node to be deleted \n    // Store pointer to the next of node to be deleted \n    struct Node *next = temp->next->next; \n  \n    // Unlink the node from linked list \n    free(temp->next);  // Free memory \n  \n    temp->next = next;  // Unlink the deleted node from list \n}", "task_type": "coding"}
{"input": "Develop a code to rotate a given list by a given value.", "output": "def rotate_list(my_list, k):\n    \"\"\"\n    A function to rotate a given list by a given value.\n    Input: list, integer\n    Output: list\n    \"\"\"\n    # Get the length of list\n    length = len(my_list)\n    \n    # Rotate the list\n    rotated = my_list[-k % length:] + my_list[:-k % length]\n    \n    return rotated", "task_type": "coding"}
{"input": "Sort the given list of integers in descending order using the Bubble sort technique.", "output": "def bubble_sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n\na = [3, 5, 2, 8, 9, 1]\na = bubble_sort_descending(a)\nprint(a) # prints [9, 8, 5, 3, 2, 1]", "task_type": "coding"}
{"input": "Write a C++ program for calculating the power of a number.", "output": "#include <iostream>\n \ndouble power(double base, int exponent)\n{\n    double result = 1;\n\n    for(int i = 0; i < exponent; i++)\n    {\n        result *= base;\n    }\n\n    return result;\n}\n \nint main()\n{\n    double base;\n    int exponent;\n\n    base = 5.0;\n    exponent = 2;\n\n    std::cout << power(base, exponent) << std::endl;\n\n    return 0;\n}", "task_type": "coding"}
{"input": "Create a Java program to print out the multiplication table for the first 10 numbers", "output": "public class MultiplicationTable {\n public static void main(String[] args) {\n  for (int i = 1; i <= 10; i++) {\n   for (int j = 1; j <= 10; j++) {\n    System.out.print(i * j + \" \");\n   }\n   System.out.println();\n  }\n }\n}", "task_type": "coding"}
{"input": "List the different access modifiers in Java", "output": "The access modifiers in Java are public, private, protected, and default. Public members are accessible everywhere and can be inherited. Private members can only be accessed within the same class. Protected members are accessible within the same package but can be inherited to a subclass in a different package. Default, or package-private, members are accessible within the same package but cannot be inherited.", "task_type": "coding"}
{"input": "Write a function that calculates the sum of the digits of a number.", "output": "def sum_of_digits(n): \n    # handle negative numbers \n    n = abs(n)\n\n    # base case when n has only one digit\n    if n < 10: \n        return n \n\n    # calculate the sum of the digits recursively  \n    else: \n        return (n % 10 + sum_of_digits(int(n / 10))) \n\nprint(sum_of_digits(13))", "task_type": "coding"}
{"input": "Write a Tensorflow model to classify a given X and Y as either positive or negative.", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Dense(8, input_dim=2, activation=\"relu\"), \n  tf.keras.layers.Dense(1, activation=\"sigmoid\")\n])\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=tf.keras.optimizers.Adam(0.01),\n              metrics=['accuracy'])\n\nX_list = [X, Y] \ny = [1, 0]\n\nmodel.fit(X_list, y, batch_size=4, epochs=4)", "task_type": "coding"}
{"input": "Create an Android app with a button to switch between light and night mode.", "output": "public class MainActivity extends AppCompatActivity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    \n    // Get reference to button\n    Button switchModeButton = (Button) findViewById(R.id.switch_mode_button);\n    switchModeButton.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View view) {\n        AppCompatDelegate.setDefaultNightMode(\n                  AppCompatDelegate.getDefaultNightMode() == AppCompatDelegate.MODE_NIGHT_YES ?\n                          AppCompatDelegate.MODE_NIGHT_NO : AppCompatDelegate.MODE_NIGHT_YES\n        );\n        recreate();\n      }\n    });\n  }  \n}", "task_type": "coding"}
{"input": "Replace all vowels with 'x' in a given string.", "output": "def replace_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += \"x\"\n        else:\n            new_string += char\n    return new_string\n\nprint(replace_vowels(myString))\n\n# Output\n# Pxthxn Prxgrxmmxr", "task_type": "coding"}
{"input": "Given a binary tree, write a function to print out the elements in level order.", "output": "def levelOrder(root): \n    if root is None: \n        return\n    queue = [] \n    queue.append(root)  \n    while(len(queue) > 0): \n        print (queue[0].data), \n        node = queue.pop(0)  \n        if node.left is not None: \n            queue.append(node.left) \n        if node.right is not None: \n            queue.append(node.right)", "task_type": "coding"}
{"input": "Create a Python program to calculate prime numbers between 0 to 50.", "output": "# Program to calculate prime numbers between 0 to 50\n\n# list of prime numbers\nprime_list = []\nfor num in range(0,51):  \n   # prime numbers are greater than 1  \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_list.append(num)\n\nprint(prime_list)", "task_type": "coding"}
{"input": "Create a Java program that takes an array as argument and then prints out the elements of the array in reversed order.", "output": "public class ReverseArray { \n  \n    /* Prints the array in reverse order */\n    public static void printReversedArray(int arr[]) { \n        int n = arr.length; \n        for (int i=n-1; i>=0; i--) { \n            System.out.print(arr[i] + \" \"); \n        } \n    } \n  \n    public static void main(String[] args) {\n        int[] array = { 1, 2, 3, 4, 5 }; \n        printReversedArray(array); \n    } \n}", "task_type": "coding"}
{"input": "Modify the following code so that it takes a list of numbers and calculates their median.", "output": "def median(data):\n    data.sort()\n    length = len(data)\n    if length == 0:\n        return 0\n    if length % 2 == 0:\n        return (data[length // 2] + data[length // 2 - 1]) / 2\n    elif length % 2 == 1:\n        return data[length // 2]", "task_type": "coding"}
{"input": "Summarize the features of the Python pandas library.", "output": "Pandas is a Python library used for data manipulation and analysis. It provides an efficient and flexible data structure for labeled and relational data called DataFrame, and operations for groupby aggregation, merging, joining, reshaping, and other manipulations. It also offers statistical functions for descriptive statistics, optimization, plotting, and visualization. Finally, pandas is designed to be fast and efficient, with powerful options for indexing, handling missing data, time-series, and automatic conversion of data.", "task_type": "coding"}
{"input": "Print all unique combinations of an array of integers", "output": "# Print all unique combinations of an array of integers\n\ndef all_combinations(nums):\n  result = [[]]\n  for num in nums:\n    temp_result = []\n    for res in result:\n      temp_result.append(res + [num])\n    result.extend(temp_result)\n  return result\n\nprint(all_combinations(nums)) # [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]", "task_type": "coding"}
{"input": "Write a shell script to find the longest string from an array of strings.", "output": "#!/bin/bash\n\narr=(\"Hello\" \"This\" \"Is\" \"A\" \"Sample\" \"String\")\n\nlongest=${arr[0]}\n\nfor element in \"${arr[@]}\"; do\n    if [[ ${#longest} -lt ${#element} ]]; then\n        longest=\"$element\"\n    fi\ndone\necho $longest", "task_type": "coding"}
{"input": "Create a React component to display a list of 5 user names.", "output": "import React from 'react';\n\nconst UserList = (props) => {\n    const users = props.users.map((user, index) => {\n        return (\n            <div key={index}>{user.name}</div>\n        );\n    });\n    return (\n        <div>\n            {users}\n        </div>\n    )\n};\n\nexport default UserList;", "task_type": "coding"}
{"input": "Develop a Java program to rotate a two-dimensional array clockwise by 90 degrees.", "output": "public class RotateMatrix \n{  \n    public static void rotate(int[][] arr, int n) \n    {  \n        for (int x = 0; x < n/2; x++) \n        {     \n            for (int y = x; y < n-x-1; y++) \n            { \n                int temp = arr[x][y];  \n                arr[x][y] = arr[y][n-1-x];  \n                arr[y][n-1-x] = arr[n-1-x][n-1-y];  \n                arr[n-1-x][n-1-y] = arr[n-1-y][x];  \n                arr[n-1-y][x] = temp;  \n            }  \n        }  \n    }  \n}", "task_type": "coding"}
{"input": "Modify the program to accept user input of two numbers, and show the result based on the operator provided.", "output": "def calculate(num1, num2, operator):\n    if (operator == '+'):\n        result = num1 + num2\n    elif (operator == '-'):\n        result = num1 - num2\n    elif (operator == '*'):\n        result = num1 * num2\n    elif (operator == '/'):\n        result = num1 / num2\n    else:\n        print(\"Invalid operator\")\n    return result", "task_type": "coding"}
{"input": "Edit the given code to delete a node from a linked list", "output": "void deleteNode(struct node *node) \n{ \n    struct node *temp = node->next; \n    node->data = temp->data; \n\n    // Store pointer to the next of node \n    struct node *next_next = temp->next; \n\n    // Unlink node from linked list \n    free(temp); \n\n    node->next = next_next; \n}", "task_type": "coding"}
{"input": "Explain the purpose of the np.random.seed() function.", "output": "The np.random.seed() function sets the random seed, or starting point, for generating random numbers. This allows users to reproduce the same random numbers each time they run the code, making apps and experiments easier to debug. The seed can be set to an integer value, a list of integers, or None. If the seed is set to None, the system time is used to set the starting point.", "task_type": "coding"}
{"input": "Write a C program that prints out a pyramid of numbers.", "output": "#include <stdio.h>\n\nvoid printPyramid(int n) \n{ \n    int i, j; \n   \n    for (i=0; i<n; i++) \n    { \n        for (j=0; j<=i; j++) \n            printf(\"%d \", j+1); \n        printf(\"\\n\"); \n    } \n} \n  \nint main() \n{ \n    int n = 5; \n    printPyramid(n); \n    return 0; \n}", "task_type": "coding"}
{"input": "Create a JavaScript class to find the difference of two given dates.", "output": "class DateCalculator {\n    static daysDifference(date1,date2) {\n        let diffTime = Math.abs(date2.getTime() - date1.getTime());\n        let diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        return diffDays;\n    }\n}", "task_type": "coding"}
{"input": "Develop an algorithm to process a given matrix.", "output": "def processMatrix(matrix):\n  result_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))] \n  for row in range(len(matrix)):\n    for col in range(len(matrix[0])):\n      element = matrix[row][col]\n      # perform processing on element here\n      result_matrix[row][col] = element\n  return result_matrix", "task_type": "coding"}
{"input": "Given an array of numbers, code a Java code to find out the highest number.", "output": "public static int findHighestNumber (int[] numbers) {\n \n    int highestNumber = Integer.MIN_VALUE;\n \n    for (int currentNumber : numbers) {\n        highestNumber = Math.max(currentNumber, highestNumber);\n    }\n \n    return highestNumber;\n}\n\nint highestNumber = findHighestNumber(arr); // prints 55", "task_type": "coding"}
{"input": "Design a HTML page to show a page counter", "output": "<html>\n    <head>\n        <title>Page counter</title>\n        <script>\n            var count = 0;\n            function countClick(){\n                count++\n                document.getElementById(\"count\").innerHTML = count;\n            }\n        </script>\n    </head>\n\n    <body>\n        <h1>Page views: <span id=\"count\">0</span></h1>\n        <button onclick=\"countClick()\">Click Me!</button>\n    </body>\n</html>", "task_type": "coding"}
{"input": "Create a program in Java for displaying all prime numbers between 1 and 100.", "output": "public class PrimeNumbers {\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"All prime numbers between 1 and 100:\");\n\t\tint counter;\n\t\tfor (int i = 2; i <= 100; i++) {\n\t\t\tcounter = 0;\n\t\t\tfor (int num = i; num >= 1; num--) {\n\t\t\t\tif (i % num == 0) {\n\t\t\t\t\tcounter = counter + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (counter == 2) {\n\t\t\t\tSystem.out.println(i);\n\t\t\t}\n\t\t}\n\t}\n\n}", "task_type": "coding"}
{"input": "Create a function that takes the string of the current time and returns the time in minutes.", "output": "def convert_to_minutes(time): \n    # Split the time into hours and minutes \n    h, m = map(int, time.split(':'))\n\n    # Add 12 to the hours if the time is PM \n    if time.endswith('PM'): \n        h += 12\n    return h * 60 + m\n\nprint(convert_to_minutes(\"12:30PM\")) # 750", "task_type": "coding"}
{"input": "Develop an algorithm in JavaScript that determines whether a given year is a leap year or not.", "output": "\"\"\"\nDevelop an algorithm in JavaScript that determines whether a given year is a leap year or not\n\"\"\"\nfunction isLeapYear(year) {\n    if (year % 4 === 0) {\n        if (year % 100 === 0) {\n            if (year % 400 === 0) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return true;\n        }\n    }\n    else {\n        return false;\n    }\n}\n\nlet year = 2100;\nconsole.log(isLeapYear(year));", "task_type": "coding"}
{"input": "Generate a list of prime numbers between two numbers A and B (both inclusive).", "output": "def generate_primes(lower, upper): \n    prime_numbers = [] \n    for num in range(lower, upper + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_numbers.append(num) \n    return prime_numbers", "task_type": "coding"}
{"input": "Create a JavaScript class that allows the user to choose the size, position and color of a textbox.", "output": "class Textbox {\n    constructor(size, position, color) {\n        this.size = size;\n        this.position = position;\n        this.color = color;\n    }\n\n    showTextbox() {\n        const textbox = document.createElement(\"div\");\n        textbox.style.width = this.size + \"px\";\n        textbox.style.position = this.position;\n        textbox.style.background = this.color;\n        document.body.appendChild(textbox);\n    }\n}", "task_type": "coding"}
{"input": "Write VBA for a search interface to pull information from one tab of an excel sheet to a different tab", "output": "Sub search_interface()\n Dim sh As Worksheet, sh2 As Worksheet\n Set sh = ThisWorkbook.Sheets(\"Sheet1\")\n Set sh2 = ThisWorkbook.Sheets(\"Sheet2\")\n\n For Each row In sh.Rows\n   If row.Cells(1, 1) = \"Search Term\" Then\n     Exit For\n   End If\n  \n   If row.Cells(1, 1) = sh2.Cells(1, 2) Then\n     For col = 1 To 4\n       sh2.Cells(2, col).Value = row.Cells(1, col).Value\n     Next col\n   End If \n Next row \nEnd Sub", "task_type": "coding"}
{"input": "Explain a Python program to check whether a number is Armstrong or not.", "output": "def is_armstrong(num):\n    digits = [int(d) for d in str(num)]\n    num_digits = len(digits)\n    armstrong_sum = 0\n    for digit in digits:\n        armstrong_sum += digit ** num_digits\n    return num == armstrong_sum\n\n#Test code\nnum = 153\nprint(is_armstrong(num)) # Output will be True", "task_type": "coding"}
{"input": "Create a basic neural network model to distinguish between cats and dogs.", "output": "Model Building Code:\nmodel = Sequential([\n    Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    MaxPooling2D(2,2),\n    Conv2D(64, (3,3), activation='relu'),\n    MaxPooling2D(2,2),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])", "task_type": "coding"}
{"input": "Create a program to find the closest string to the given string from a list of strings.", "output": "def closest_string_match(string, strings):\n    min_distance = float(\"inf\")\n    min_string = \"\"\n    for s in strings:\n        distance = levenshtein_distance(string, s)\n        if distance < min_distance:\n            min_distance = distance \n            min_string = s\n    return min_string\n\ndef levenshtein_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(\n                    1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]", "task_type": "coding"}
{"input": "Add a method to the Customer class to print out customer's name, age and email", "output": "class Customer:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_email(self):\n        return self.email\n    \n    def print_customer_data(self):\n        print('Name: ' + self.name + ', Age: ' + str(self.age) + ', Email: ' + self.email)", "task_type": "coding"}
{"input": "Using Python, create a function to return the number of days in a particular month.", "output": "def days_in_month(month):\n if month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December':\n  return 31\n elif month == 'February':\n  return 28\n else:\n  return 30\n  \n# Output\ndays_in_month('September') \n# Output \n30", "task_type": "coding"}
{"input": "Develop a C# function to check if a given number is Armstrong or not. An Armstrong number is one which is equal to the sum of its digits raised to the power of the number of digits.", "output": "static bool IsArmstrong(int num)\n{\n  int origNum = num;\n  int sum = 0;\n  int digits = 0;\n\n  while (num != 0)\n  {\n    digits++;\n    num /= 10;\n  }\n  num = origNum;\n  while (num != 0)\n  {\n    sum +=Math.Pow(num % 10, digits);\n    num /= 10;\n  }\n\n  if (sum== origNum)\n     return true;\n\n  return false;\n}", "task_type": "coding"}
{"input": "Rewrite the following HTML table using CSS.", "output": "<style>\ntable{\n    border-collapse: collapse;\n    width: 100%;\n}\nth {\n    text-align: left;\n    background-color: darkgray;\n    padding: 8px;\n}\ntd {\n    background-color: whitesmoke;\n    padding: 8px;\n}\n</style>\n\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>20</td>\n    </tr>\n</table>", "task_type": "coding"}
{"input": "What is the difference between a REST API and SOAP API?", "output": "REST (REpresentational State Transfer) is an architectural style for designing distributed systems and web services while SOAP (Simple Object Access Protocol) is a messaging protocol designed for exchanging information in a distributed environment. REST is based on a stateless, client-server protocol and usually uses HTTP for communication while SOAP uses XML for communication. REST is much simpler than SOAP and does not require any additional headers but SOAP needs additional headers for authentication and authorization.", "task_type": "coding"}
{"input": "Using a hash table, construct a program to find all of the pairs of an array whose sum is equal to a given target", "output": "# Using a hash table, construct a program to find all of the pairs of an array whose sum is equal to a given target\n\ndef find_pairs(arr, target):\n    seen = {}\n    pairs = []\n    for num in arr:\n        if target-num in seen:\n            pairs.append((num, target-num))\n        seen[num] = True\n    return pairs\n\nprint(find_pairs(arr, target)) # [(2, 6), (1, 7)]", "task_type": "coding"}
{"input": "Generate all combinations of the string \"abcd\".", "output": "def generate_combinations(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            result.append(string[i:j])\n    return result\n\nif __name__ == '__main__':\n    string = \"abcd\"\n    print(generate_combinations(string)) # outputs ['a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd']", "task_type": "coding"}
{"input": "Given an array of integers, find the sum of the numbers that are divisible by 3.", "output": "\"\"\"\nGiven an array of integers, find the sum of the numbers that are divisible by 3.\n\"\"\"\ndef find_sum_divisible_by_3(nums):\n    total = 0\n    for num in nums:\n        if num % 3 == 0:\n            total += num\n    return total\n\nprint(find_sum_divisible_by_3(nums)) # 18", "task_type": "coding"}
{"input": "Construct a JSON object to represent the following shoes array.", "output": "{\n  \"shoes\": [\n    {\n      \"name\": \"Nike Air Zoom\",\n      \"color\": \"Black\",\n      \"size\": 10.5\n    },\n    {\n      \"name\": \"Skechers GoWalk\",\n      \"color\": \"Grey\",\n      \"size\": 11\n    }\n  ]\n}", "task_type": "coding"}
{"input": "How can you optimized the following program's runtime?", "output": "def my_function(my_list):\n    output = []\n    for i in range(0, len(my_list), 2):\n        output.append(my_list[i] * 2)\n    return output\nBy looping over the list in steps of two, the function will only have to go through half of the elements, thus optimizing the runtime.", "task_type": "coding"}
{"input": "Write a code that checks if two String are anagrams.", "output": "def areAnagrams(s1, s2): \n  \n    if (len(s1) != len(s2)): \n        return False\n  \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    for i in range(len(s1)): \n        if (s1[i] != s2[i]):\n          return False\n  \n    return True", "task_type": "coding"}
{"input": "Convert the following HTML table into a valid JSON format.", "output": "[\n  {\n   \"Name\": \"John\",\n   \"Age\": 23,\n   \"Country\": \"USA\"\n  },\n  {\n   \"Name\": \"Jack\",\n   \"Age\": 25,\n   \"Country\": \"Canada\"\n  },\n  {\n   \"Name\": \"Jane\",\n   \"Age\": 20,\n   \"Country\": \"Australia\"\n  }\n]", "task_type": "coding"}
{"input": "Design a function to filter words based on give characters.", "output": "def filter_words(characters, words):\n    result = []\n    for word in words:\n        if set(characters).issubset(word):\n            result.append(word)\n    return result\n\nprint(filter_words(\"aeiou\", ['apple','elephant','mountain','river']))\n# Output: ['apple', 'elephant', 'river']", "task_type": "coding"}
{"input": "Implement a Java program to search the title of books in a library.", "output": "public class LibrarySearch {\n\n    private ArrayList<String> titles;\n\n    public LibrarySearch() {\n        titles = new ArrayList<String>();\n    }\n    \n    public boolean searchTitle(String title) {\n        for (int i = 0; i < titles.size(); i++) {\n            String titleInList = titles.get(i);\n            if (title.equals(titleInList)) {\n                return true;\n            }\n        }\n       \n        return false;\n    }\n\n}", "task_type": "coding"}
{"input": "Write a Python function to return an array of adjacent (horizontal and vertical) numbers of a given two-dimensional array.", "output": "def adjacent_numbers(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n    return list(adjacent_set)", "task_type": "coding"}
{"input": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.", "output": "public ListNode reverseKGroup(ListNode head, int k) {\n    ListNode curr = head;\n    ListNode prev = null;\n    \n    int count = 0;\n    \n    while (curr != null && count != k) {\n        ListNode next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n        count++;\n    }\n    \n    if (next != null) {\n        head.next = reverseKGroup(next, k);\n    }\n    \n    return prev;\n}", "task_type": "coding"}
{"input": "Create an efficient matrix multiplication of two given matrices.", "output": "def matrix_multiply(matrix1, matrix2):\n    if len(matrix1[0]) != len(matrix2):\n        return \"Matrices should have the same size for multiplication\"\n    result = [[0 for x in range(len(matrix1))] for j in range(len(matrix2[0]))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result\n\nif __name__ == \"__main__\":\n    matrix1 = [[1, 2], [3, 4]]\n    matrix2 = [[5, 6], [7, 8]]\n    print(matrix_multiply(matrix1, matrix2))", "task_type": "coding"}
{"input": "Write a code to generate a random 7 digit phone number.", "output": "\"\"\"\nWrite a code to generate a random 7 digit phone number.\n\"\"\"\n\nimport random\n\ndef generate_random_phone_number():\n    # create a list of digits\n    lst = [str(i) for i in range(10)]\n    \n    # randomly select one digit\n    random.shuffle(lst)\n    \n    # generate a 7-digit phone number\n    phone_number = ''.join(lst[:7])\n    \n    return phone_number\n    \nif __name__ == '__main__':\n    print(generate_random_phone_number()) # Output: e.g. 8247036", "task_type": "coding"}
{"input": "Create an AI chatbot using JavaScript and Natural Language Processing.", "output": "const { NlpManager } = require('node-nlp');\n \nconst manager = new NlpManager({ languages: ['en'] });\n \nmanager.addDocument('en', 'Good morning', 'greet.morning');\nmanager.addDocument('en', 'Good evening', 'greet.evening');\nmanager.addDocument('en', 'Hi', 'greet.hello');\n\nmanager.addAnswer('en', 'greet.morning', 'Good morning! How can I help you today?');\nmanager.addAnswer('en', 'greet.evening', 'Good evening! What do you need help with?');\nmanager.addAnswer('en', 'greet.hello', 'Hi there! How may I assist you?');\n\n(async() => {\n    await manager.train();\n    const response = await manager.process('en', 'Hi');   \n    console.log(response.answer); // Hi there! How may I assist you?\n})();", "task_type": "coding"}
{"input": "Write a C++ class to store student information", "output": "class Student {\n  private:\n    string name;\n    int age;\n    string address;\n  public:\n    Student();\n    Student(string name, int age, string address);\n    void setName(string name);\n    void setAge(int age);\n    void setAddress(string address);\n    string getName();\n    int getAge();\n    string getAddress();\n};", "task_type": "coding"}
{"input": "Implement a LRU cache in Java", "output": "import java.util.HashMap;\n \npublic class LRUCache { \n  \n    // Custom Doubly Linked List \n    static class CacheNode { \n        CacheNode prev; \n        CacheNode next; \n        int key; \n        int value; \n    } \n  \n    // Map containing the Keys \n    private HashMap<Integer, CacheNode> map \n        = new HashMap<Integer, CacheNode>(); \n  \n    // Maximum number of elements in the cache \n    private int capacity; \n  \n    // Current size \n    private int size; \n  \n    // Head of the DLL \n    private CacheNode head; \n  \n    // Tail of the DLL \n    private CacheNode tail; \n  \n    public LRUCache(int capacity) { \n        this.capacity = capacity; \n        this.size = 0; \n    } \n  \n    // Lookup a key in the cache \n    public int get(int key) { \n  \n        // Return -1 if no such key exists \n        if (!map.containsKey(key)) { \n            return -1; \n        } \n  \n        // Get the node \n        CacheNode node = map.get(key); \n  \n        // Delete the node \n        removeNode(node); \n  \n        // Put it at the head \n        addAtHead(node); \n  \n        // Return its value \n        return node.value; \n    } \n  \n    // Add a new node to the cache \n    public void put(int key, int value) { \n        CacheNode node = new CacheNode(); \n        node.key = key; \n        node.value = value; \n  \n        // Check if the node is already present \n        if (map.containsKey(key)) { \n            CacheNode oldNode = map.get(key); \n            removeNode(oldNode); \n            addAtHead(node); \n            map.put(key, node); \n        } else { \n            // Add at the front of the list \n            if (size == capacity) { \n                // Delete the last node \n                map.remove(tail.key); \n                removeNode(tail); \n            } \n            addAtHead(node); \n            map.put(key, node); \n        } \n    } \n  \n    // Remove a node from the list \n    public void removeNode(CacheNode node) { \n        if (node.prev != null) { \n            node.prev.next = node.next; \n        } else { \n            head = node.next; \n        } \n  \n        if (node.next != null) { \n            node.next.prev = node.prev; \n        } else { \n            tail = node.prev; \n        } \n  \n        size--; \n    } \n  \n    // Put a node at the front of the list \n    public void addAtHead(CacheNode node) { \n        node.next = null; \n        node.prev = null; \n  \n        if (head == null) { \n            head = node; \n            tail = node; \n        } else { \n            node.next = head; \n            head.prev = node; \n            head = node; \n        } \n  \n        size++; \n    } \n}", "task_type": "coding"}
{"input": "What is the meaning of static in Java?", "output": "In Java, the static keyword is used to indicate that an entity is associated with a class rather than an instance of a class. It can be used to denote class variables, class methods and other class elements, and is also used in various access modifiers. Static members are associated with the class itself, rather than any particular instance of the class.", "task_type": "coding"}
{"input": "Create a pandas dataframe to display the given data as a table.", "output": "import pandas as pd\n\ndata = [\n {'Name': 'Alice', 'Age': 25, 'City': 'London' },\n {'Name': 'Bob', 'Age': 32, 'City': 'Tokyo' }\n ]\n\ndata_frame = pd.DataFrame(data)\nprint(data_frame)\n\nOutput:\nName  Age     City\n0  Alice    25    London\n1    Bob    32     Tokyo", "task_type": "coding"}
{"input": "Create a computer algorithm to determine the validity of a sudoku puzzle", "output": "def is_valid_sudoku(puzzle): \n  size = len(puzzle) \n  for row in range(len(puzzle)): \n    seen = set() \n    for col in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  for col in range(3): \n    seen = set() \n    for row in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  # and so on \n  return True", "task_type": "coding"}
{"input": "Create an algorithm in Java for maximum subarray problem.", "output": "public static int maxSubArraySum(int a[]) \n{ \n    int size = a.length; \n    int maxSoFar = Integer.MIN_VALUE, maxEndingHere = 0; \n  \n    for (int i = 0; i < size; i++) \n    { \n        maxEndingHere = maxEndingHere + a[i]; \n        if (maxSoFar < maxEndingHere) \n            maxSoFar = maxEndingHere; \n        if (maxEndingHere < 0) \n            maxEndingHere = 0; \n    } \n    return maxSoFar; \n}", "task_type": "coding"}
{"input": "Write a code that computes the sum and difference of two numbers in JavaScript.", "output": "var x = 10;\nvar y = 5;\n\nvar sum = x + y;\nvar diff = x - y;\n\nconsole.log(\"The sum of \" + x + \" and \" + y + \" is: \" + sum);\nconsole.log(\"The difference of \" + x + \" and \" + y + \" is: \" + diff);", "task_type": "coding"}
{"input": "Write code to find the longest substring of unique characters in a given string.", "output": "def find_longest_substring(string):\n    \"\"\"\n    Finds the longest substring of unique characters in a given string.\n    \"\"\"\n    longest_substring = ''\n    current_substring = ''\n    for ch in string:\n        if ch not in current_substring:\n            current_substring += ch\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n        else:\n            current_substring = ch\n    return longest_substring", "task_type": "coding"}
{"input": "Generate a function in python that takes two lists and returns the product of their longest common substrings.", "output": "def longest_common_substring(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\n    if longest_substring == 0:\n        return 0\n    else:\n        return list1[0] * list2[0] * longest_substring", "task_type": "coding"}
{"input": "Suggest an algorithm to implement a stack with two queues.", "output": "Algorithm for implementing a stack with two queues: \n1. Create two queues and enqueue the element to the first queue.\n2. Dequeue an element from the first queue, and enqueue it again to the second queue. \n3. Now, enqueue the next element from the first queue to the first queue.\n4. Repeat steps 2 and 3, until all the elements are dequeued from the first queue. \n5. Dequeue an element from the second queue, this will be the top of the stack.", "task_type": "coding"}
{"input": "Write a code to find the maximum length of the longest consecutive increasing subsequence in the given array.", "output": "def max_length(arr): \n    ans = 1\n    j = 0\n\n    for i in range(len(arr)): \n        if (arr[i+1] - arr[i] > 0): \n            j += 1\n            ans = max(ans, j+1)\n        else:  \n            j = 0\n    return ans\n\nprint(max_length(arr))", "task_type": "coding"}
{"input": "Design a Java function to convert a string to uppercase.", "output": "public String toUpperCase(String str){ \n    char[] charArr = str.toCharArray(); \n\n    for(int i=0; i<str.length(); i++){ \n        if(charArr[i] >= 'a' && charArr[i] <= 'z'){ \n            charArr[i] = (char)(charArr[i] - 32); \n        } \n    } \n\n    return new String(charArr); \n}", "task_type": "coding"}
{"input": "Create a HTML code to generate a three-column table from a given JSON object.", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>City</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n    <td>New York</td>\n  </tr>\n</table>", "task_type": "coding"}
{"input": "Build a MapReduce job with Hadoop to find the 99th percentile of a given data set.", "output": "//Mapper Code\n \nimport java.io.IOException;\n \nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Mapper;\n \npublic class MapperClass extends Mapper<LongWritable, Text, Text, LongWritable> {\n \n    LongWritable one = new LongWritable(1);\n    Text data = new Text();\n \n    @Override\n    protected void map(LongWritable key, Text value, Context context) \n      throws IOException, InterruptedException {\n \n        String[] line = value.toString().split(\",\");\n        String number = line[0];\n        // Emit key-value pair for number\n        data.set(number);\n        context.write(data, one);\n \n    }\n  \n}\n \n//Reducer Code\n \nimport java.io.IOException;\n \nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Reducer;\n \npublic class ReducerClass extends Reducer<Text, LongWritable, Text, LongWritable> {\n \n    int percentile;\n    @Override\n    protected void setup(Context context) \n      throws IOException, InterruptedException {\n \n        //Get percentile from context configuration\n        percentile = context.getConfiguration().getInt(\"percentile\", 99);\n    }\n \n    @Override\n    protected void reduce(Text key, Iterable<LongWritable> values,\n      Context context)\n      throws IOException, InterruptedException {\n \n        LongWritable result = new LongWritable();\n        int sum = 0;\n        // Sum up the values\n        for (LongWritable value : values) {\n            sum += value.get();\n        }\n \n        // Calculate percentile\n        int percentage = (sum*100)/percentile;\n \n        if (percentile == percentage) {\n            result.set(Long.parseLong((key.toString())));\n            context.write(new Text(\"Percentile 99:\"), result);\n        }\n \n    }\n  \n}", "task_type": "coding"}
{"input": "Given the following JSON data, create a Python program to read the data and print the name of the city with the highest population.", "output": "import json\n\nwith open('data.json') as f:\n    data = json.load(f)\n\nmax_population = 0\nmax_city_name = \"\"\nfor city in data['cities']:\n    if city['population'] > max_population:\n        max_population = city['population']\n        max_city_name = city['name']\n\nprint(\"The city with the highest population is\", max_city_name)", "task_type": "coding"}
{"input": "Write a Java program to output the first ten numbers of the Fibonacci sequence.", "output": "class Fibonacci {  \n    public void printFibonacciNumbers(int n) { \n    int first = 0;\n    int second = 1; \n    System.out.print(first + \" \" + second);  \n    for (int i = 2; i < n; i++) { \n        int third = first + second; \n        System.out.print(\" \"+third); \n        first = second; \n        second = third; \n    }\n    }\n}", "task_type": "coding"}
{"input": "Using HTML and CSS, create a basic website with three sections.", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>My Website</title>\n    <style>\n        .section{\n            width: 75%; \n            padding: 25px; \n            margin: auto;\n        }\n        #section1, #section2, #section3{\n            background-color: #f1f1f1;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"section1\" class=\"section\">\n        <h1>Section 1</h1>\n    </div>\n    <div id=\"section2\" class=\"section\">\n        <h1>Section 2</h1>\n    </div>\n    <div id=\"section3\" class=\"section\">\n        <h1>Section 3</h1>\n    </div>\n</body>\n</html>", "task_type": "coding"}
{"input": "Submit a program to a computer that takes an array and reverses it.", "output": "# Reverse an Array\n\ndef reverse_array(arr): \n    return [arr[i] for i in range(len(arr)-1, -1, -1)] \n  \n# Driver program \narr = [1, 2, 3, 4, 5] \nresult = reverse_array(arr) \nprint(result)", "task_type": "coding"}
{"input": "Model a NoSQL database using CosmosDB", "output": "Azure Cosmos DB is a NoSQL database-as-a-service model that provides a schema-free data model and supports automatic indexing of all data. \nTo model a posts database with CosmosDB, create a database and a container. \nThen create item in the container, each item should contain the fields \"Post ID\", \"ContentText\", \"User ID\" and \"Date of Creation\". \nThese fields should be indexed to allow for efficient queries and retrieval of the posts data.", "task_type": "coding"}
{"input": "Write a function to calculate the value of the mathematical series:", "output": "def calculate_series(x):\n    \"\"\" Calculate the value of the mathematical series \"\"\"\n    result = 0\n    for i in range(1, x + 1):\n        result += (1 / (i * i))\n    return result\n    \nif __name__ == \"__main__\":\n    result = calculate_series(2)\n    print(result) # prints 1.25", "task_type": "coding"}
{"input": "Propose an algorithm in Python for sorting a given list of numbers in descending order.", "output": "One possible solution would be to use a variation of the bubble sort algorithm, where the elements are being swapped from the last element to the first element.\n\ndef sort_numbers_descending(elements):\n  n = len(elements)\n  # Traverse through all elements\n  for i in range(n-1):\n    # Last i elements are already in place\n    for j in range(n-1-i):\n      # Swap if the element found is greater\n      # than the next element\n      if elements[j] < elements[j+1]:\n        temp = elements[j]\n        elements[j] = elements[j+1]\n        elements[j+1] = temp\n  return elements", "task_type": "coding"}
{"input": "Suggest the best data structure to store a small dictionary of words and their meanings.", "output": "# The best data structure to store a small dictionary of words and their meanings is a hash table (dictionary/dict).\n# A hash table is an efficient data structure that uses key-value pairs to store and retrieve data quickly. \n# It performs well in cases where there is a need to search, add and delete elements in a collection. \n# A hash table will allow the user to look up a word in the dictionary quickly.", "task_type": "coding"}
{"input": "Create an API in Node.js to accept JSON data and add it to a database.", "output": "// define an API endpoint to accept POST requests\napp.post('/api/data', (req, res) => {\n  // convert data to a JavaScript object\n  const data = JSON.parse(req.body);\n  // store data in the database\n  storeDataInDB(data);\n\n  // return a success message\n  res.send({ success: true });\n});", "task_type": "coding"}
{"input": "Explain the importance of using functions in programming.", "output": "Using functions in programming is important for a few reasons. Functions can be used to divide a program into smaller, more manageable pieces, making it easier to read, debug, and maintain code. Additionally, functions can be reused across multiple programs by creating libraries that can be imported, saving time and effort. The use of functions also promotes code modularity and re-usability, allowing developers to write code once and use or modify it for different applications. Finally, functions can help to improve the overall performance of code by optimizing execution time because process and code only needs to be run once per function call.", "task_type": "coding"}
{"input": "How can we extend the following JavaScript program to add two more students?", "output": "function getStudents(){\n    const students = [\n        {name: \"Tom\", age: 17},\n        {name: \"Jack\", age: 16},\n        {name: \"Jill\", age: 13},\n        {name: \"Dave\", age: 21},\n    ];\n    return students;\n}", "task_type": "coding"}
{"input": "Create a function that takes in a dictionary and returns a new dictionary with the values squared.", "output": "def squared_values(my_dict):\n    \"\"\"This function takes in a dictionary as an argument,\n    and returns a new dictionary containing the values of the\n    original dictionary squared.\n    \n    Parameters\n    ----------\n    my_dict : dict\n        The input dictionary.\n    Returns\n    -------\n    A new dictionary with the values of the original\n    dictionary squared.\n    \"\"\"\n    \n    return {k : v**2 for k, v in my_dict.items()}", "task_type": "coding"}
{"input": "Create a script that extracts the page titles from the given HTML page.", "output": "from bs4 import BeautifulSoup\n\nhtml_content = '''\n<html>\n<head><title>HTML Example</title></head>\n<body>\n<h1>Example Page</h1>\n<p>This is an example of a HTML page.</p>\n</body>\n</html>\n'''\n\nsoup = BeautifulSoup(html_content, 'html.parser')\npage_title = soup.title.string\nprint(page_title)", "task_type": "coding"}
{"input": "Edit the following Python code to combine two lists.", "output": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Combine both the lists\ncombined_list = list1 + list2\n# Print the combined list\nprint(combined_list)\n\nOutput:\n[1, 2, 3, 4, 5, 6]", "task_type": "coding"}
{"input": "Create a RUST program that prints out the highest number from an array of integers.", "output": "fn main() {\n    let arr = [6, 1, 4, 22, 7, 9];\n    let max_num: i32 = arr[0];\n\n    for x in 0..arr.len() {\n        if arr[x] > max_num {\n            max_num = arr[x];\n        }\n    }\n\n    println!(\"Max number: {}\",max_num);\n}", "task_type": "coding"}
{"input": "Return the index of a given value in a list.", "output": "def find_index(lst, value):\n    \"\"\"\n    Return the index of a given value in a list.\n    \"\"\"\n    for i, v in enumerate(lst):\n        if v == value:\n            return i\n    return -1\n\nlst = [1,2,3]\nval = 3\nfind_index(lst, val)", "task_type": "coding"}
{"input": "Using CSS, create a simple page layout with two columns of equal width.", "output": "<style>\n    #container {\n        width: 600px;\n    }\n\n    #container div {\n        float: left;\n        width: 50%;\n    }\n</style>\n\n<div id=\"container\">\n    <div>Content for the first column</div>\n    <div>Content for the second column</div>\n</div>", "task_type": "coding"}
{"input": "Write a stack-based language for a simple calculator that can perform the following tasks: Add, subtract, multiply, and divide integers.", "output": "//Reusable \"push\" and \"pop\" functions\n\nvoid push(Stack *st, int val) {\n    st->arr[st->top] = val;\n    st->top++;\n}\n\nint pop(Stack *st) {\n    return st->arr[--(st->top)];\n}\n\n//Functions for performing operations\n\nint add(Stack *st) {\n    int x = pop(st);\n    int y = pop(st);\n    return x + y;\n}\n\nint subtract(Stack *st) {\n    int x = pop(st);\n    int y = pop(st);\n    return x - y;\n}\n\nint multiply(Stack *st) {\n    int x = pop(st);\n    int y = pop(st);\n    return x * y;\n}\n\nint divide(Stack *st) {\n    int x = pop(st);\n    int y = pop(st);\n    return x / y;\n}", "task_type": "coding"}
{"input": "Create a deep learning model to output a sentence in French when given an English sentence as input.", "output": "\"\"\"\nCreate a deep learning model to output a sentence in French when given an English sentence as input\n\"\"\"\nimport tensorflow as tf\nimport numpy as np\n\n# Input and output languages\ninput_lang = 'EN'\noutput_lang = 'FR'\n\n# Define the model\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=128, input_length=10),\n  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n  tf.keras.layers.Dense(vocab_size, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              optimizer=tf.keras.optimizers.Adam())\nmodel.fit(input_tensor, output_tensor, epochs=100) \n\n# Make a prediction\nsentence = 'I like to eat apples.'\npredicted_sentence = translate(sentence, input_lang, output_lang, model) \n\nprint(predicted_sentence) # J'aime manger des pommes.", "task_type": "coding"}
{"input": "Perform a binary search on the following list of integers: [0, 1, 2, 3, 4, 5, 6, 7, 8].", "output": "def binary_search(nums, target):\n  low = 0\n  high = len(nums) - 1\n\n  while low <= high:\n    mid = (low + high) // 2\n    if target == nums[mid]:\n      return mid\n    elif target < nums[mid]:\n      high = mid - 1\n    else:\n      low = mid + 1\n  \n  return -1", "task_type": "coding"}
{"input": "Suggest a code to get the smallest and largest number in an unsorted list.", "output": "def get_smallest_largest(arr):\n    \"\"\"\n    Function to return the smallest and largest numbers in a list\n    Parameters:\n        arr: An unsorted list of numbers\n    Returns:\n        A tuple containing the smallest and largest numbers in the list\n    \"\"\"\n    smallest = arr[0]\n    largest = arr[0]\n\n    for elem in arr:\n        if elem < smallest:\n            smallest = elem\n        if elem > largest:\n            largest = elem\n    \n    return (smallest, largest)", "task_type": "coding"}
{"input": "Create a Java program to print out the number of times a string appears in an array.", "output": "public class Main {\n    public static void main(String[] args) {\n        String str = \"Apple\";\n        String[] array = {\"Apple\", \"Orange\", \"Apple\", \"Banana\"};\n        int count = 0;\n        for(int i=0; i<array.length; i++) {\n            if(array[i].equals(str)) {\n                count++;\n            }\n        }\n        System.out.println(\"Number of times \"+str+\" appears in the array = \"+count);\n    }\n}", "task_type": "coding"}
{"input": "Write a code to find control characters such as carriage returns inside a given string", "output": "#Function to find control characters\ndef find_control_chars(string):\n    control_chars = [\n        '\\r', \n        '\\n'\n    ]\n    for char in control_chars:\n        if char in string:\n            return True\n    return False\n    \nstring = 'This is a string\\r\\nwith some control characters'\ncontrol_char_exists = find_control_chars(string)\nprint('Control character exists:', control_char_exists)", "task_type": "coding"}
{"input": "Construct a code to get the last index of a given substring in a string.", "output": "def lastIndexOf(st, substr): \n    if substr in st: \n        start = -1 \n        while True: \n            pos = st.find(substr, start + 1) \n            if pos == -1: \n                break \n            start = pos \n            \n        return start \n    else: \n        return -1 \n    \nprint(lastIndexOf(\"hi hi hello\", \"hi\")) \n\n# output \n3", "task_type": "coding"}
{"input": "Write a Python program to find all pairs of numbers in the given list whose sum is equal to the given number.", "output": "def find_pairs(nums, sum):\n  result = []\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[i] + nums[j] == sum:\n        result.append((nums[i], nums[j]))\n  return result\n\nres = find_pairs(nums, sum)\nprint(res)\n# Output: [(2, 6), (3, 5)]", "task_type": "coding"}
{"input": "Create an android app with a search feature.", "output": "SearchView searchView = findViewById(R.id.search_field); //Find search field\nsearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n        @Override\n        public boolean onQueryTextSubmit(String query) {\n            //Enter your search logics\n            return false;\n        }\n\n        @Override\n        public boolean onQueryTextChange(String newText) {\n            //Enter your logics\n            return false;\n        }\n});", "task_type": "coding"}
{"input": "Create a neural network using TensorFlow.", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(units=128, activation='relu', input_shape=(10,)),\n    tf.keras.layers.Dense(units=128, activation='relu'),\n    tf.keras.layers.Dense(units=128, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])", "task_type": "coding"}
{"input": "Create a program in C++ that calculates the absolute difference between two numbers.", "output": "#include <iostream>\nusing namespace std;\n\nint main() \n{\n  int num1 = 50;\n  int num2 = 40;\n  int absDiff = abs(num1 - num2);\n  cout << \"The absolute difference between two numbers is: \" << absDiff;\n  return 0;\n}", "task_type": "coding"}
{"input": "Create a simple php website using the following data records.", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Simple PHP Website</title>\n</head>\n<body>\n  <?php\n    $data = [\n      [\n        \"firstname\" => \"Oliver\",\n        \"lastname\" => \"Smith\",\n        \"address\" => \"1234 Main Street, City, Country\"\n      ],\n      [\n        \"firstname\" => \"John\",\n        \"lastname\" => \"Doe\",\n        \"address\" => \"5678 Long Road, City, Country\"\n      ],\n      [\n        \"firstname\" => \"Chris\",\n        \"lastname\" => \"Fitzgerald\",\n        \"address\" => \"9123 Eagle Street, City, Country\"\n      ]\n    ]; \n\n    foreach($data as $person) {\n      echo '<p>';\n      echo $person['firstname'] . ' ' . $person['lastname'] . '<br/>';\n      echo $person['address'];\n      echo '</p>';\n    }\n  ?>\n</body>\n</html>", "task_type": "coding"}
{"input": "Produce an HTML table given a dictionary containing student information.", "output": "<table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Major</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>23</td>\n        <td>Computer Science</td>\n    </tr>\n</table>", "task_type": "coding"}
{"input": "Write a code in C# to convert a decimal number to binary format with or without bitwise operators.", "output": "public static class Program\n{\n  public static string DecimalToBinary(int n)\n  {\n    string binary = \"\";\n    int remainder;\n    //without using bitwise operators\n    while (n != 0)\n    {\n      remainder = n % 2;\n      n /= 2;\n      binary = remainder + binary; \n    }\n    return binary;\n  }\n \n  public static void Main() \n  {\n    string binary = DecimalToBinary(15);\n    Console.WriteLine(binary);\n  }\n}", "task_type": "coding"}
{"input": "Build a class in Python with three methods.", "output": "class MyClass:\n  def __init__(self):\n   # initialization code \n   self.data = []\n   self.count = 0\n \n  def add_data(self, data_element):\n   # add data to a list\n   self.data.append(data_element)\n   self.count += 1 \n \n  def get_data_count(self):\n   # return number of data elements\n   return self.count", "task_type": "coding"}
{"input": "Create a class in Java with three private fields and three public functions to access those fields.", "output": "public class MyClass{\n    private int num;\n    private double dbl; \n    private char c;\n\n    public int getNum(){\n        return num;\n    }\n    public void setNum(int num){\n        this.num = num;\n    }\n    public double getDbl(){\n        return dbl;\n    }\n    public void setDbl(double dbl){\n        this.dbl = dbl;\n    }\n    public char getChar(){\n        return c;\n    }\n    public void setChar(char c){\n        this.c = c;\n    }\n}", "task_type": "coding"}
{"input": "Create a Django view to render an HTML page with message \"Hello world!\".", "output": "In the views.py file, add the following Django view:\n\ndef hello_world(request):\n    return render(request, 'hello_world.html', {'message': 'Hello world!'})\n\nAnd in the hello_world.html file:\n\n<html>\n<head>\n  <title>Hello world!</title>\n</head>\n<body>\n  <h1>{{message}}</h1>\n</body>\n</html>", "task_type": "coding"}
{"input": "Describe the process of writing a recursive program.", "output": "Writing a recursive program involves identifying a base case, which is a situation where the answer has been found and doesn’t need to be recomputed. This is followed by defining the recursive case which involves breaking the problem down into smaller and smaller subproblems until the base case is reached. Each recursive call should pass the necessary information to the next call for solving the subproblem. The computed results are eventually combined to solve the original problem.", "task_type": "coding"}
{"input": "Generate a random DNA sequence of length 50.", "output": "\"\"\"\nGenerate a random DNA sequence of length 50\n\"\"\"\n\nimport random\n\ndef random_dna_sequence(length):\n    bases = [\"A\",\"T\",\"G\",\"C\"]\n    sequence = \"\".join([random.choice(bases) for _ in range(length)])\n    return sequence\n\nif __name__ == '__main__':\n  print(random_dna_sequence(50))", "task_type": "coding"}
{"input": "Create a class named Person with two properties: name and age.", "output": "class Person {\n    private: \n        string name;\n        int age;\n\n    public:\n        Person(string name, int age) {\n            this->name = name;\n            this->age = age;\n        }\n        void setName(string name) {\n            this->name = name;\n        }\n        void setAge(int age) {\n            this->age = age;\n        }\n        string getName() {\n            return name;\n        }\n        int getAge() {\n            return age;\n        }\n};", "task_type": "coding"}
{"input": "Create a Java program to determine whether a given string is a palindrome. A palindrome is a string which reads the same forwards and backwards.", "output": "public class Palindrome {\n    public static boolean isPalindrome(String s) {\n        int i = 0, j = s.length()-1; \n        while (i < j) { \n            if (s.charAt(i) != s.charAt(j)) \n                return false; \n            i++; \n            j--; \n        } \n  \n        return true; \n    } \n \n    public static void main(String[] args) {\n        String s = \"madam\";\n        if (isPalindrome(s)) \n            System.out.println(\"The string is a palindrome.\"); \n        else\n            System.out.println(\"The string is not a palindrome.\"); \n    }\n \n}", "task_type": "coding"}
{"input": "Write a Java program to create a calculator using Switch statement.", "output": "import java.util.Scanner;\n\npublic class Calculator {\n    public static void main(String[] args) { \n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Please enter two numbers: \");\n        int firstNumber = sc.nextInt();\n        int secondNumber = sc.nextInt();\n\n        System.out.println(\"Please enter an operator (+, -, *, /): \");\n        char operator = sc.next().charAt(0);\n\n        switch (operator) {\n            case '+':\n                System.out.println(firstNumber + secondNumber);\n                break;\n\n            case '-':\n                System.out.println(firstNumber - secondNumber);\n                break;\n\n            case '*':\n                System.out.println(firstNumber * secondNumber);\n                break;\n\n            case '/':\n                System.out.println(firstNumber / secondNumber);\n                break;\n\n            default:\n                System.out.println(\"Invalid operator!\");\n                break;\n        }\n    sc.close();\n    }\n}", "task_type": "coding"}
{"input": "Create a function that takes two arrays and returns the elements that are present in both of them.", "output": "def find_common_elements(arr1, arr2):\n    common_elements = []\n    for element1 in arr1:\n        if element1 in arr2:\n            common_elements.append(element1)\n    return common_elements\n\nprint(find_common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n\n# Output: [3, 4, 5]", "task_type": "coding"}
{"input": "Create a Java class that defines a circle with two double data fields, radius and area.", "output": "public class Circle {\n private double radius;\n private double area;\n\n public Circle(double radius) {\n  this.radius = radius;\n  this.area = Math.PI * Math.pow(this.radius, 2);\n }\n\n public double getRadius() {\n  return this.radius;\n }\n\n public double getArea() {\n  return this.area;\n }\n}", "task_type": "coding"}
{"input": "Provide an example of a Python class and its elements.", "output": "class Car: \n    def __init__(self, color, make, model): \n        self.color = color \n        self.make = make \n        self.model = model \n    \n    def start(self): \n        print(\"Engine started!\") \n\nford_mustang = Car('Red', 'Ford', 'Mustang') \nford_mustang.start()", "task_type": "coding"}
{"input": "Write a Java program to sort the following array of integers using Quick Sort.", "output": "public class QuickSort \n{ \n    // Method to implement quick sort \n    public static void quickSort(int[] arr, int low, int high) \n    { \n        if (low < high) \n        { \n            /* pi is partitioning index, arr[pi] is  \n              now at right place */\n            int pi = partition(arr, low, high); \n  \n            // Recursively sort elements before \n            // partition and after partition \n            quickSort(arr, low, pi-1); \n            quickSort(arr, pi+1, high); \n        } \n    } \n  \n    // Method to find partition index \n    public static int partition(int arr[], int low, int high) \n    { \n        int pivot = arr[high];  \n        int i = (low-1); // index of smaller element \n        for (int j=low; j<high; j++) \n        { \n            // If current element is smaller than the pivot \n            if (arr[j] < pivot) \n            { \n                i++; \n  \n                // swap arr[i] and arr[j] \n                int temp = arr[i]; \n                arr[i] = arr[j]; \n                arr[j] = temp; \n            } \n        } \n  \n        // swap arr[i+1] and arr[high] (or pivot) \n        int temp = arr[i+1]; \n        arr[i+1] = arr[high]; \n        arr[high] = temp; \n  \n        return i+1; \n    } \n  \n    // Main method \n    public static void main(String args[]) \n    { \n        int[] arr = {4, 3, 6, 2, 5, 1}; \n        int n = arr.length; \n          \n        quickSort(arr, 0, n-1); \n          \n        /* Print the sorted array */\n        System.out.println(\"Sorted array: \"); \n        for(int i=0; i<n; ++i) \n            System.out.print(arr[i] + \" \"); \n    } \n}", "task_type": "coding"}
{"input": "What is the difference between an interface and an abstract class?", "output": "The main difference between an interface and an abstract class is that an interface can only contain abstract methods while an abstract class can include both abstract and non-abstract methods. Additionally, an interface can be implemented by multiple classes while a class can only extend a single abstract class. Interfaces are also limited to public methods while an abstract class can contain any type of access modifiers.", "task_type": "coding"}
{"input": "Perform checksum calculation on the following string \"HelloWorld\".", "output": "// Function to calculate the checksum of a given string \n// *str is the given string \nlong calculateChecksum(string str) \n{ \n\tlong checksum = 0; \n  \n\tfor (int i = 0; i < str.length(); i++) { \n\t\tchecksum += str.at(i); \n\t} \n\treturn checksum; \n} \n// Output: checksum = 483 (for \"HelloWorld\")", "task_type": "coding"}
{"input": "Modify the code to remove the duplicate elements from the given array.", "output": "let myArray = [5, 4, 5, 3, 2, 3, 1];\nlet uniqueArray = []; \n  \nmyArray.forEach((item) => { \n    if (uniqueArray.indexOf(item) === -1) { \n        uniqueArray.push(item); \n    } \n});", "task_type": "coding"}
{"input": "Create a Javascript function that calculates the median value of an array of numbers.", "output": "function calculateMedian(arr) {\n  arr.sort(function(a, b){return a-b});\n  if (arr.length % 2 !== 0) {\n    return arr[Math.floor(arr.length / 2)];\n  }\n  else {\n    return (arr[arr.length / 2 - 1] + arr[arr.length / 2]) / 2;\n  }\n}", "task_type": "coding"}
{"input": "How do you calculate the hamming distance between two strings?", "output": "def hamming_distance(str1, str2):\n    # length of the strings must be equal\n    if len(str1) != len(str2):\n        return -1\n    \n    distance = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            distance += 1\n    \n    return distance", "task_type": "coding"}
{"input": "Create a program to encrypt a given text using any encryption technique.", "output": "# Using Python:\n \nplain_text = \"Hello\"\n\n# Simple substitution encryption\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nencrypted_text = \"\"\n\nfor plain_letter in plain_text:\n    if plain_letter in alphabet:\n        encrypted_letter = alphabet[(alphabet.index(plain_letter) + 3) % 26]\n    else:\n        encrypted_letter = plain_letter\n    encrypted_text += encrypted_letter\n    \nprint(\"Encrypted Text:\", encrypted_text) # Output: Khoor", "task_type": "coding"}
{"input": "Create a text classification model using Scikit-learn to classify a message with either \"positive\" or \"negative\" sentiment.", "output": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Vectorize the message into a format that the model can accept\nvect = CountVectorizer().fit(X_train)\nX_train_vectorized = vect.transform(X_train)\n\n# Train a Logistic Regression model\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized, y_train)\n\n# Use the model to predict the sentiment of a given message\nmessage_sentiment = model.predict([vect.transform([message])])", "task_type": "coding"}
{"input": "Suggest an algorithm for finding the maximum sum for all subarrays.", "output": "The algorithm for finding the maximum sum for all subarrays can be solved using a divide and conquer approach.\n\nFirst, divide the array into two parts by splitting it in half at its middle index. Then, calculate the maximum subarray sum for each of the two parts recursively. Finally, return the greater of the two sums plus the value at the middle index of the array. This will be the maximum sum of all subarrays.", "task_type": "coding"}
{"input": "Using the input as a guide, write code that prints out a copy of the 2d matrix with its elements transposed.", "output": "def transpose_matrix(matrix):\n    \"\"\"Function to transpose 2d list matrix\"\"\"\n    row = len(matrix) \n    col = len(matrix[0]) \n  \n    transpose = [[0 for j in range(row)] for i in range(col)] \n  \n    for i in range(row): \n        for j in range(col): \n            transpose[j][i] = matrix[i][j] \n  \n    for i in range(col): \n        print(transpose[i]) \n\nif __name__ == '__main__':\n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    transpose_matrix(matrix)", "task_type": "coding"}
{"input": "Create an HTML table with 3 rows and 4 columns.", "output": "<table> \n  <tr> \n    <td></td> \n    <td></td> \n    <td></td> \n    <td></td> \n  </tr> \n  <tr> \n    <td></td> \n    <td></td> \n    <td></td> \n    <td></td> \n  </tr> \n  <tr> \n    <td></td> \n    <td></td> \n    <td></td> \n    <td></td> \n  </tr> \n</table>", "task_type": "coding"}
{"input": "Create a HTML page with two buttons, one to display \"Hello World!\" and one to display \"Goodbye World!\"", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Two Buttons</title>\n  </head>\n  <body>\n    <button onclick=\"alert('Hello World!')\">Print Hello World</button>\n    <br />\n    <button onclick=\"alert('Goodbye World!')\">Print Goodbye World</button>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Find the greatest common divisor for two integer inputs using the Euclidean Algorithm.", "output": "\"\"\"\nFind the greatest common divisor for two integer inputs using the Euclidean Algorithm\n\"\"\"\n\ndef greatest_common_divisor(int1, int2):\n  if int1 == 0:\n    return int2\n  elif int2 == 0:\n    return int1\n  elif int1 == int2:\n    return int1\n  else:\n    if int1 > int2:\n      return greatest_common_divisor(int2, int1 % int2)\n    else:\n      return greatest_common_divisor(int1, int2 % int1)\n\nif __name__ == \"__main__\":\n   print(greatest_common_divisor(30, 60))", "task_type": "coding"}
{"input": "Design an algorithm to find the two numbers in an array that have the largest sum.", "output": "# Finds two numbers in an array that have the largest sum\ndef getMaxSum(arr):\n    # Initialize the sum to the maximum possible value\n\tmaxSum = -float('inf')\n\t\n\t# Iterate over all elements of the array\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\t# Compare the current sum to the maximum sum\n\t\t\tmaxSum = max(maxSum, arr[i] + arr[j])\n\n    # Return the largest sum\n\treturn maxSum", "task_type": "coding"}
{"input": "Generate a random alphanumeric string of length 8 in Java.", "output": "String AlphaNumericString = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                        + \"0123456789\"\n                        + \"abcdefghijklmnopqrstuvxyz\";  \n\nStringBuilder sb = new StringBuilder(8);\n\nfor (int i = 0; i < 8; i++) { \n \n            int index \n                = (int)(AlphaNumericString.length() \n                        * Math.random()); \n  \n            sb.append(AlphaNumericString \n                          .charAt(index)); \n        } \n\nString string8Length = sb.toString();\n\nSystem.out.println(\"Random Alphanumeric String of length 8: \" + string8Length);", "task_type": "coding"}
{"input": "Write a Python program to find the unique elements in a list.", "output": "def unique_elements(input_list): \n    result_list = []\n    for item in input_list: \n        if item not in result_list: \n            result_list.append(item)\n    return result_list\n\ninput_list = [2, 3, 9, 5, 2, 4, 9]\nprint(unique_elements(input_list))\n# Output: [2, 3, 9, 5, 4]", "task_type": "coding"}
{"input": "Create a Java program which calculates the area of a circle.", "output": "public class AreaCalculator {\n    public static final double PI = 3.14159;\n    \n\tpublic static double calculateArea(double radius) {\n\t\treturn PI * radius * radius;\n\t}\n    \n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(calculateArea(10));\n\t}\n}", "task_type": "coding"}
{"input": "Create a Java class named \"Card\" to represent a standard playing card. The class should contain a constructor which takes the card's suit and number as parameters. It should also contain two getter methods to get the suit and number of the card.", "output": "public class Card {\n    private String suit;\n    private int number;\n\n    public Card(String suit, int number) {\n        this.suit = suit;\n        this.number = number;\n    }\n\n    public String getSuit() {\n        return suit;\n    }\n    public int getNumber() {\n        return number;\n    }\n}", "task_type": "coding"}
{"input": "Explain what is Closure in Python Programming?", "output": "In Python, a closure is a higher order function (a function that takes one or more functions as arguments or returns a function) that allows a function to remember or access the variables or arguments of the enclosing scope—even after the execution of the outer function has finished. A closure is created when a nested function is defined, and an inner function remembers the variables of its enclosing scope even after the execution of the outer function has finished.", "task_type": "coding"}
{"input": "Create a function to calculate the exponent of a given number x raised to power y.", "output": "def exponent(x,y): \n    if(y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        y = int(y / 2) \n        return exponent(x, y) * exponent(x, y) \n    else: \n        return (x * exponent(x, int(y / 2)) * exponent(x, int(y / 2))) \n\nexponent(5,3) # Output: 125", "task_type": "coding"}
{"input": "Change the code using decorator to log how long the function runs.", "output": "import time\n\ndef log_time(func):\n    def inner(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n\n        print(f'Function {func.__name__} took {end-start} sec to run')\n\n        return result\n    return inner\n\n@log_time\ndef sum_function(a, b):\n    return a + b", "task_type": "coding"}
{"input": "Generate a program to remove duplicates from an unsorted linked list.", "output": "class Node: \n  \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n  \ndef remove_duplicates(head): \n    h = {} \n  \n    temp = head \n    prev = None\n    while(temp): \n        if temp.data in h: \n            prev.next = temp.next\n            temp = None\n        else: \n            h[temp.data] = True\n            prev = temp \n        temp = prev.next\n\nif __name__ == \"__main__\":\n    pass", "task_type": "coding"}
{"input": "Create a C++ function to print all possible paths from top left to bottom right of a MxN matrix.", "output": "#include <iostream> \n  \n// Maximum size of the matrix \n#define M 4 \n#define N 4 \n  \n// Function to Print all the paths from top left to bottom right \nvoid printPathsUtil(int mat[M][N], int x, int y, int m, int n, int path[M][N]) \n{ \n   // Reached the bottom of the matrix so we are left with \n   // only option to move right \n   if (x == m - 1) \n   { \n      for (int j = y; j < n; j++) \n         path[x][j] = mat[x][j]; \n  \n      for (int i = 0; i < m; i++) \n      { \n         for (int j = 0; j < n; j++) \n            std::cout << path[i][j] << \" \"; \n         std::cout << std::endl; \n      } \n  \n      return; \n   } \n  \n   // Reached the right corner of the matrix we are left with \n   // only the downward movement. \n   if (y == n - 1) \n   { \n      for (int i = x; i < m; i++) \n         path[i][y] = mat[i][y]; \n  \n      for (int i = 0; i < m; i++) \n      { \n         for (int j = 0; j < n; j++) \n            std::cout << path[i][j] << \" \"; \n         std::cout << std::endl; \n      } \n  \n      return; \n   } \n  \n   // Add the current cell to the path being generated \n   path[x][y] = mat[x][y]; \n  \n   // Print all the paths that are possible after moving down \n   printPathsUtil(mat, x + 1, y, m, n, path); \n  \n   // Print all the paths that are possible after moving right \n   printPathsUtil(mat, x, y + 1, m, n, path); \n  \n   // Remove the current cell from the path[] \n   path[x][y] = 0; \n} \n  \n// Function to print all paths from top left to bottom right in a \n// given two dimensional array \nvoid printPaths(int mat[M][N], int m, int n) \n{ \n   // Create an array to store paths \n   int path[M][N]; \n  \n   // Initialize the path array to all -1's \n   for (int i = 0; i < m; i++) \n      for (int j = 0; j < n; j++) \n         path[i][j] = -1; \n  \n   // Call to print all paths \n   printPathsUtil(mat, 0, 0, m, n, path); \n} \n \nint main() \n{ \n   int mat[M][N] = { {1, 2, 3, 4}, \n                     {5, 6, 7, 8}, \n                     {9, 10, 11, 12}, \n                     {13, 14, 15, 16} }; \n   \n   // Print all paths \n   printPaths(mat, M, N); \n  \n   return 0; \n}", "task_type": "coding"}
{"input": "Write a code to get the current exchange rate between two currency using the OpenExchangeRates API.", "output": "\"\"\"\nWrite a code to get the current exchange rate between two currency using the OpenExchangeRates API.\n\nInput: fromCurrency = \"USD\"\n        toCurrency = \"GBP\"\n\"\"\"\n\nimport requests\nimport json\n\ndef get_exchange_rate(fromCurrency, toCurrency):\n    baseUrl = 'https://openexchangerates.org/api/latest.json?app_id=YOUR_APP_ID'\n    response = requests.get(baseUrl)\n    data = json.loads(response.text)\n    rates = data['rates']\n    fromRate = rates[fromCurrency]\n    toRate = rates[toCurrency]\n    return (toRate/fromRate)\n            \nif __name__ == '__main__':\n    print(get_exchange_rate(\"USD\", \"GBP\"))", "task_type": "coding"}
{"input": "Parse a given XML document and create a JavaScript object.", "output": "const parser = new DOMParser();\nconst xmlDoc = parser.parseFromString(text, \"text/xml\");\n \nconst books = xmlDoc.querySelectorAll('book');\nconst result = {};\n \nbooks.forEach(book => {\n const id = book.getAttribute('id');\n result[id] = {\n  author: book.querySelector('author').textContent,\n  title: book.querySelector('title').textContent,\n  price: book.querySelector('price').textContent\n }\n});\n\nconsole.log(result);\n// { \n//  bk101: {author: \"Kerridge, Alan\", title: \"The Kitchen Diaries\", price: \"29.99\"}, \n//  bk102: {author: \"Zinsser, William\", title: \"On Writing Well\", price: \"19.95\"}\n// }", "task_type": "coding"}
{"input": "You are given a string and asked to find the frequency of each character in the string", "output": "from collections import Counter \n\ndef char_frequency(str): \n    return Counter(str) \n\nstr = \"GPT Model\"\nprint (char_frequency(str))\n\n# Output: {'G': 1, 'P': 1, 'T': 1, ' ': 1, 'M': 1, 'o': 2, 'd': 1, 'e': 1, 'l': 1}", "task_type": "coding"}
{"input": "Create a function to generate a list of prime numbers between 2 and n.", "output": "def prime_numbers(n):\n    prime_nums = []\n    for num in range(2, n + 1):\n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else:\n                prime_nums.append(num)\n    return prime_nums", "task_type": "coding"}
{"input": "Construct a C++ program to find the maximum value in an array of integers.", "output": "#include <iostream> \nusing namespace std; \n\nint findMax(int array[], int array_size)\n{\n    int max_value = array[0];\n    for (int i = 1; i < array_size; i++) \n        if (array[i] > max_value) \n            max_value = array[i];\n    return max_value;\n}\n\nint main() \n{ \n    int array[] = {1, -2, 3, 4, 7, 5}; \n    int array_size = sizeof(array)/sizeof(array[0]); \n    cout << \"Max: \" << findMax(array, array_size); \n    return 0; \n}", "task_type": "coding"}
{"input": "How can you use a function to determine whether a given array is in increasing or decreasing order or unordered?", "output": "def check_order(arr):\n     order = 0\n     if arr[0] < arr[1]:\n         order = 1\n     elif arr[0] > arr[1]:\n         order = -1\n     \n     for i in range(1, len(arr)-1):\n        if arr[i] > arr[i+1] and order == 1:\n            return 0\n        elif arr[i] < arr[i+1] and order == -1:\n            return 0\n     return order", "task_type": "coding"}
{"input": "Create a program that extracts a given pattern from a given string", "output": "\"\"\"\nCreate a program that extracts a given pattern from a given string\n\"\"\"\n\ndef extract_pattern(text, pattern):\n    result = []\n    for i in range(len(text)):\n        if text[i] == pattern:\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    text = \"Hello world!\"\n    pattern = \"l\"\n    print(extract_pattern(text, pattern))", "task_type": "coding"}
{"input": "Implement a C# program that reads an array of strings and sorts them in alphabetical order.", "output": "using System;\n\nnamespace SortString\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] fruits = { \"banana\", \"apple\", \"orange\" };\n\n            Array.Sort(fruits);\n\n            Console.WriteLine(\"Sorted Array of strings:\");\n            foreach (string fruit in fruits)\n            {\n                Console.WriteLine(fruit);\n            }\n        }\n    }\n}", "task_type": "coding"}
{"input": "Generate a program in Java that reads two strings and checks if the strings are equal.", "output": "public class StringEquality { \n\tpublic static void main(String[] args) { \n\t\t// two strings \n\t\tString s1, s2; \n\n\t\ts1 = \"Hello\"; \n\t\ts2 = \"Hello\"; \n\n\t\tif (s1.equals(s2)) \n\t\t\tSystem.out.println(\"Strings are equal.\"); \n\t\telse\n\t\t\tSystem.out.println(\"Strings are not equal.\"); \n\t} \n}", "task_type": "coding"}
{"input": "Generate a Python script that implements a Linked List data structure.", "output": "# define Node\nclass Node(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# define LinkedList\nclass LinkedList:\n\n    def __init__(self, head=None):\n        self.head = head\n    \n    def insert(self, node):\n        current = self.head\n        if not self.head:\n            self.head = node\n        else:\n            while current.next:\n                current = current.next\n            current.next = node\n\n     def delete_node(self, data):\n        current = self.head\n        while current.data != data and current.next is not None:\n            previous = current\n            current = current.next\n        if current.data == data:\n            if current == self.head:\n                self.head = current.next\n            else:\n                previous.next = current.next", "task_type": "coding"}
{"input": "Explain the purpose of try and except blocks when writing code.", "output": "Try and except blocks are used in Python to catch and handle errors in code. The basic structure of a try-except block is a try statement followed by one or more except statements. The try block includes code that may throw an error and the except block includes code that will be executed if an error is thrown. This is useful for code that needs to handle any potential errors that may arise from its execution.", "task_type": "coding"}
{"input": "Construct an API using Flask that returns an array of integers in response to a request", "output": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/v1/get_data', methods=['GET'])\ndef get_data():\n    data = [1, 2, 3, 4, 5]\n    return jsonify(data)\n\nif __name__ == '__main__':\n    app.run()", "task_type": "coding"}
{"input": "Create a PHP script that prints out the sum of all even numbers", "output": "<?php \n \n$start_num = 3; \n$end_num = 8; \n \n$sum = 0; \n \nfor($i = $start_num; $i <= $end_num; $i++) \n{ \n\tif($i % 2 == 0) \n\t\t$sum = $sum + $i; \n \n\t$i++; \n} \n \necho \"Sum of all even numbers between $start_num to $end_num = $sum\"; \n?>", "task_type": "coding"}
{"input": "Implement a bubble sort on the given array of integers.", "output": "def bubble_sort(arr):\n  for _ in range(len(arr) -1): \n    for i in range(len(arr)-1):\n      if arr[i] > arr[i+1]:\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\nprint(bubble_sort([4, 8, 1, 3, 9])) # [1, 3, 4, 8, 9]", "task_type": "coding"}
{"input": "Given a JSON object, output an object with keys sorted alphabetically.", "output": "{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"belief\": \"work hard\", \"hope\": \"pray hard\"}\n{\"hope\": \"pray hard\", \"belief\": \"work hard\"}", "task_type": "coding"}
{"input": "Format the following list in descending order of number of characters in each string.", "output": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(0, len(list)-i-1):\n            if len(list[j]) < len(list[j+1]):\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n\nsort_list([\"Hello\", \"World\", \"Technology\"])", "task_type": "coding"}
{"input": "Write a script that prints the first N numbers in a Fibonacci series.", "output": "def fibonacci_series(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \nfibonacci_series(N)", "task_type": "coding"}
{"input": "Validate whether the string contains only alphabets or not.", "output": "def check_string_alphabets(myString):\n    for character in myString:\n        if (not character.isalpha()):\n            return False\n    return True\n\nmyString = \"abc123\"\nif (check_string_alphabets(myString)):\n    print(\"String contains only alphabets\")\nelse:\n    print(\"String contains numbers\")", "task_type": "coding"}
{"input": "Create a python program to implement a Binary Search in an array", "output": "def binarySearch(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = int((low + high)/2)\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binarySearch(arr, x)\nif result != -1:\n    print(\"Element is present at index\",result) \nelse:\n    print(\"Element is not present in array\")", "task_type": "coding"}
{"input": "Construct an algorithm to calculate the GCD of two numbers.", "output": "A possible algorithm is the Euclidean algorithm. It works by repeatedly dividing the larger number by the smaller number and replace the larger number with the remainder until the remainder becomes zero and the last non-zero remainder is the GCD.\n\ndef gcd(a,b):\n  if a == 0:\n    return b\n  if b == 0:\n    return a\n\n  if a > b:\n    return gcd(a % b, b)\n  else:\n    return gcd(a, b % a)", "task_type": "coding"}
{"input": "Create a SQL database with two separate tables named \"Students\" and \"Courses\" to store relevant information about student records.", "output": "CREATE TABLE Students (\n    student_id INT NOT NULL AUTO_INCREMENT,\n    student_name VARCHAR(50) NOT NULL,\n    student_age INT NOT NULL,\n    PRIMARY KEY (student_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT NOT NULL AUTO_INCREMENT,\n    course_name VARCHAR(50) NOT NUL,\n    course_duration INT NOT NULL,\n    student_id INT NOT NULL,\n    PRIMARY KEY (course_id),\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);", "task_type": "coding"}
{"input": "Create a list of dictionaries, with each dictionary containing a person's name, age, and city.", "output": "persons = [\n  {'name': 'Alice', 'age': 24, 'city': 'Boston'},\n  {'name': 'Bob', 'age': 32, 'city': 'New York'},\n  {'name': 'Chris', 'age': 28, 'city': 'San Francisco'},\n]", "task_type": "coding"}
{"input": "Describe a way to store the following information in a database.", "output": "The best way to store the resume of a job applicant in a database is to break it up into different tables, such as an education table with fields for the degree, field of study, institution, and GPA; a work experience table with fields for job title, company, date, and description; and a skills table with fields for the skills, experience level, and industry.", "task_type": "coding"}
{"input": "What are the properties of a good algorithm?", "output": "A good algorithm should have the following properties: correctness, completeness, accuracy, robustness, time complexity, memory complexity, scalability, and reusability. The correctness of an algorithm means that it should produce the correct output for every possible input. The completeness refers to whether the algorithm will terminate and produce a result for every input. Accuracy refers to the correctness of the results. Robustness refers to the ability of the algorithm to handle unpredictable input and produce the same output every time. Time and memory complexity refers to how much time and memory the algorithm takes to execute. Scalability indicates how well the algorithm can handle larger inputs and outputs, and reusability means how easy it is for other programmers to use the algorithms for their own purposes.", "task_type": "coding"}
{"input": "How would you design the data structure to store and process results from a 5-choice multiple choice test.", "output": "class TestResults {\n    // A map containing the question id as key and the selected answer as value\n    Map<Integer, Integer> answers;\n  \n    // A map containing the question id as key and a boolean indicating whether the answer was correct or not as value\n    Map<Integer, Boolean> scores;\n  \n    // A map containing the question id as key and a list of all the possible answers as value\n    Map<Integer, List<String>> questions;\n  \n    public TestResults(Map<Integer, Integer> answers, Map<Integer, Boolean> scores, Map<Integer, List<String>> questions) {\n        this.answers = answers;\n        this.scores = scores;\n        this.questions = questions;\n    }\n  \n    public Map<Integer, Integer> getAnswers() {\n        return answers;\n    }\n  \n    public Map<Integer, Boolean> getScores() {\n        return scores;\n    }\n    \n    public Map<Integer, List<String>> getQuestions() {\n        return questions;\n    }\n}", "task_type": "coding"}
{"input": "From a list of numbers, find the smallest number using Python.", "output": "\"\"\"\nFrom a list of numbers, find the smallest number using Python.\n\"\"\"\n\n# Initialize the list of numbers\nlist_of_nums = [21, 9, 67, 34]\n\n# Sort the list in order\nlist_of_nums.sort()\n\n# Print the first element of the sorted list\nprint(list_of_nums[0])", "task_type": "coding"}
{"input": "Construct an algorithm to find all possible combinations of a string of characters.", "output": "A possible algorithm is to use a recursive approach. The algorithm would start from the beginning of the string and for each character, generate all possible combinations for the rest of the string. Then, for each combination, the character can either be included or excluded from the combination. Finally, return the list of all possible combinations.\n\ndef find_combinations(string):\n if len(string) == 0:\n return []\n \n result = []\n for i in range(len(string)):\n prefix = string[i]\n suffix = string[i+1:]\n combinations = find_combinations(suffix)\n \n if len(combinations) == 0:\n result.append(prefix)\n else:\n for combination in combinations:\n result.append(prefix + combination)\n result.append(combination)\n \n return result", "task_type": "coding"}
{"input": "How would you collect data from websites using Scrapy?", "output": "Scrapy is a Python framework used for web scraping. It can be used to extract data from websites using a variety of techniques. The first step is to create a Scrapy project and define the items you want to scrape. After that, create a Spider class which is responsible for crawling and extracting the data. Finally, you can use a range of methods like XPath and CSS selectors to collect the data.", "task_type": "coding"}
{"input": "Write a code to check whether the input string is a palindrome or not.", "output": "\"\"\"\nWrite a code to check whether the input string is a palindrome or not\n\"\"\"\n\ndef check_palindrome(input_string):\n    rev_str = input_string[::-1]\n \n    # Checking if both string are equal or not\n    if rev_str == input_string:\n        return True\n    return False\n  \n# main function\nif __name__ == \"__main__\":\n    str = \"a man a plan a canal panama\"\n    if check_palindrome(str):\n        print(\"String is Palindrome\")\n    else:\n        print(\"String is not Palindrome\")", "task_type": "coding"}
{"input": "Write a JavaScript program that allows the user to input two numbers and shows the bigger number.", "output": "function biggestNum(){\nvar num1 = parseInt(prompt(\"Please enter the first number: \")); \nvar num2 = parseInt(prompt(\"Please enter the second number: \")); \n  \nif(num1 > num2){\n  alert(\"The largest number is: \" + num1); \n}\nelse if(num2 > num1){\n  alert(\"The largest number is: \" + num2); \n}\nelse{\n  alert(\"Both numbers are equal.\");\n}\n}\nbiggestNum();", "task_type": "coding"}
{"input": "Write a code to find the sum of the multiples of 3 and 5 up to a given number.", "output": "def sum_of_multiples(num): \n    sum = 0 \n    for i in range(num):\n            if i % 3 == 0: \n                sum += i\n            elif i % 5 == 0: \n                sum += i\n    return sum\n\n# Driver code \nsum = sum_of_multiples(15)\nprint(\"Sum of multiples of 3 and 5 =\",sum)", "task_type": "coding"}
{"input": "Create a function that returns the sum of the Fibonacci sequence to the nth number", "output": "def FibonacciSum(n): \n    fib1 = 0\n    fib2 = 1\n    if n < 0: \n        return \"Incorrect input\"\n    elif n == 0:\n        return 0\n    elif n == 1: \n        return 0\n    else: \n        sum = 0\n        for i in range(2,n+1): \n            fib_n = fib1 + fib2\n            fib1 = fib2\n            fib2 = fib_n\n            sum = sum + fib_n\n        return sum", "task_type": "coding"}
{"input": "Create a HTML page to show user data from a REST API.", "output": "<html>\n  <head>\n     <title>User Data</title>\n  </head>\n  <body>\n    <h1>User Data</h1>\n    <p>Name: John</p>\n    <p>Age: 25</p>\n    <p>Address: 123 Main Street</p>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Write an algorithm to generate the Fibonacci series up to the nth term", "output": "def fibonacci(n):  \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "task_type": "coding"}
{"input": "Write a short Java program to generate a random value from 1 to 10.", "output": "import java.util.Random;\n\npublic class genRandom {\n   public static void main(String[] args) {\n      // create instance of Random class\n      Random rand = new Random();\n\n      // Generate random integers in range 0 to 10\n      int randomNum = rand.nextInt(11);\n\n      // Print random integers\n      System.out.println(\"Random Number :\" + randomNum);\n   }\n}", "task_type": "coding"}
{"input": "Find the sum of all the digits in a given number in Java.", "output": "Using a loop and mathematical operators, the sum of all the digits in a given number can be found in Java.\n\nExample:\n\nint number = 1234;\nint sum = 0;\nwhile(number > 0) {\n        int digit = number % 10;\n        sum += digit;\n        number /= 10;\n}\nSystem.out.println(\"The sum of all the digits is \"+sum);\n\n// Output: The sum of all the digits is 10", "task_type": "coding"}
{"input": "Write HTML code to generate a table of 5 rows and 4 columns.", "output": "<table> \n  <tr> \n    <th>Col1</th> \n    <th>Col2</th> \n    <th>Col3</th> \n    <th>Col4</th> \n  </tr> \n  <tr> \n    <td>Row1</td> \n    <td>Row1</td> \n    <td>Row1</td> \n    <td>Row1</td> \n  </tr> \n  <tr> \n    <td>Row2</td> \n    <td>Row2</td> \n    <td>Row2</td> \n    <td>Row2</td> \n  </tr> \n  <tr> \n    <td>Row3</td> \n    <td>Row3</td> \n    <td>Row3</td> \n    <td>Row3</td> \n  </tr> \n  <tr> \n    <td>Row4</td> \n    <td>Row4</td> \n    <td>Row4</td> \n    <td>Row4</td> \n  </tr> \n  <tr> \n    <td>Row5</td> \n    <td>Row5</td> \n    <td>Row5</td> \n    <td>Row5</td> \n  </tr> \n</table>", "task_type": "coding"}
{"input": "Create a Tableau script to retrieve data from an Amazon RDS instance.", "output": "import pyodbc \nconn = pyodbc.connect(\n    DRIVER='Amazon Redshift ODBC Driver',\n    SERVER=<your instance URL>,\n    PORT=<port number>,\n    DATABASE=<database name>,\n    UID=<username>,\n    PWD=<password>)\ncursor = conn.cursor()\nquery = <your SQL query>\ncursor.execute(query) \ndata = cursor.fetchall() \nprint(data)", "task_type": "coding"}
{"input": "Write a function to generate an array of all possible permutations of N numbers.", "output": "def generate_permutations(n): \n  \n    if n == 0: \n        return [] \n    \n    if n == 1: \n        return [[1]] \n  \n    permutations = [] \n    for i in range(n): \n        permutations_n_1 = generate_permutations(n - 1) \n  \n        for perm in permutations_n_1: \n            for j in range(n): \n                r = perm.copy() \n                r.insert(j, n) \n                permutations.append(r) \n  \n    return permutations", "task_type": "coding"}
{"input": "Parse the following JSON string in Python.", "output": "import json\n\ndata = '{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\n# parse the JSON string\nparsed_string = json.loads(data) \n\n# print the individual elements\nname = parsed_string[\"name\"]\nage = parsed_string[\"age\"]\ncity = parsed_string[\"city\"]\n\nprint(name)\nprint(age)\nprint(city)", "task_type": "coding"}
{"input": "Describe how dynamic programming works in programming.", "output": "Dynamic Programming is a technique for solving complex programming problems by breaking them down into a collection of subproblems. It allows optimal solutions to be efficiently computed by breaking a single problem into subproblems and combining their solutions. Dynamic Programming is used for both optimization and selection problems, where subproblems are solved by storing and reusing the solutions to subproblems already solved.", "task_type": "coding"}
{"input": "Merge two dictionaries into another dictionary", "output": "def merge(dict1, dict2):\n    \"\"\"\n    Function to merge two dictionaries\n    \"\"\"\n    return {**dict1, **dict2}\n\nif __name__ == '__main__':\n    dict1 = {'a':1, 'b':2}\n    dict2 = {'c':3, 'd':4}\n    print(merge(dict1, dict2))\n    # should print {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "task_type": "coding"}
{"input": "Design a HTML page with a header and 2 sections", "output": "<html>\n <head>\n  <title>MyPage</title>\n </head>\n <body>\n  <header>\n   <h1>Welcome to My Page</h1>\n  </header>\n  <section>\n   Content in Section 1\n  </section>\n  <section>\n   Content in Section 2\n  </section>\n </body>\n</html>", "task_type": "coding"}
{"input": "Train a sentiment classification model on the given data.", "output": "import nltk \nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n# Preprocess data\ntraining_data = [('I love this new phone!', 'positive'), ('This phone is terrible!', 'negative')]\nall_words = []\ndocuments = []\nfor (sent, category) in training_data:\n    words = word_tokenize(sent)\n    words = [word.lower() for word in words if word not in stopwords.words()]\n    documents.append((words, category))\n    all_words.extend(words)\n\n# Create feature set\ndistinct_words = set(all_words)\nfeature_set = [({word: (word in tokenized_sentence) for word in distinct_words}, category) for (tokenized_sentence, category) in documents]\n\n# Train model\nclassifier = nltk.NaiveBayesClassifier.train(feature_set)", "task_type": "coding"}
{"input": "Develop a classifier in Python to predict the language of a given text.", "output": "import nltk\n\nclass LanguageClassifier(object):\n\t\n    def __init__(self):\n        self.languages = []\n\t\n    def train(self, data):\n        train_sents = []\n        train_tags = []\n\n        # extract sentences and tags from data\n        for lang, sentences in data.items():\n            self.languages.append(lang)\n            train_sents.extend(sentences)\n            train_tags.extend([lang] * len(sentences))\n\n        # build featureset\n        feature_set = []\n        for (words, lang) in zip(train_sents, train_tags):\n            words_dict = dict([(word, True) for word in words])\n            feature_set.append((words_dict, lang))\n\t\n        # train classifier\n        self.classifier = nltk.NaiveBayesClassifier.train(feature_set)\n\n    def predict(self, sentence):\n        words_dict = dict([(word, True) for word in sentence])\n        return self.classifier.classify(words_dict)", "task_type": "coding"}
{"input": "Create a C++ class Student which contains name, age, and gender as members.", "output": "class Student {\n    private: \n        string name;\n        int age;\n        string gender;\n    public: \n        Student(string name, int age, string gender)\n            : name(name), age(age), gender(gender) { } \n            \n        string getName() {\n            return name;\n        }\n        \n        int getAge() {\n            return age;\n        }\n        \n        string getGender() {\n            return gender;\n        }\n};", "task_type": "coding"}
{"input": "Create a class in Java called 'Student' which has the following attributes: firstname, lastname, age, gender.", "output": "public class Student { \n   \n  private String firstname; \n  private String lastname; \n  private int age; \n  private String gender; \n   \n  public Student(String firstname, String lastname, int age, String gender) { \n    this.firstname = firstname; \n    this.lastname = lastname; \n    this.age = age; \n    this.gender = gender; \n  } \n   \n  // getters and setters \n}", "task_type": "coding"}
{"input": "Create a C++ class for managing a generic dictionary, in which keys and values can be of any data type.", "output": "template <typename K, typename V>\nclass Dictionary {\n    private:\n    std::map<K,V> m;\n     \n    public:\n    const V& get(const K& key) const {\n        return m[key];\n    }\n \n    void set(const K& key, const V& value) {\n        m[key] = value;\n    }\n};", "task_type": "coding"}
{"input": "Identify common elements between two given lists", "output": "def common_elements(list1, list2):\n    return set(list1).intersection(list2)\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]\n\nprint(common_elements(list1, list2))", "task_type": "coding"}
{"input": "Write a Bash script that finds the factorial of a given number.", "output": "#!/bin/bash\n\nnum=${1}\nfactorial=1\n\nif [ $num -lt 0 ]\nthen\n echo \"Please enter a positive number.\"\n exit 1\nfi\n\nif [ $num -gt 0 ]\nthen\n for (( i=1; i<=$num; i++ ))\n do\n  factorial=$[ $factorial * $i ]\n done\nfi\necho \"The factorial of $num is $factorial\"", "task_type": "coding"}
{"input": "Explain the main differences between Java and Python.", "output": "The main differences between Java and Python include speed of development, execution speed, type safety, readability and syntax ease, standard libraries, and code scalability. Java is more popular in enterprise applications and is generally faster to develop than Python because of its statically typed language. Java has a JVM (Java Virtual Machine) making it faster to compile and execute than Python, which is dynamically typed. Java is more type-safe and easier to debug, while Python is more readable and easier to learn. Python also has wider range of standard libraries than Java, making development faster. Python is more scalable than Java, making it applicable for larger projects.", "task_type": "coding"}
{"input": "Create a function to find the larger number in a given list.", "output": "def larger_num(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \nmyList = [18, 24, 34, 30]\nprint(larger_num(myList))", "task_type": "coding"}
{"input": "Create a class in Python to represent a bank account and add methods to display, withdraw, deposit and transfer money.", "output": "class BankAccount:\n    def __init__(self, customer_name, account_number, balance):\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.balance = balance\n\n    def display_balance(self):\n        print('Your balance is', self.balance)\n\n    def withdraw_amount(self, amount):\n        self.balance -= amount\n        print('You withdrew', amount, 'from your account.')\n\n    def deposit_amount(self, amount):\n        self.balance += amount\n        print('You deposited', amount, 'into your account.')\n\n    def transfer_amount(self, target_account, amount):\n        self.balance -= amount\n        target_account.balance += amount\n        print('You transferred', amount, 'to the account', target_account.account_number)", "task_type": "coding"}
{"input": "Explain why function scope is important in Python.", "output": "Function scope is important in Python because it allows for the scoping of data to the specific environment in which the function was invoked. This is critical for ensuring that code runs correctly and that variables are isolated to the environment in which the associated function was called. Scoping also helps promote the common programming practice of modularity and encapsulation, as it allows you to create \"black-boxes\" that separate the internal implementation of a function from the external environment. Scoping also helps to ensure that only the variables and data which are intended to be used within a function are actually used within it, as any variables which are out of scope will be inaccessible.", "task_type": "coding"}
{"input": "Write a C++ program to calculate the difference between two dates using the following function.", "output": "#include <iostream>\n#include <ctime>\n\nusing namespace std;\n\nint diffDates(time_t date1, time_t date2){\n  return difftime(date1, date2) / (60 *60 *24); // in days\n}\n\nint main(){\n  // example dates\n  time_t date1 = 0;\n  time_t date2 = time(0);\n  \n  cout << diffDates(date1, date2) << endl;\n  return 0;\n}", "task_type": "coding"}
{"input": "Construct a machine learning model in Python for the given dataset.", "output": "import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load dataset\ndataframe = pd.read_csv('student_income_data.csv')\n\n# split into input X and output y\nX = dataframe.iloc[:,:-1]\ny = dataframe.iloc[:,-1]\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\n\n# create model\nmodel = LinearRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)", "task_type": "coding"}
{"input": "Create a HTML form with three text fields (First Name, Last Name and Email).", "output": "<form>\n    <label for=\"first-name\">First Name:</label>\n    <input type=\"text\" id=\"first-name\" name=\"first-name\">\n    <br>\n    <label for=\"last-name\">Last Name:</label>\n    <input type=\"text\" id=\"last-name\" name=\"last-name\">\n    <br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\">\n</form>", "task_type": "coding"}
{"input": "Create a function to reverse a string.", "output": "\"\"\"\nReverse string\n\"\"\"\n\ndef reverse_string(s):\n    \"\"\"Reverse a given string.\n    \n    Args:\n        s (str): The string to reverse.\n        \n    Returns:\n        str: The reversed string.\n    \"\"\"\n    return s[::-1]\n    \nif __name__ == '__main__':\n    s = \"hello world\"\n    print(reverse_string(s))", "task_type": "coding"}
{"input": "Create a Java program which will print the following pattern.", "output": "public class Pattern {\n \n    public static void main(String[] args) {\n \n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= i; j++) {\n                System.out.print(i);\n            }\n            System.out.println();\n        }\n    }\n}\n\n// Output\n1\n22\n333\n4444\n55555", "task_type": "coding"}
{"input": "Write a Rust program to convert a string to title case.", "output": "fn to_title_case(s: String) -> String {\n    let words: Vec<&str> = s.split_whitespace().collect();\n    let mut title_cased = String::new();\n    for word in words {\n        let mut chars = word.chars();\n        title_cased.push_str(&chars.next().unwrap().to_uppercase().to_string());\n        for char in chars {\n            title_cased.push_str(&char.to_lowercase().to_string());\n        }\n        title_cased.push(' ');\n    }\n    title_cased.trim().to_string()\n\n}", "task_type": "coding"}
{"input": "Generate a sequence of prime numbers between a given range using the Sieve of Eratosthenes algorithm.", "output": "def sieve_of_eratosthenes(lower, upper):\n    # Create a list of prime numbers\n    prime_list = [True] * (upper + 1)\n    prime_list[0] = False\n    prime_list[1] = False\n\n    # Iterate over the list until the square root of the upper limit\n    for i in range(2, int(upper ** 0.5) + 1):\n        # If i is true, then it is prime\n        if prime_list[i]:\n            # Set all multiples of i to false\n            for j in range(i*i, upper + 1, i):\n                prime_list[j] = False\n\n    # Get the list of prime numbers between lower and upper\n    prime_nums = []\n    for i in range(lower, upper + 1):\n        if prime_list[i]:\n            prime_nums.append(i)\n\n    return prime_nums\n\nif __name__ == \"__main__\":\n    lower = 0\n    upper = 50\n    print(sieve_of_eratosthenes(lower, upper))", "task_type": "coding"}
{"input": "Create a basic REST API for getting information about weather for specific cities.", "output": "// This is a basic example of a REST API that returns weather information for specific cities.\n\napp.get('/weather', (req, res) => {\n  const cityNames = req.query.cities.split(',');\n  const cities = {\n    'New York City': { lat: 40.7128, lng: 74.0060 },\n    'Los Angeles': { lat: 34.0522, lng: 118.2437 },\n    'San Francisco': { lat: 37.7749, lng: 122.4194 },\n  }\n\n  let results = [];\n  for (const city of cityNames) {\n     results.push(getWeather(cities[city]));\n  }\n\n  res.send(results);\n});\n\nfunction getWeather({lat, lng}) {\n  // Code to make external API call to get weather information\n}", "task_type": "coding"}
{"input": "Design an HTML form to register users on a website.", "output": "<html>\n<head>\n    <title>User Registration Form</title>\n</head>\n<body>\n    <h1>Register a new user</h1>\n\n    <form action=\"register.php\" method=\"POST\">\n        <label>First Name:</label><br>\n        <input type=\"text\" name=\"firstName\" required><br><br>\n\n        <label>Last Name:</label><br>\n        <input type=\"text\" name=\"lastName\" required><br><br>\n\n        <label>Email:</label><br>\n        <input type=\"text\" name=\"email\" required><br><br>\n\n        <label>Password:</label><br>\n        <input type=\"password\" name=\"password\" required><br><br>\n\n        <input type=\"submit\" value=\"Register\">\n    </form>\n</body>\n</html>", "task_type": "coding"}
{"input": "Write a function to parse a string and return a dictionary where each character in the string is mapped to its frequency.", "output": "def get_frequency_map(string): \n    frequency_map = {}\n    # count the frequency of each character\n    for char in string: \n        if char in frequency_map:\n            frequency_map[char] += 1\n        else:\n            frequency_map[char] = 1\n    return frequency_map\n\nstring = \"hello world\"\n\nfrequency_map = get_frequency_map(string)\nprint(frequency_map)  # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}", "task_type": "coding"}
{"input": "Design a function in Python to automate the extraction of emails from a single HTML page.", "output": "def extract_emails(html_page):\n emails = []\n soup = BeautifulSoup(html_page)\n for a in soup.find_all('a'):\n  if a.get('href') and (a.get('href').startswith('mailto:')):\n  emails.append(a.get('href')[7:])\n return emails\n\n# Usage \npage = '<html>\n <body>\n  Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html>'\n\nemails = extract_emails(page)\nprint(emails)\n# Output: ['janice@example.com', 'susie@example.com']", "task_type": "coding"}
{"input": "Write a code to find the number of singular and plural words in a given paragraph.", "output": "let paragraph = \"This is a pleasant evening. I prefer to stay at home for the evening.\";\n\nlet words = paragraph.split(' ');\nlet countSingularWords = 0;\nlet countPluralWords = 0;\nfor (let i = 0; i < words.length; i++) {\n  let lastChar = words[i].charAt(words[i].length-1);\n  if (lastChar === 's') {\n    countPluralWords++;\n  } else {\n    countSingularWords++;\n  }\n}\n\nconsole.log(`Number of singular words = ${countSingularWords}`);\nconsole.log(`Number of plural words = ${countPluralWords}`);", "task_type": "coding"}
{"input": "Create a java program that checks if a given string has any special characters", "output": "public class CheckSpecialChar {\n\n    public static void main(String[] args) {\n        String str = \"This is a string!\";\n        boolean flag = false;\n        String specialChar = \"[^a-zA-Z0-9]\";\n        if(str.matches(specialChar))\n        {\n            flag = true;\n        }\n        System.out.println(\"Does the string contains special character : \" + flag);\n    }\n\n}", "task_type": "coding"}
{"input": "Create a Java class to find all substrings of a given string.", "output": "public class SubstringFinder {\n\n    public static List<String> findSubstrings(String str) {\n        List<String> substrings = new ArrayList<>();\n\n        for (int i = 0; i < str.length(); i++) {\n            for (int j = i + 1; j <= str.length(); j++) {\n                String substr = str.substring(i, j);\n                substrings.add(substr);\n            }\n        }\n        return substrings;\n    }\n}\n\nString str = \"Hello World\";\nSubstringFinder.findSubstrings(str);", "task_type": "coding"}
{"input": "Compute the sum of the prime numbers from 0 to n using Java.", "output": "public class PrimeSum{\n    public static int sumOfPrime(int n){\n        int sum = 0;\n        for(int i=2; i<=n; i++){\n            if(isPrime(i))\n                sum += i;\n        }\n        return sum;\n    }\n    private static boolean isPrime(int n){\n        for(int i=2; i<n; i++){\n            if(n%i == 0)\n                return false;\n        }\n        return true;\n    }\n}", "task_type": "coding"}
{"input": "Create an array of strings, such that it contains strings of all possible combinations of n characters from a given string of characters.", "output": "arr = [\"AAA\", \"AAB\", \"AAC\", \"ABA\", \"ABB\", \"ABC\", \"ACA\", \"ACB\", \"ACC\", \"BAA\", \"BAB\", \"BAC\", \"BBA\", \"BBB\", \"BBC\", \"BCA\", \"BCB\", \"BCC\", \"CAA\", \"CAB\", \"CAC\", \"CBA\", \"CBB\", \"CBC\", \"CCA\", \"CCB\", \"CCC\"]", "task_type": "coding"}
