{"input": "Create a MySQL database and table for storing customer information.", "output": "CREATE DATABASE customerDB;\n\nUSE customerDB;\n\nCREATE TABLE customers (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nname VARCHAR(50) NOT NULL,\naddress VARCHAR(50) NOT NULL,\nemail VARCHAR(50) NOT NULL,\nphone VARCHAR(20) NOT NULL,\ngender VARCHAR(10) NOT NULL\n);", "task_type": "coding"}
{"input": "Write an HTML page from scratch to display a user's contact information.", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>John Doe's Contact Information</title>\n</head>\n<body>\n    <h2>John Doe</h2>\n    <p>Age: 46</p>\n    <p>Phone: +1 (312) 555-4879</p>\n    <p>Email: john.doe@example.com</p>\n</body>\n</html>", "task_type": "coding"}
{"input": "Create a function in Java to generate Fibonacci numbers up to n.", "output": "public class Fibonacci { \n    public static int fibonacci(int number){ \n        if(number == 1 || number == 2){ \n            return 1; \n        } \n        return fibonacci(number-1) + fibonacci(number -2); //tail recursion  \n    } \n       \n    public static void printFibonacci(int number){ \n        for(int i = 1; i <= number; i++){ \n            System.out.print(fibonacci(i) +\" \"); \n        } \n    } \n}", "task_type": "coding"}
{"input": "Design a function which can check if a given year is a leap year", "output": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False", "task_type": "coding"}
{"input": "Suggest an appropriate data structure and implementation to store employee details", "output": "An appropriate data structure to store employee details is a dictionary. A dictionary maps each employee's name (or other identifier) to a dictionary that holds the employee's title, contact number and other relevant information. For example, the code to define an employee dictionary might look like this:\n\nemployees = {}\n\n#add new employee\nemployees['John'] = {'title': 'Manager', 'phone': '123-456-7890'}\n\n#access employee details\nprint(employees['John']['phone']) # prints '123-456-7890'", "task_type": "coding"}
{"input": "Generate a program in Go for printing the first 10 prime numbers.", "output": "func printFirstTenPrime(){\n    count := 0\n    for i := 1; ; i++ {\n        if (isPrime(i)) {\n            fmt.Printf(\"%d \", i)\n            count++;\n        }\n        if (count == 10) {\n            break\n        }\n    }\n    fmt.Println()\n}\n\nfunc isPrime(num int) bool {\n    for i := 2; i <= num/2; i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}", "task_type": "coding"}
{"input": "Design a data structure to store a list of names of the student with their respective grades in a class.", "output": "class StudentGrades:\n    def __init__(self, names, grades):\n        self.names = names\n        self.grades = grades\n    \n    def add_entry(self, name, grade):\n        self.names.append(name)\n        self.grades.append(grade)\n        \n    def get_grade(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n               return self.grades[i]", "task_type": "coding"}
{"input": "What is the principal difference between a linked list and an array?", "output": "The principal difference between a linked list and an array is that a linked list is a collection of points that each point to their respective memory locations, while an array is a contiguous block of memory locations. A linked list has the advantage of being able to insert and delete nodes at any time, while the elements of an array must be shifted to make room for new elements. Similarly, linked lists do not require a pre-allocated block of memory, so it is more memory efficient than an array.", "task_type": "coding"}
{"input": "Create an algorithm that can recognize handwriting.", "output": "The algorithm should use pre-processing techniques like image cropping, normalization, and thresholding to convert the raw input image into a binary image. It should then use feature extraction techniques like contours, corner detection, and Hough Transform to detect and separate the characters from the image. The algorithm should then use machine learning techniques like error-backpropagation and convolutional neural networks to classify and recognize the characters in the image.", "task_type": "coding"}
{"input": "Write an algorithm to calculate the median of a given array.", "output": "Step 1: Start \nStep 2: Set an empty array, called median_arr.\nStep 3: Sort the given array.\nStep 4: Check if the length of the array is even or odd. \nStep 5: If even, calculate the average of the middle two elements and store it in median_arr. \nStep 6: If odd, store the middle element in the median_arr.\nStep 7: Return the array median_arr containing the median. \nStep 8: End.", "task_type": "coding"}
{"input": "Create a new table in a database named 'customers' with the specified columns.", "output": "CREATE TABLE customers (\n  id int NOT NULL AUTO_INCREMENT, \n  firstname varchar(45) NOT NULL, \n  lastname varchar(45) NOT NULL, \n  address varchar(100) NOT NULL, \n  phone varchar(20) NOT NULL, \n  email varchar(45) NOT NULL, \n  PRIMARY KEY (id)\n);", "task_type": "coding"}
{"input": "Write Java code to generate a matrix of size n.", "output": "public static int[][] generateMatrix(int n){\n    int[][] matrix = new int[n][n];\n    \n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            matrix[i][j] = i * n + j;\n        }\n    }\n    \n    return matrix;\n}", "task_type": "coding"}
{"input": "Explain the following PHP code.", "output": "The above PHP code first initializes two string variables, $string1 and $string2, with the strings \"Hello\" and \"World\" respectively. Then, it uses the string concatenation operator (.) to combine the two strings together, separated by a space, and prints the result using the echo function. The result of the above code will be \"Hello World\".", "task_type": "coding"}
{"input": "Create a program that prints the greatest common divisor between two numbers.", "output": "def gcd(num1, num2): \n      \n    if(num2 == 0): \n        return num1 \n    else: \n        return gcd(num2, num1 % num2) \n  \n# Driver code \nnum1 = 99\nnum2 = 77\nprint (\"The GCD of\", num1, \"and\", num2, \"is\", gcd(num1, num2))", "task_type": "coding"}
{"input": "Write an assembly language program to check if a given number is least in its sequence.", "output": ".model small\n.stack 100h\n.data\n\nnum dw 5 \n.code\n\nstart:\nmov ax, @data\nmov ax, num\ncmp ax, [num+2] ; compare current number with the next number\njbe least ; if current number is lesser or equal jump to least \n\n;code to print least number\nleast:\nmov ah, 9\nmov dx, offset num\nint 21h\n\nmov ah, 4Ch\nint 21h\nend start", "task_type": "coding"}
{"input": "Programmatically generate 10 random numbers between 0 and 1.", "output": "import random \n\nfor x in range(10): \n  print(random.random()) \n\nOutput: 0.06344054085111036 0.2881477132700741 0.17747003808770072 0.4838670382036148 0.8504676489597706 0.6951969864720918 0.3444948373996736 0.251203536083174 0.603054609456176 0.8579147959146845", "task_type": "coding"}
{"input": "Write Pseudocode for a simple sorting algorithm that sorts an input array.", "output": "FUNCTION Sort(input)\n  SET i to 0\n  WHILE i < LENGTH OF input\n    SET max to i\n    SET j to i + 1\n    WHILE j < LENGTH OF input\n      IF input[j] > input[max] THEN\n        SET max to j\n      END IF\n      SET j to j + 1\n    END WHILE\n    IF max != i THEN\n      SWAP input[i] with input[max]\n    END IF\n    SET i to i + 1\n  END WHILE \nRETURN input\nEND FUNCTION", "task_type": "coding"}
{"input": "Suggest code to delete an element from a linked list in Java.", "output": "// Function to delete a node in a linked list. \nvoid deleteNode(Node head_ref, Node del) \n{ \n    // base case \n    if (head == null || del == null) \n        return; \n  \n    // If node to be deleted is head node \n    if (head == del) \n        head = del.next; \n  \n    // Change next only if node to be \n    // deleted is NOT the last node \n    if (del.next != null) \n    { \n        del.data = del.next.data; \n        del.next = del.next.next; \n    } \n  \n    // if node to be deleted is last node \n    else\n    { \n        Node temp = head; \n        while (temp.next != del) \n            temp = temp.next; \n  \n        temp.next = null; \n    } \n    return; \n}", "task_type": "coding"}
{"input": "Identify and explain the purpose of a Turing Test.", "output": "A Turing Test is a measurement of a machine's ability to exhibit intelligent behaviour equivalent to, or indistinguishable from, that of a human. The test was proposed by Alan Turing in 1950 as a way of determining whether a machine is capable of intelligent thought. The Turing Test consists of a human evaluator interacting with both a human subject and a machine by asking questions and judging the responses. If the evaluator cannot determine the difference between the machine and the human subject, then the machine has passed the test. The purpose of the Turing Test is to provide a reliable method for determining if a machine is able to think and act intelligently.", "task_type": "coding"}
{"input": "Design a simple user authentication system with a login page and logout page.", "output": "Create a separate directory containing HTML files for the login and logout pages. \nThe login page should contain a form with fields for the user to enter their username and password. \nOn successful validation, the user will be redirected to the home page. \nOn the logout page, provide a link to destroy the user session and log the user out of the system.", "task_type": "coding"}
{"input": "Create a program in Ruby that encrypts the given data using AES-256 encryption algorithm.", "output": "require 'openssl'\nrequire 'base64'\n\ndef aes_encrypt(data, key)\n  aes = OpenSSL::Cipher::AES.new(256, :ECB)\n  aes.encrypt\n  aes.key = key\n\n  encrypted_data = aes.update(data) + aes.final\n  Base64.encode64(encrypted_data).gsub(\"\\n\", '')\nend\n\nputs aes_encrypt(\"Hello, I'm a secret message to be encrypted!\", '1234567890123456')", "task_type": "coding"}
{"input": "Write a JavaScript code to print the first 10 terms of the Fibonacci series.", "output": "let a = 0, b = 1, c, limit = 10;\n\nconsole.log(\"Fibonacci Series of \"+limit+\" numbers:\");\n\nfor(var i=0; i < limit; i++){\n    if(i<=1){\n        c=i;\n    }\n    else{\n        c=a+b;\n        a=b;\n        b=c;\n    }\n    \n    console.log(c);\n}", "task_type": "coding"}
{"input": "Given a list of numbers, write a function in Java to arrange the list in ascending order.", "output": "static int[] sortAscending(int[] nums) {\n    for (int i = 0; i < nums.length-1; i++) {\n        for (int j = 0; j < nums.length-1-i; j++) {\n            if (nums[j] > nums[j+1]) {\n                int temp = nums[j];\n                nums[j] = nums[j+1];\n                nums[j+1] = temp;\n            }\n        }\n    }\n    return nums;\n}", "task_type": "coding"}
{"input": "Suggest an algorithm to remove duplicates from an array.", "output": "def remove_duplicates(arr):\n    # Create a seen set\n    seen = set()\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If element is already seen, remove it\n        if arr[i] in seen:\n            del arr[i]\n        # Else add element to seen set\n        else:\n            seen.add(arr[i])\n    return arr", "task_type": "coding"}
{"input": "Create a method called `combineName` that takes in two strings and combines them together into a full name.", "output": "def combineName(firstName, lastName):\n    \"\"\"\n    A method that takes in two strings and combines them into a full name.\n    Args: \n     firstName (str): first name \n     lastName (str): last name\n    Returns:\n     fullName (str): combined full name \n    \"\"\" \n    fullName = firstName + \" \" + lastName\n    return fullName\n    \nif __name__ == '__main__':\n    firstName = 'John'\n    lastName = 'Smith'\n    print(combineName(firstName, lastName))", "task_type": "coding"}
{"input": "Create an HTML form to display a list of countries and its corresponding capital.", "output": "<form>\n  <select>\n    <option value=\"-1\">--- select country ---</option>\n    <option value=\"India\">India - Delhi</option> \n    <option value=\"China\">China - Beijing</option>\n    <option value=\"USA\">USA - Washington D.C.</option>\n    <option value=\"Australia\">Australia - Canberra</option>\n  </select>\n</form>", "task_type": "coding"}
{"input": "Create a class to store student names, ages and grades.", "output": "class Student:\n  def __init__(self,name,age,grade):\n    self.name = name\n    self.age = age\n    self.grade = grade\n\n  def get_name(self):\n    return self.name\n\n  def set_name(self,name):\n    self.name = name\n\n  def get_age(self):\n    return self.age\n\n  def set_age(self,age):\n    self.age = age\n\n  def get_grade(self):\n    return self.grade\n\n  def set_grade(self,grade):\n    self.grade = grade", "task_type": "coding"}
{"input": "Develop a classification algorithm in Python to predict whether a bird is a hawk or a falcon.", "output": "import pandas as pd\nimport numpy as np\n\n# Define features\nfeatures = [\"wing_shape\", \"size\", \"tails_length\", \"color_pattern\"] \n\n# Load the data\ndata = pd.read_csv(\"birds.csv\")\n\n# Preprocess the data to generate feature vectors\nX = np.array(data[features]) \n\n# Make a target vector \ny = np.array(data[\"species\"]) \n\n# Divide the data into training and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a classification model\nfrom sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Generate evaluation metrics\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Model accuracy: %.2f\" % accuracy)", "task_type": "coding"}
{"input": "Describe the purpose of the else statement in an if-else statement.", "output": "The else statement in an if-else statement is used to execute a block of code when the expression in the if statement returns false. It provides an alternate option if the condition in the if statement is not satisfied. The else statement can be followed by an additional if-else statement in order to create an if-else-if ladder.", "task_type": "coding"}
{"input": "Create a program to find the longest substring with unique characters", "output": "def longest_substring(string): \n    n = len(string) \n  \n    ''' Initialization of stings, \n    a and b ''' \n    a = \"\" \n    b = \"\"  \n  \n    ''' Initialization of maximum length substring \n    having distinct characters ''' \n    maxlen = 0  \n  \n    ''' 1. Pick starting point \n    2. intialise substrng \"a\"\n    3. Find the longest such \n    substring by comparing \n    current and previous  \n    substring ''' \n    for i in range(n):\n        a += string[i] \n        b = \"\" \n        for j in range(i + 1, n): \n            if string[j] not in a:              \n                b += string[j] \n            else: \n                break\n        if len(a) > maxlen: \n            maxlen = len(a) \n        a += b\n    return maxlen", "task_type": "coding"}
{"input": "Write a function that can generate all permutations of a given string.", "output": "def permute(string):\n    if len(string) == 1:\n        return [string] \n\n    prevList = permute(string[1:]) \n\n    nextList = [] \n    for i in range(len(prevList)): \n        for j in range(len(string)): \n            newString = prevList[i][:j] + string[0:1] + prevList[i][j:] \n            if newString not in nextList: \n                nextList.append(newString) \n    return nextList", "task_type": "coding"}
{"input": "Write a code to compare two lists and find the common elements.", "output": "def find_common(list1, list2):\n    # initial list to store common elements\n    result = []\n\n    # iterate through the list\n    for num in list1:\n        # check if the number is in list2\n        if num in list2:\n            # append the element\n            result.append(num)\n\n    return result\n    \nprint(find_common(list1, list2))", "task_type": "coding"}
{"input": "Make a HTML page that displays a table displaying numbers from 1 to 10.", "output": "<html>\n  <body>\n    <h1>Table showing numbers from 1 to 10</h1>\n    <table>\n      <tr>\n        <th>Number</th>\n      </tr>\n      <tr>\n        <td>1</td>\n      </tr>\n      <tr>\n        <td>2</td>\n      </tr>\n      <tr>\n        <td>3</td>\n      </tr>\n      <tr>\n        <td>4</td>\n      </tr>\n      <tr>\n        <td>5</td>\n      </tr>\n      <tr>\n        <td>6</td>\n      </tr>\n      <tr>\n        <td>7</td>\n      </tr>\n      <tr>\n        <td>8</td>\n      </tr>\n      <tr>\n        <td>9</td>\n      </tr>\n      <tr>\n        <td>10</td>\n      </tr>\n    </table>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Write a code to group the elements in a list into a dictionary with the list element as the key and the number of times the element is repeated in the list as the value.", "output": "def group_list(list): \n  result = {} \n  for element in list: \n    if element in result: \n      result[element] += 1 \n    else: \n      result[element] = 1 \n  \n  return result \n\nlist = [1, 2, 2, 2, 3, 3, 4, 4, 5] \nresult = group_list(list) \nprint(result) #{1: 1, 2: 3, 3: 2, 4: 2, 5: 1}", "task_type": "coding"}
{"input": "List all the methods available in axelrod python library", "output": "Methods available in axelrod Python library are constructor method, player_names method, init method, play method, get_history method, reset method, sign_string method, find_conformers method, oppose_strategy method, strategy method, final_score method, cooperation method, defect method, normalised_score method, and elo_rating method.", "task_type": "coding"}
{"input": "Write a permutation function which takes a given string and returns all the possible permutations.", "output": "function permutate(str){\n  if (str.length <= 1) {\n    return str;\n  } \n  let permutations = []; \n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    // excluding the character from the string\n    let remainingString = str.slice(0, i) + str.slice(i + 1, str.length);\n    // recursively call the function\n    for (let subPermutation of permutate(remainingString)) {\n      permutations.push(char + subPermutation);\n    }\n  }\n  return permutations;\n}\n\nconst possiblePermutations = permutate(\"abc\");\n\n// Output: [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", "task_type": "coding"}
{"input": "Develop a Java program to input a string and reverse the order of words.", "output": "Java in code to love I \n\npublic class Reverse { \n    \n    static void reverseWords(String str)  \n    {  \n          \n        // Specific marker to identify the strings \n        String[] words = str.split(\"\\\\s\"); \n          \n        String reversedString = \"\"; \n          \n        for (int i = 0; i < words.length; i++)  \n        { \n            String word = words[i]; \n            String reverseWord = \"\"; \n              \n            for (int j = word.length()-1; j >= 0; j--) \n            { \n                reverseWord = reverseWord + word.charAt(j); \n            } \n              \n            reversedString = reversedString + reverseWord + \" \"; \n        } \n          \n        System.out.println(str); \n          \n        System.out.println(reversedString); \n    } \n      \n    public static void main(String[] args)  \n    { \n        reverseWords(\"I love to code in Java\"); \n    } \n}", "task_type": "coding"}
{"input": "Build an HTML table with 3 columns and 5 rows using JavaScript.", "output": "var htmlTable = '<table border=\"1\">';\n\n// Create the table rows \nfor (var i = 0; i < 5; i++){\n  htmlTable += '<tr>';\n\n  // Create the table columns\n  for (var j = 0; j < 3; j++){\n    htmlTable += \"<td></td>\";\n  }\n \n  htmlTable += \"</tr>\";\n}\n \nhtmlTable += \"</table>\";", "task_type": "coding"}
{"input": "Explain the function of a variable in programming.", "output": "In programming, a variable is a named storage location that can hold a value. Variables are used to store values that can be manipulated or referenced in a program. Variables can be used to hold numbers, text, or other types of data. They can also be used to store values or objects that are accessed or changed by a program. This allows a program to be dynamic and adaptable to ever-changing inputs and data.", "task_type": "coding"}
{"input": "Write a function to shift the elements of a list by one position to the left.", "output": "def shift_left(arr): \n    # Shifting the array elements from position 1 to n-1 \n    for i in range(1, len(arr)): \n        arr[i - 1] = arr[i] \n  \n    # Replacing the last element with 0 \n    arr[len(arr) - 1] = 0\n    return arr", "task_type": "coding"}
{"input": "Explain how you would use the givew array to create a valid JSON output.", "output": "We can use the given array to create a valid JSON output by first converting it into an object by wrapping it in curly brackets and then assign keys for each value. For example, \n{\n  \"firstname\": \"Nikola\", \n  \"lastname\": \"Tesla\", \n  \"birthdate\": \"10-07-1856\"\n }\nOnce the object is created, it need to be converted to a JSON string using a JSON library such as JSON.stringify() method in JavaScript. The resulting string looks like this:\n\n\"{\\\"firstname\\\":\\\"Nikola\\\",\\\"lastname\\\":\\\"Tesla\\\",\\\"birthdate\\\":\\\"10-07-1856\\\"}\"", "task_type": "coding"}
{"input": "Separate odd numbers from an array and store them in a different array.", "output": "const oddNumbers = (arr) => {\n    const odd = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 !== 0) {\n            odd.push(arr[i]);\n        }\n    }\n\n    return odd;\n};\n\nlet odds = oddNumbers(array);\nconsole.log(odds); // Output: [1, 3, 5, 7, 9]", "task_type": "coding"}
{"input": "Create a method to validate an email address in Java.", "output": "public static boolean isValidEmail(String str) {\n    String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.\"+\n                        \"[a-zA-Z0-9_+&*-]+)*@\" +\n                        \"(?:[a-zA-Z0-9-]+\\\\.)+[a-z\" +\n                        \"A-Z]{2,7}$\";\n    Pattern pat = Pattern.compile(emailRegex);\n    if (str == null)\n        return false;\n    return pat.matcher(str).matches();\n}", "task_type": "coding"}
{"input": "Parse and save the following article in a dataset.", "output": "{\n    \"team\": \"Boston Celtics\", \n    \"player\": \"Gordon Hayward\", \n    \"contract\": \"Four-year deal\", \n    \"recent_record\": \"teams worst record since 2007\", \n    \"average_points\": 10.7, \n    \"average_rebounds\": 5\n}", "task_type": "coding"}
{"input": "How can you optimize the following code snippet?", "output": "A nested loop can be optimized by moving out common calculations from the inner loop. In this example, the loop can be optimized by replacing the two nested loops with a single loop of length n^2.\n\n for (int i = 0; i < n*n; i++) \n { \n     int row = i/n \n     int col = i%n \n     // your operations \n }", "task_type": "coding"}
{"input": "Write an Objective-C program for printing the factorial of a number 5.", "output": "#include <stdio.h>\n\nint factorial(int n)\n{\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nint main()\n{\n    int input = 5;\n    int result = factorial(input);\n    printf(\"The factorial of %d is %d\", input, result);\n    return 0;\n}", "task_type": "coding"}
{"input": "Create a sass function to change the text color of a web page", "output": "@function text-color($text-color, $background-color) {\n  // Calculate how much Black and White needs to be in the text to be readable\n  $res: 0;\n  $black: 0;\n  $white: 0;\n\n  @if (lightness($background-color) > 50) {\n    // Use black on light backgrounds\n    $black: 100%;\n    $white: (1 - ( (255 - ( lightness($text-color) * 2.55)) / ( lightness($background-color) * 2.55 ) ) ) * 100%;\n  } @else {\n    // Use white on dark backgrounds\n    $black: (1 - (( lightness($text-color) * 2.55) / ( 255 - (lightness($background-color) *  2.55)))) * 100%;\n    $white: 100%;\n  }\n\n  $res: ( $black < $white ) ? mix(black, $text-color, $black) : mix(white, $text-color, $white );\n\n  @return $res;\n\n}", "task_type": "coding"}
{"input": "Create a web page that has a button to toggle a navigation bar.", "output": "<html>\n<head>\n    <title>Menu toggle example</title>\n</head>\n<body>\n    <h1>Toggle Menu</h1>\n    <div id=\"menu-container\">\n        <a href=\"link1.html\">Link 1</a>\n        <a href=\"link2.html\">Link 2</a>\n        <a href=\"link3.html\">Link 3</a>\n    </div>\n    <button id=\"toggle-menu\">Toggle Menu</button>\n    \n    <script>\n        let toggleButton = document.getElementById('toggle-menu');\n        let menuContainer = document.getElementById('menu-container');\n        \n        toggleButton.onclick = function(){\n            if (menuContainer.style.display == 'none'){\n                menuContainer.style.display = 'block';\n            }\n            else {\n                menuContainer.style.display = 'none';\n            }\n        }\n    </script>\n</body>\n</html>", "task_type": "coding"}
{"input": "Create an array in JavaScript of 10 numbers ranging from 1 to 100.", "output": "// Create an array of 10 numbers ranging from 1 to 100\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\narray = array.map(num => num * 10);\nconsole.log(array); // [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "task_type": "coding"}
{"input": "Write code to convert a given number expressed in hexidecimal representation to binary.", "output": "def hex_to_bin(hex_str):\n    #validating the input\n    if hex_str[-1] not in \"0123456789ABCDEF\":\n        return \"Invalid Hexadecimal!!\"\n     \n    #using bin() function to get the binary value  \n    return bin(int(hex_str, 16))[2:]", "task_type": "coding"}
{"input": "Analyze the following code and answer the following question: Is there a bug in this code?", "output": "Yes, there is a bug in this code. The function `foo` does not have a base case and will cause an infinite recursion if it is called with a non-zero argument. The base case should be if `num == 0` then `return 1` else `return foo(num - 1)`.", "task_type": "coding"}
{"input": "Implement Merge Sort algorithm in C++", "output": "#include <iostream> \nusing namespace std; \n  \nvoid merge(int arr[], int l, int m, int r) \n{ \n    int i, j, k; \n    int n1 = m - l + 1; \n    int n2 =  r - m; \n  \n    int L[n1], R[n2]; \n  \n    for (i = 0; i < n1; i++) \n        L[i] = arr[l + i]; \n    for (j = 0; j < n2; j++) \n        R[j] = arr[m + 1+ j]; \n  \n    i = 0;  \n    j = 0; \n    k = l;   \n    while (i < n1 && j < n2) \n    { \n        if (L[i] <= R[j]) \n        { \n            arr[k] = L[i]; \n            i++; \n        } \n        else\n        { \n            arr[k] = R[j]; \n            j++; \n        } \n        k++; \n    } \n  \n    while (i < n1) \n    { \n        arr[k] = L[i]; \n        i++; \n        k++; \n    } \n  \n    while (j < n2) \n    { \n        arr[k] = R[j]; \n        j++; \n        k++; \n    } \n} \n  \nvoid mergeSort(int arr[], int l, int r) \n{ \n    if (l < r) \n    { \n        int m = l+(r-l)/2; \n  \n        mergeSort(arr, l, m); \n        mergeSort(arr, m+1, r); \n  \n        merge(arr, l, m, r); \n    } \n}", "task_type": "coding"}
{"input": "Design a basic HTML page with a header, footer and a body section.", "output": "<html>\n <head>\n  <title>My HTML Page</title>\n </head>\n <body>\n  <header>\n   <h1>My Website</h1>\n  </header>\n  <main>\n   This is the main content of the page.\n  </main>\n  <footer>\n   Copyright 20", "task_type": "coding"}
{"input": "Generate a list of valid HTML tags used to structure content in a page.", "output": "- <html>\n- <title>\n- <head>\n- <body>\n- <header>\n- <nav>\n- <main>\n- <article>\n- <section>\n- <aside>\n- <footer>\n- <h1>, <h2>, <h3>, ... <h6>\n- <p>\n- <ul>, <ol>\n- <li>\n- <div>\n- <span>\n- <img>\n- <table>\n- <tr>, <th>, <td>", "task_type": "coding"}
{"input": "Write a Python script to parse given web pages and extract links from it.", "output": "\"\"\"\nWrite a Python script to parse given web pages and extract links from it\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef extract_links(url):\n    response = requests.get(url)\n    data = response.text\n    soup = BeautifulSoup(data, 'html.parser')\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get('href'))\n    return links\n\nif __name__ == '__main__':\n    print(extract_links('https://example.com'))", "task_type": "coding"}
{"input": "Create a web page with a table of 4 columns and a submit button to submit the table data.", "output": "<html>\n <head></head>\n <body>\n  <form>\n   <table>\n    <thead>\n     <tr><th>Column 1</th><th>Column 2</th><th>Column 3</th><th>Column 4</th></tr>\n    </thead>\n    <tbody>\n     <!-- your content here -->\n    </tbody>\n   </table>\n   <input type=\"submit\" value=\"Submit Table Data\" />\n  </form>\n </body>\n</html>", "task_type": "coding"}
{"input": "What is an example of an algorithm for solving Sudoku?", "output": "One example algorithm for solving Sudoku is called 'Backtracking'. This algorithm works by first filling in possible solutions for the empty cells, then using a series of rules to determine the correct answer. The algorithm starts with each cell of the Sudoku and tries different numbers for it until a solution is found. If a solution is not found, it backtracks and tries a different number. This process is repeated until all cells have been filled in with the correct numbers, or there is no solution.", "task_type": "coding"}
{"input": "Implement Binary Search in Python", "output": "# function to do binary search\ndef binarySearch(array, x): \n    l, r = 0, len(array)-1 \n    while l <= r: \n  \n        mid = l + (r - l)//2; \n          \n        # Check if x is present at mid \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif array[mid] < x: \n            l = mid + 1\n  \n        # If x is smaller, ignore right half \n        else: \n            r = mid - 1\n      \n    # If we reach here, then the element \n    # was not present \n    return -1\n  \narray = [2, 3, 4, 5, 11, 19, 20] \nx = 11\n\nresult = binarySearch(array, x) \nif result != -1: \n    print (\"Element is present at index\", \n            result) \nelse: \n    print (\"Element is not present in array\")", "task_type": "coding"}
{"input": "Write a Python function that takes in one argument and prints out the Fibonacci number for that argument.", "output": "def Fibonacci(x): \n    if x == 0: \n        return 0\n    elif x == 1: \n        return 1\n    else: \n        return Fibonacci(x-1)+Fibonacci(x-2) \n\nif __name__ == '__main__':\n    print(Fibonacci(5))  # Output: 5", "task_type": "coding"}
{"input": "Suggest a way of preserving the order of elements in a JavaScript array using a set data structure.", "output": "A Set data structure can be used for preserving the order of elements in a JavaScript array. To achieve this, the Set can be initialized with an array which contains the elements in the desired order. When adding elements to the Set, they will be added in the same order as they appear in the original array. This ensures the order of elements is preserved.", "task_type": "coding"}
{"input": "How can one retrieve data from a web server using Node.js?", "output": "Using Node.js, one can retrieve data from a web server by making an HTTP request. This can be accomplished using the built-in 'http' module, or by using a third-party library such as Request or Axios. After making the request, the response from the server must be handled and the data can then be processed.", "task_type": "coding"}
{"input": "Create a HTML form with all the necessary fields to input user information, such as name, email, phone number, etc.", "output": "<form>\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" name=\"name\" placeholder=\"Enter your name\"><br>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" name=\"email\" placeholder=\"Enter your email\"><br>\n  <label for=\"phone\">Phone:</label><br>\n  <input type=\"tel\" name=\"phone\" placeholder=\"Enter your phone number\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "task_type": "coding"}
{"input": "Find a way to insert the given data into a MongoDB database using Mongoose.", "output": "const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name: {\n    type: String\n  },\n  age: {\n    type: Number\n  }\n});\n\nconst User = mongoose.model('User', userSchema);\n\ndata.forEach( (user) => {\n  const newUser = new User(user);\n  newUser.save()\n    .then( () => console.log('User saved') )\n    .catch( err => console.log(err))\n});", "task_type": "coding"}
{"input": "Create an algorithm to detect whether an array is sorted in a given order.", "output": "def is_sorted(arr, order = \"asc\"):\n    #check if array is sorted in ascending or descending order\n    if order == \"asc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n    elif order == \"desc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] < arr[i+1]:\n                return False\n    else:\n        print(\"Error: Invalid sort order!\")\n    return True", "task_type": "coding"}
{"input": "How can you sort a list of integers by their absolute value in Python?", "output": "You can sort a list of integers by their absolute value using the sort() method. For example: \n \nnumbers = [2, -1, 5, 0, -4] \nnumbers.sort(key = lambda x: abs(x)) \nprint(numbers)\n# Output: [0, -1, 2, -4, 5]", "task_type": "coding"}
{"input": "Write a code to output a substring of the given string", "output": "\"\"\"\nWrite a code to output a substring of the given string\n\"\"\"\n\ndef substring(inp_str, start, end):\n    return inp_str[start:end]\n\nif __name__ == '__main__':\n    inp_str = \"Hello World\" \n    start = 3\n    end = 5\n    print(substring(inp_str, start, end))", "task_type": "coding"}
{"input": "Construct a decision tree for a given dataset", "output": "Buy? \n             No -----------> No\n            /              \\\n          No                Yes \n         /                  \\\n   Age/Income            Car = Yes\n  0-25/0-25k ------------> Yes\n /         \\\nNo          >25k --------> Yes\n            /\n          No ----------------> No", "task_type": "coding"}
{"input": "What is the meaning of the modulo operator in python?", "output": "In Python, the modulo operator (also known as the “remainder” or “modulus” operator) is the percentage sign (%). It is used to calculate the remainder after division of one number by another. For example, the expression “7 % 3” will evaluate to 1. This means that the remainder after 7 is divided by 3 is 1. Generally, the syntax for this operation is “a % b”, where a and b are numbers. The result of this operation is the remainder after a is divided by b.", "task_type": "coding"}
{"input": "Generate a Java program to sort an array of n elements in ascending order", "output": "public static void sort(int arr[]) \n{ \n    int n = arr.length; \n  \n    // Build heap (rearrange array) \n    for (int i = n / 2 - 1; i >= 0; i--) \n        heapify(arr, n, i); \n  \n    // One by one extract an element from heap \n    for (int i=n-1; i>=0; i--) \n    { \n        // Move current root to end \n        int temp = arr[0]; \n        arr[0] = arr[i]; \n        arr[i] = temp; \n  \n        // call max heapify on the reduced heap \n        heapify(arr, i, 0); \n    } \n} \n  \n// To heapify a subtree rooted with node i which is \n// an index in arr[]. n is size of heap \nstatic void heapify(int arr[], int n, int i) \n{ \n    int largest = i; // Initialize largest as root \n    int l = 2*i + 1; // left = 2*i + 1 \n    int r = 2*i + 2; // right = 2*i + 2 \n  \n    // If left child is larger than root \n    if (l < n && arr[l] > arr[largest]) \n        largest = l; \n  \n    // If right child is larger than largest so far \n    if (r < n && arr[r] > arr[largest]) \n        largest = r; \n  \n    // If largest is not root \n    if (largest != i) \n    { \n        int swap = arr[i]; \n        arr[i] = arr[largest]; \n        arr[largest] = swap; \n  \n        // Recursively heapify the affected sub-tree \n        heapify(arr, n, largest); \n    } \n}", "task_type": "coding"}
{"input": "Use the function to debug the given program and prevent the segmentation fault.", "output": "#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // Limit loop size to the length of the array\n    for (i = 0; i < n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}", "task_type": "coding"}
{"input": "Implement a function to check whether a given array contains an odd number or not.", "output": "def check_odd(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \narray = [2, 3, 5, 9, 22, 13] \nif (check_odd(array)): \n    print(\"Array contains an odd number\") \nelse: \n    print(\"Array does not contain an odd number\")", "task_type": "coding"}
{"input": "Write a code to check if a string contains only digits and output true or false.", "output": "def is_digits(str):\n    \"\"\"Checks if a string contains only digits.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    return str.isdigit()\n\nif __name__ == '__main__':\n    string = \"1234567890\"\n    print(is_digits(string))", "task_type": "coding"}
{"input": "Compose a program to create a dictionary of characteristics from a given list .", "output": "def create_characterstic_dictionary(itemList):\n    out = {}\n    for item in itemList:\n        out[item] = len(item)\n    return out\n\nif __name__ == '__main__':\n    itemList = [\"Apple\", \"Orange\", \"Grapes\", \"Bananas\", \"Watermelons\"]\n    print(create_characterstic_dictionary(itemList))", "task_type": "coding"}
{"input": "Explain the concept of Convolutional Neural Networks.", "output": "Convolutional Neural Networks (CNNs) are a type of deep learning neural network used primarily in image processing, computer vision, and natural language processing tasks. CNNs utilize a grid of neurons that learn to extract relevant features from an input, such as patterns or shapes, known as filters. This allows CNNs to perform hierarchical feature extraction from input data, which is useful in areas where the data has a nonlinear or highly structured nature. CNNs can be used to classify images, detect objects in images, extract features from audio and video signals, and much more.", "task_type": "coding"}
{"input": "Write a Java program that creates two arrays and prints out the difference in number of elements between them.", "output": "public class ArraySizeDiff {\n    public static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int[] arr2 = {1, 2, 3};\n\n        int diff = arr1.length - arr2.length;\n        System.out.println(\"Difference in number of elements between the two arrays is: \" + diff);\n    }\n}", "task_type": "coding"}
{"input": "Generate a new list with all the even numbers from the given list", "output": "# Generating a new list with all the even numbers from the given list\n\ndef get_even_numbers(input_list):\n  even_numbers = []\n  for num in input_list:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(get_even_numbers(my_list))\n\n# Output: [2, 4, 6, 8, 10]", "task_type": "coding"}
{"input": "FOr a given list, create a program that prints out the standard deviation of the elements in the list.", "output": "def std_dev(list):\n    \"\"\"Print the standard deviation of elements in a given list.\"\"\"\n    numerator = 0\n    mean = sum(list) / len(list)\n    for num in list:\n        numerator += (num - mean) ** 2\n    sd = (numerator / (len(list) - 1)) ** 0.5\n    return sd", "task_type": "coding"}
{"input": "Create a function which converts a string representation of number in English to a numerical value.", "output": "\"\"\"\nCreate a function which converts a string representation of number in English to a numerical value.\n\"\"\"\n\ndef convert_english_number(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\n    final_num = 0\n    i=0\n    while i<len(word_list): \n        if word_list[i] in word_values.keys():\n            final_num += word_values[word_list[i]]\n        elif word_list[i]==\"hundred\":\n            final_num = final_num*100\n            \n        if(i+1<len(word_list) and word_list[i+1]==\"hundred\"):\n            final_num += word_values[word_list[i]]*100\n        i+=1\n    return final_num\n\nif __name__ == '__main__':\n    print(convert_english_number(\"one thousand two hundred and thirty four\"))", "task_type": "coding"}
{"input": "Design a class in Java called 'Student' which contains student's information such as name, age, etc.", "output": "public class Student {\n  private String name;\n  private int age;\n  private boolean status;\n\n  public Student(String name, int age, boolean status) {\n    this.name = name;\n    this.age = age;\n    this.status = status;\n  }\n  \n  public String getName() {\n    return name;\n  }\n  \n  public void setName(String name) {\n    this.name = name;\n  }\n  \n  public int getAge() {\n    return age;\n  }\n  \n  public void setAge(int age) {\n    this.age = age;\n  }\n  \n  public boolean getStatus() {\n    return status;\n  }\n  \n  public void setStatus(boolean status) {\n    this.status = status;\n  }  \n}", "task_type": "coding"}
{"input": "What is Machine Learning?", "output": "Machine Learning is a subset of Artificial Intelligence that enables computers to learn from patterns in data without explicitly being programmed. It enables them to improve over time by recognizing patterns and adjusting to new data. Machine Learning algorithms are used in a wide variety of applications, such as facial recognition, image recognition, natural language processing, predictive analytics, and robotics.", "task_type": "coding"}
{"input": "Using the array, sort it using insertion sort.", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \narr = [4, 2, 6, 7, 1] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "task_type": "coding"}
{"input": "Create a regex pattern to match all URLs in a text.", "output": "# Create a regex pattern to match all URLs in a text\npattern = r\"((http|ftp|https):\\/\\/)?[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?\"", "task_type": "coding"}
{"input": "Write a function in Java to find the matching pair in an array of integers.", "output": "// Function to find matching pair in an array \npublic static void findPair(int[] arr) { \n    int pairIndex = -1; \n  \n    // Loop through the array \n    for (int i = 0; i < arr.length; i++) { \n        int current = arr[i]; \n  \n        // Check if it's a matching pair \n        for (int j = i + 1; j < arr.length; j++) { \n            if (current == arr[j]) { \n                pairIndex = j; \n                break; \n            } \n        } \n    } \n  \n    // Print the result \n    if (pairIndex != -1) \n        System.out.println(\"Pair found at index: \" + pairIndex); \n    else\n        System.out.println(\"Pair not found!\"); \n}", "task_type": "coding"}
{"input": "Suggest a better approach to sort the given array.", "output": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n    return left + [pivot] + right", "task_type": "coding"}
{"input": "Code an algorithm to find the closest pair of elements in a given array with respect to a given target number.", "output": "def closest_pair(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n    return min_pair", "task_type": "coding"}
{"input": "Construct an algorithm to check if two strings have the same characters and same frequency of characters.", "output": "def is_anagram(str1, str2):\n    char_map1 = {}\n    char_map2 = {}\n\n    for char in str1:\n        if char in char_map1:\n            char_map1[char] += 1\n        else:\n            char_map1[char] = 1\n    \n    for char in str2:\n        if char in char_map2:\n            char_map2[char] += 1\n        else:\n            char_map2[char] = 1\n    \n    return char_map1 == char_map2", "task_type": "coding"}
{"input": "Define a function which takes two strings as arguments and returns a list containing all characters that appear in either string.", "output": "def common_chars(string_1, string_2):\n    char_list = [] \n    for char in string_1:\n        if char in string_2 and char not in char_list:\n            char_list.append(char)\n    for char in string_2:\n        if char in string_1 and char not in char_list:\n            char_list.append(char)\n    return char_list", "task_type": "coding"}
{"input": "Create a Python function to return the frequency table of a list of words.", "output": "def create_frequency_table(words):\n    \"\"\"\n    Function to create a frequency table for a given list of words.\n    \n    Arguments:\n        words {list}: List of words.\n    \n    Returns:\n        dictionary: Frequency table of words.\n    \"\"\"\n    frequency_table = dict()\n    for word in words:\n        if word in frequency_table:\n            frequency_table[word] += 1\n        else:\n            frequency_table[word] = 1\n    return frequency_table", "task_type": "coding"}
{"input": "Write a code snippet in Javascript to print out the alphabetical characters in a string.", "output": "var myString = \"Taichi Tamura\";\n\nvar letters = \"\";\nfor (var i=0; i < myString.length; i++) {\n  var currentLetter = myString[i];\n  if (currentLetter.match(/[a-zA-Z]/)) {\n    letters += currentLetter;\n  }\n}\n\nconsole.log(letters); // Outputs \"TaichiTamura\"", "task_type": "coding"}
{"input": "How can you remove all blank spaces from a given string in Python?", "output": "You can remove all blank spaces from a given string in Python using the replace() function. This function takes two arguments, the first is the substring to be replaced and the second is the substring to be inserted in its place. In this case, you can use an empty string as the second argument to remove any instance of the white space from the string. \n\nFor example:\n\nstring_with_spaces = \"   Hello  World  \" \nno_spaces = string_with_spaces.replace(\" \", \"\") \nprint(no_spaces)  # Output: \"HelloWorld\"", "task_type": "coding"}
{"input": "Compute the Minkowski distance between two lists.", "output": "def minkowski_distance(list_1, list_2, p):\n    return (sum([abs(x-y)**p for x, y in zip(list_1, list_2)]))**(1/p)\n\n# Result:\nminkowski_distance(list_1, list_2, 3)  # 6.0", "task_type": "coding"}
{"input": "Explain how Python List Comprehensions work?", "output": "Python List Comprehensions allow users to quickly build a list from another list or an iterable. List Comprehensions use a syntax that consists of an expression followed by a ‘for’ statement and then zero or more ‘for’ or ‘if’ clauses. The expression is evaluated once for each item in the list. List Comprehensions can be used to perform filtering and mapping operations over the lists, or any other iterable. The output is a new list that can be formed from items in the original list, or any of its combinations.", "task_type": "coding"}
{"input": "Write a codde fragment to print out the most frequent element in an array.", "output": "freq = {}\n\nfor el in arr:\n    if el in freq:\n        freq[el] += 1\n    else:\n        freq[el] = 1\n        \nmax_el, max_freq = None, 0\nfor el, freq in freq.items():\n    if freq > max_freq:\n        max_el = el\n        max_freq = freq\n        \nprint(max_el, max_freq)  # Output: 2 2", "task_type": "coding"}
{"input": "Create a HTML page to display a weather forecast for the selected city.", "output": "<!DOCTYPE html>\n<html>\n<head>\n<title>Weather Forecast</title>\n</head>\n<body>\n\n<h1>Weather Forecast - London</h1>\n\n<p>Day 1 - Clear Sky</p>\n<p>Day 2 - Cloudy</p>\n<p>Day 3 - Rain</p>\n\n</body>\n</html>", "task_type": "coding"}
{"input": "Given two sorted arrays nums1 and nums2, combine their elements into a single array that is sorted.", "output": "def mergeArrays(nums1, nums2):\n  result = []\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] < nums2[j]:\n      result.append(nums1[i])\n      i += 1\n    else:\n      result.append(nums2[j])\n      j += 1\n  result += nums1[i:] + nums2[j:]\n §§ 1080\n  return result\n\nprint(mergeArrays(nums1, nums2)) // [1, 2, 2, 3, 4, 5]", "task_type": "coding"}
{"input": "Create a webpage using HTML and CSS that has a navigation bar with a logo, five links to different webpages, and a footer.", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My Webpage</title>\n    <meta charset=\"utf-8\">\n    <style>\n        body {\n            background-color: #f1f1f1;\n        }\n\n        .navbar {\n            overflow: hidden;\n            background-color: #444;\n        }\n\n        .navbar a {\n            float: left;\n            display: block;\n            color: white;\n            text-align: center;\n            padding: 14px 20px;\n            text-decoration: none;\n        }\n\n        .navbar a:hover {\n            background-color: #555;\n            color: white;\n        }\n\n        .main {\n            padding: 16px;\n            margin-top: 30px;\n            height: 1500px;\n            background-color: #f1f1f1;\n        }\n\n        .footer {\n            color: grey;\n            padding: 8px;\n            text-align: center;\n            background-color: #f1f1f1;\n        }\n\n        .logo {\n            float: left;\n            height: 50px;\n            width: 50px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"navbar\">\n        <img class=\"logo\" src=\"logo.png\" alt=\"logo\" />\n        <a href=\"home.html\">Home</a>\n        <a href=\"contact.html\">Contact</a>\n        <a href=\"about.html\">About</a>\n        <a href=\"products.html\">Products</a>\n        <a href=\"services.html\">Services</a>\n    </div>\n\n    <div class=\"main\">\n        // Content will be here\n    </div>\n\n    <div class=\"footer\">\n        Copyright &copy; Company 2020\n    </div>\n</body>\n</html>", "task_type": "coding"}
{"input": "Suggest ways to improve the performance of the following list implementation.", "output": "class List: \n   def __init__(self): \n     self.items = [] \n   \n   def append(self, item):\n     if item not in self.items:\n       self.items.append(item) \n       \n   def remove(self, item): \n      try:\n        self.items.remove(item)\n      except ValueError:\n        pass\n  \n   def remove_at_index(self, index):\n    del self.items[index]\n  \n   def search(self, item):\n    return item in self.items", "task_type": "coding"}
{"input": "Write a Go program that prints the numbers from 1 to 100, replacing any number divisible by 4 with \"Four\".", "output": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    // Iterate from 1 to 100\n    for i := 1; i <= 100; i++ {\n        // If the number is divisible by 4, print \"Four\"\n        if i%4 == 0 {\n            fmt.Println(\"Four\")\n        // Otherwise print the number\n        } else {\n            fmt.Println(i)\n        }\n    }\n}", "task_type": "coding"}
{"input": "Create an object-oriented program that calculates the cost of a given item including sales tax.", "output": "//class definition \nclass Item { \n  constructor(cost, taxRate) { \n    this.cost = cost;\n    this.taxRate = taxRate;\n  }\n  \n  //calculate the cost including sales tax\n  getCostWithTax() {\n    return this.cost * (1 + this.taxRate);\n  }\n  \n} \n\n//instantiate Item and calculate cost\nlet item = new Item(10, 0.1); \nlet costWithTax = item.getCostWithTax();\nconsole.log(costWithTax); //11", "task_type": "coding"}
{"input": "Given the following matrix, delete the row or column that contains the least number of elements.", "output": "import numpy as np\n\n# Create the matrix\nmatrix = np.array([[0, 1, 2], \n                   [3, 4, 5], \n                   [6, 7, 8]])\n\n# Get the lengths of each row\nrow_lengths = [len(row) for row in matrix]\n\n# Delete the row with the minimum length and print the result\ndel matrix[row_lengths.index(min(row_lengths))]\nprint(matrix) # prints [[0 1 2] \n                  #        [3 4 5] \n                  #        [6 7 8]]", "task_type": "coding"}
{"input": "Build a program in C++ which finds the largest element in an array.", "output": "#include <iostream> \nusing namespace std;\n\n// Finds the largest element in the array \nint findLargestElement(int arr[], int n) \n{ \n\t// Initialize maximum element \n\tint max = arr[0]; \n\n\t// Traverse array elements from second and \n\t// compare every element with current max \n\tfor (int i = 1; i < n; i++) \n\t\tif (arr[i] > max) \n\t\t\tmax = arr[i]; \n\n\treturn max; \n} \n\n// Driven program \nint main() \n{ \n\tint arr[] = {2, 3, 5, 8, 9}; \n\tint n = sizeof(arr) / sizeof(arr[0]); \n\t\n\tcout << \"Largest Element = \" << findLargestElement(arr, n); \n\t\n\treturn 0; \n}", "task_type": "coding"}
{"input": "Explain the concept of Generative Adversarial Networks (GANs).", "output": "Generative Adversarial Networks (GANs) are a type of deep neural network that are composed of two sub-networks; a generative network and a discriminative network. The generative network produces samples such as images, audio, or text that try to fool the discriminator network, which is trained to recognize real data from generated data. The two networks are trained together in an adversarial setting, in which the generator attempts to generate data that is indistinguishable from real data and the discriminator tries to distinguish real data from generated data.", "task_type": "coding"}
{"input": "Write a code to print out all the prime numbers between 2 and 10.", "output": "# initialize an empty list to store prime numbers\nprime_numbers = []\n\n# Iterate over the range from 2 to 10\nfor num in range(2, 11):\n    cnt = 0\n    # check if the number is divisible by any natural number from 2 to num-1\n    for i in range(2, num):\n        if num % i == 0:\n            cnt += 1\n    # if the number is not divisible by any of the numbers then add to the list\n    if cnt == 0:\n        prime_numbers.append(num)\n\nprint(prime_numbers) # prints [2, 3, 5, 7]", "task_type": "coding"}
{"input": "Write a Swift function to parse a JSON string into a dictionary.", "output": "func parseJsonToDictionary(jsonString: String) -> [String: Any]? {\n  if let data = jsonString.data(using: .utf8) {\n    do {\n      return try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]\n    } catch {\n      print(error.localizedDescription)\n    }\n  } \n  return nil\n}", "task_type": "coding"}
{"input": "Suggest a way to convert a JSON object to a string in JavaScript.", "output": "The JSON.stringify() method can be used to convert a JSON object to a string in JavaScript. It takes two parameters: the object to be stringified and an optional replacer to modify the values before they are stringified. The result is a JSON-formatted string.\n\nExample: \nconst object = {'name': 'John', 'age': 25};\nconst string = JSON.stringify(object); \nconsole.log(string);  // '{\"name\": \"John\", \"age\": 25}'", "task_type": "coding"}
{"input": "Explain why software design patterns are important in software development.", "output": "Software design patterns are important because they allow developers to create extensible and maintainable software applications. Design patterns provide a way of reusing the same code and structure across multiple applications, while allowing the application to remain logically organized. This can reduce the amount of time it takes to develop and debug applications, as well as prevent bugs from arising due to unfamiliar code structures. Additionally, well-designed applications can be easier for new developers to understand and contribute to. Lastly, design patterns can help improve the overall organization and scalability of a codebase.", "task_type": "coding"}
{"input": "Write a python program that takes in two input strings and checks if the second string is an anagram of the first one.", "output": "def anagram_check (str1, str2): \n    if(sorted(str1)== sorted(str2)): \n        print(\"The strings are anagrams.\")  \n    else: \n        print(\"The strings aren't anagrams.\")         \n\n# Driver code \nstr1 = \"silent\"\nstr2 = \"listen\"\nanagram_check(str1, str2)", "task_type": "coding"}
{"input": "How would you modify the following code to make it more efficient?", "output": "def find_word(word, text):\n    # Use the 'in' operator to check if the word is in the text\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"\n\n# Use the 'count' method to check if the word is in the text more efficiently\nif text.count(word) > 0:\n    return \"Word found\"\nelse:\n    return \"Word not found\"", "task_type": "coding"}
{"input": "Write a function to find the highest prime number that can be divided by a given number.", "output": "def highest_prime(num):\n    highest_factor = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0 and is_prime(i):\n            highest_factor = i\n    return highest_factor\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True", "task_type": "coding"}
{"input": "Explain what data encapsulation is.", "output": "Data encapsulation is a software programming concept that allows the internal representation of an object to be hidden from the outside world. It is used to protect the data from being modified by parts of the program that should not have access to the data. It is also used to provide a way to extend the functionality of an object without editing the object code itself.", "task_type": "coding"}
{"input": "Write a code to find the longest substring of given string with length greater than or equal to 2 without repeating letters.", "output": "# Function to find the longest substring of given string with length greater than or equal to 2 without repeating letters\ndef find_longest_substring(string):\n    # Variable to store the starting index of the substring\n    start_index = 0\n    \n    # Hashset to store characters in string\n    visited = set()\n    \n    # Variables to store the length and the result substring\n    length = 0\n    result = \"\"\n    \n    # Iterate over the string\n    for i in range(len(string)):\n        # If the character is already in the hashset, then remove characters until this character from the hashset \n        if string[i] in visited:\n            visited.remove(string[start_index])\n            start_index += 1\n            \n        # Add the current character to the hashset\n        visited.add(string[i])\n        \n        # Update length and result if length is greater than before\n        if length < i - start_index + 1:\n            length = i - start_index + 1\n            result = string[start_index:i+1]\n        \n    # Return the result substring\n    return result\n\n# Test the function\nprint(find_longest_substring(string))", "task_type": "coding"}
{"input": "Alter the following given code so that it will implement the Bubble Sort Algorithm", "output": "def bubbleSort(arr):\n    n = len(arr) \n\n    for i in range(n): \n  \n        for j in range(0, n-i-1): \n  \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "task_type": "coding"}
{"input": "Explain what a trisection algorithm is.", "output": "A trisection algorithm is a method used to divide an interval into three equal parts. It involves dividing a closed interval into three parts using only two points that lie in the original interval. It is useful for quickly finding roots of equations as the points at each division become closer and closer to the root. The method can be applied in a number of applications such as numerical analysis and optimization.", "task_type": "coding"}
{"input": "How would you optimize a loop which runs over an array?", "output": "Loop optimization techniques can be applied in order to improve the efficiency of a loop which runs over an array. The most common techniques include avoiding unnecessary computations, using pre-computation, using memoization to store intermediate results, using loop unrolling and different ways of loop indexing. In addition, using the right data structures can greatly improve the performance of a loop, as certain data structures are more efficient when dealing with large arrays.", "task_type": "coding"}
{"input": "Rewrite this function to use a binary search instead.", "output": "def binary_search(arr, x): \n    start = 0\n    end = len(arr) - 1\n  \n    while start <= end: \n        mid = start + (end - start) // 2 \n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            start = mid + 1\n        else: \n            end = mid - 1  \n    return -1", "task_type": "coding"}
{"input": "Write a function to generate Fibonacci numbers in Python.", "output": "def fibonacci(num):\n  fib_list = [0, 1]\n  if num == 0:\n    return []\n  elif num == 1:\n    return [0]\n  else:\n    for _ in range(2, num):\n      nxt_num = fib_list[-1] + fib_list[-2]\n      fib_list.append(nxt_num)\n    return fib_list", "task_type": "coding"}
{"input": "Edit the following XML code to add a navigation bar to the top of a web page", "output": "<html>\n<head>\n  <title>My Webpage</title>\n</head>\n<body>\n  <nav>\n    <ul>\n      <li><a href=\"index.html\">Home</a></li>\n      <li><a href=\"about.html\">About Us</a></li>\n      <li><a href=\"contact.html\">Contact</a></li>\n    </ul>\n  </nav>\n</body>", "task_type": "coding"}
{"input": "Develop an HTML page which displays a user's profile information (name, age, phone number).", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Profile</title>\n</head>\n<body>\n    <h1>User Profile</h1>\n    <p>Name: John Doe</p>\n    <p>Age: 24</p>\n    <p>Phone Number: 123-456-789</p>\n</body>\n</html>", "task_type": "coding"}
{"input": "Suggest a way to secure user passwords", "output": "One way to secure user passwords is to use a secure hash algorithm such as bcrypt, scrypt, etc. to hash the passwords before storing them in the database. This ensures that even if the passwords are exposed, they will not be easily readable. Furthermore, it is important to use a secure server and to monitor the database for any suspicious activity.", "task_type": "coding"}
{"input": "Write a code to process a given array and add 10 to each value stored in the array.", "output": "#Process a given array and add 10 to each value\narr = [1, 2, 3, 4, 5]\n\n#Loop through the array\nfor i in range(len(arr)):\n    #Add 10 to the current element\n    arr[i] = arr[i] + 10\n\n#Print the modified array\nprint(arr)\n\n\"\"\"\nOutput:\n[11, 12, 13, 14, 15]\n\"\"\"", "task_type": "coding"}
{"input": "Write a code in C# to create a ranking system for 5 players based on their scores.", "output": "Console.WriteLine(\"Leaderboard\"); \n \n// create a sorted dictionary of players and scores\nvar leaderboard = new SortedDictionary<string, int>(); \n \nleaderboard.Add(\"Player1\", 23); \nleaderboard.Add(\"Player2\", 20); \nleaderboard.Add(\"Player3\", 15); \nleaderboard.Add(\"Player4\", 33); \nleaderboard.Add(\"Player5\", 5); \n \n// iterate through sorted dictionary and print rankings\nint rank = 1; \nforeach(KeyValuePair<string, int> pair in leaderboard) { \n Console.WriteLine(rank + \". \" + pair.Key + \" : \" + pair.Value); \n rank++; \n}", "task_type": "coding"}
{"input": "Create HTML code for a table that has 7 columns and 3 rows.", "output": "<html>\n<table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n    <th>Column 4</th>\n    <th>Column 5</th>\n    <th>Column 6</th>\n    <th>Column 7</th>\n  </tr>\n  <tr>\n    <td>Cell 1</td>\n    <td>Cell 2</td>\n    <td>Cell 3</td>\n    <td>Cell 4</td>\n    <td>Cell 5</td>\n    <td>Cell 6</td>\n    <td>Cell 7</td>\n   </tr>\n   <tr>\n     <td>Cell 8</td>\n     <td>Cell 9</td>\n     <td>Cell 10</td>\n     <td>Cell 11</td>\n     <td>Cell 12</td>\n     <td>Cell 13</td>\n     <td>Cell 14</td>\n   </tr>\n  </table>\n</html>", "task_type": "coding"}
{"input": "Create a function that takes two integers, A and B, and returns the largest common divisor between A and B.", "output": "def get_largest_common_divisor(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n\nif __name__ == '__main__':\n    print(get_largest_common_divisor(15, 9))", "task_type": "coding"}
{"input": "Create a HTML page that containsthe loading icon for a web page request.", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Loading Icon</title>\n  </head>\n  <body>\n  <div id=\"loading-icon\">\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n  </div>\n  <style type=\"text/css\">\n    #loading-icon {\n      margin: auto;\n      text-align: center;\n      width: 120px;\n    }\n\n    #loading-icon span {\n      background-color: #E3EEF6;\n      border-radius: 50%;\n      display: inline-block;\n      height: 10px;\n      margin-right: 10px;\n      width: 10px;\n      animation: loader 2s ease-in infinite;\n    }\n\n    #loading-icon span:nth-child(1) {\n      animation-delay: 0s;\n    }\n\n    #loading-icon span:nth-child(2) {\n      animation-delay: 0.3s;\n    }\n\n    #loading-icon span:nth-child(3) {\n      animation-delay: 0.6s;\n    }\n\n    #loading-icon span:nth-child(4) {\n      animation-delay: 0.9s;\n    }\n\n    #loading-icon span:nth-child(5) {\n      animation-delay: 1.2s;\n    }\n\n    @keyframes loader {\n      25% { transform: scale(1.3); }\n      50% { transform: scale(1.1); }\n      75% { transform: scale(1.3); }\n    }\n  </style>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Write a function in Python to print out the most common words in a given text.", "output": "def most_common(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\n    sorted_words = sorted(results.items(), key=lambda kv: kv[1], reverse=True)\n    for word, count in sorted_words[:10]:\n        print(word, count)", "task_type": "coding"}
{"input": "Create a table using JavaScript with three columns, \"Name\", \"Age\", and \"Country\".", "output": "<table id=\"exampleTable\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Country</th>\n  </tr>\n</table>\n\n<script>\n  const exampleTable = document.getElementById('exampleTable');\n  const rows = [];\n  const columns = [\"Name\", \"Age\", \"Country\"];\n\n  columns.forEach((columnName) => {  \n  const newRow = document.createElement('tr'); \n  newRow.innerHTML = `<td>${columnName}</td>`;\n  rows.push(newRow);\n });\n\n exampleTable.append(...rows);\n</script>", "task_type": "coding"}
{"input": "Write the most efficient JavaScript function to reverse a given array.", "output": "function reverseArray(array) {\n  let leftIndex = 0;\n  let rightIndex = array.length - 1;\n  while (leftIndex < rightIndex) {\n    const temp = array[leftIndex];\n    array[leftIndex] = array[rightIndex];\n    array[rightIndex] = temp;\n    leftIndex++;\n    rightIndex--;\n  }\n  return array;\n}", "task_type": "coding"}
{"input": "Create a website that displays the current day's weather forecast in Philadelphia.", "output": "<html>\n<head>\n  <title>Weather App</title>\n</head>\n<body>\n  <h1>Weather in Philadelphia</h1>\n  <h2>Today</h2>\n  <div id=\"weather\">\n    <script>\n\n    // API call to get the weather forecast\n    fetch(\"https://api.weather.gov/gridpoints/PHI/20,34/forecast\")\n      .then(response => response.json())\n      .then(data => {\n        // store data in variables\n        let tempHigh = data.properties.periods[0].temperature\n        let tempLow = data.properties.periods[0].temperatureTrend\n        let weatherDescription = data.properties.periods[0].shortForecast\n        let windSpeedInMPH = data.properties.periods[0].windSpeed\n        let windDirection = data.properties.periods[0].windDirection\n        \n        // create HTML string for displaying the forecast\n        let forecastHTML = `\n          <p><strong>Today's High:</strong> ${tempHigh}&deg;F</p>\n          <p><strong>Today's Low:</strong> ${tempLow}&deg;F</p>\n          <p><strong>Description:</strong> ${weatherDescription}</p>\n          <p><strong>Wind Speed:</strong> ${windSpeedInMPH} MPH, ${windDirection}</p>\n        `\n        // display forecast on the page\n        document.getElementById('weather').innerHTML = forecastHTML;\n      });\n\n    </script>\n  </div>\n</body>\n</html>", "task_type": "coding"}
{"input": "Write a Kotlin class to represent a book. It should contain the title, author name, year of publication and ISBN.", "output": "class Book {\n\n    private var title: String\n    private var authorName: String\n    private var yearOfPublication: Int\n    private var ISBN: String\n\n    constructor(title: String, authorName: String, yearOfPublication: Int, ISBN: String) {\n        this.title = title\n        this.authorName = authorName\n        this.yearOfPublication = yearOfPublication\n        this.ISBN = ISBN\n    }\n\n    fun getTitle(): String {\n        return title\n    }\n\n    fun setTitle(title: String) {\n        this.title = title\n    }\n\n    fun getAuthorName(): String {\n        return authorName\n    }\n\n    fun setAuthorName(authorName: String) {\n        this.authorName = authorName\n    }\n\n    fun getYearOfPublication(): Int {\n        return yearOfPublication\n    }\n\n    fun setYearOfPublication(yearOfPublication: Int) {\n        this.yearOfPublication = yearOfPublication\n    }\n\n    fun getISBN(): String {\n        return ISBN\n    }\n\n    fun setISBN(ISBN: String) {\n        this.ISBN = ISBN\n    }\n    \n}", "task_type": "coding"}
{"input": "Write a function in PHP that takes in two integers and prints the smallest one.", "output": "function smallest($num1, $num2) {\n    if ($num1 < $num2) {\n        echo \"$num1 is smaller\";\n    } else if ($num2 < $num1) {\n        echo \"$num2 is smaller\";\n    } else {\n        echo \"Both numbers are equal\";\n    }\n}", "task_type": "coding"}
{"input": "Write a JavaScript program to find the sum of all numbers the user has entered in to the input box.", "output": "function calculateSum() { \n  let sum = 0; \n  // Iterate over all the input boxes \n  document.querySelectorAll(\"input[type=number]\").forEach((element) => { \n    // current value of the element \n    let elementValue = Number(element.value); \n    \n    // Sum of all elements \n    sum = sum + elementValue; \n  }); \n  console.log(\"The Sum of All the Numbers is: \"+ sum); \n}", "task_type": "coding"}
{"input": "Create a JSON object that contains person data.", "output": "person = { \n    \"name\": \"John Smith\", \n    \"age\": 32, \n    \"address\": { \n        \"street\": \"123 Main Street\", \n        \"city\": \"Chicago\", \n        \"state\": \"IL\"\n    }, \n    \"hobbies\": [\"golf\", \"reading\", \"fishing\"]\n}", "task_type": "coding"}
{"input": "What is \"type casting\" in programming?", "output": "In programming, type casting is the process of converting a value from one data type to another. This is done either explicitly, by writing a cast operator, or implicitly, which is done by the programming language itself. Type casting is often used to convert values from one type to another to enable a program to work with values of multiple types.", "task_type": "coding"}
{"input": "Explain the concept of the depth-first search algorithm and provide an example.", "output": "Depth-first search (DFS) is an algorithm used to traverse a tree or graph data structure. It starts at the root of the tree, explores as far as possible down a given branch and then backtracks along the same path before exploring a new branch. For example, consider a BST (Binary Search Tree) where we want to traverse all the elements, the algorithm starts at the root node, then traverses all the elements in the left subtree before traversing all the elements in the right subtree.", "task_type": "coding"}
{"input": "Describe the concept of machine learning in your own words.", "output": "Machine learning is a field of Artificial Intelligence that focuses on developing algorithms for computers to learn from data and to make predictions about their environment. It can involve supervised and unsupervised learning techniques, such as classification and clustering, to analyze data and make predictions. Machine learning algorithms are also used to detect patterns and make decisions, enabling computers to automate tasks and learn from experience.", "task_type": "coding"}
{"input": "Write an HTML page which takes in user input and makes an AJAX request to a web server.", "output": "<html>\n  <head>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n    <script>\n      $(document).ready(function(){\n        $(\"button\").click(function(){\n          $.ajax({\n            url: 'https://example.com',\n            type: 'POST',\n            data: $('#user-input').val(),\n            success: function(response) {\n              // Display response from server\n            }\n          });\n        });\n      });\n    </script>\n  </head>\n  <body>\n    <input type=\"text\" id=\"user-input\" />\n    <button>Send</button>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Given the following list of JavaScript objects and a particular key, write a function to return an array of the values corresponding to that key.", "output": "function getValues(objList, key) {\n  let results = [];\n  objList.forEach(function(obj) {\n    if (obj.hasOwnProperty(key)) {\n      results.push(obj[key]);\n    }\n  });\n  return results;\n}\n\nlet ages = getValues(objList, 'age');\nconsole.log(ages);\n\nOutput:\n[25, 28, 31]", "task_type": "coding"}
{"input": "How would you form a list from two lists by taking elements at same index from both the lists?", "output": "def form_list_from_list(list1, list2):\n    return [list1[i] + list2[i] for i in range(len(list1))]\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3] \n    list2 = [4, 5, 6]\n    print(form_list_from_list(list1, list2))", "task_type": "coding"}
{"input": "In Java, write a program to read in an array of 5 integers and output their sum.", "output": "import java.util.Scanner;\n\npublic class ArraySum {\n public static void main(String[] args) {\n  int[] array = {2, 5, 9, 8, 6};\n  int sum = 0;\n\n  for (int i = 0; i < array.length; i++) {\n   sum = sum + array[i];\n  }\n\n  System.out.println(\"The sum of the array is: \"+sum);\n }\n}", "task_type": "coding"}
{"input": "Write a Python code to find all the prime numbers below a given number.", "output": "def get_primes(n): \n  primes = [] \n  for num in range(2, n+1): \n    is_prime = True     \n    for div in range(2, n): \n      if (num % div == 0): \n        is_prime = False      \n    if is_prime: \n      primes.append(num) \n  return primes", "task_type": "coding"}
{"input": "Explain the purpose and implementation of the media query.", "output": "A media query is a CSS tool that allows a web page to adapt to different screen sizes (desktop, mobile, tablet, etc.). It uses a set of rules consisting of media type, media feature and value, which, when satisfied, trigger the application of a corresponding CSS stylesheet. Media queries are implemented using the @media rule, which combines a media type and media query expression, and has a corresponding block of style rules that get applied when the condition is true.", "task_type": "coding"}
{"input": "Write a code for an object-oriented Bubble Sort algorithm.", "output": "class Bubble:\n    def sort(self, list):\n        # iterate over the list\n        for i in range(len(list) - 1):\n            for j in range(len(list) - 1 - i): # loop from the first until the last\n                if list[j] > list[j+1]:  # if order is broken\n                    list[j], list[j+1] = list[j+1], list[j]  # swap the elements\n\n# Driver Code \nif __name__ == '__main__': \n    list = [ 64, 34, 25, 12, 22, 11, 90 ]\n    bubble = Bubble() \n    bubble.sort(list) \n   \n    print (\"Sorted array :\") \n    for i in range(len(list)): \n        print (\"%d\" %list[i])", "task_type": "coding"}
{"input": "Using HTML and CSS, create a web page that lists all of the fruits in the given array.", "output": "<html>\n<head>\n  <title>Fruit List</title>\n</head>\n<body> \n  <ul>\n    <li>Apple</li>\n    <li>Orange</li>\n    <li>Banana</li>\n    <li>Pear</li>\n    <li>Mango</li>\n  </ul>\n</body>\n</html>", "task_type": "coding"}
{"input": "Create a HTML page with a textbox, button and a message “Hello World!”", "output": "<html>\n    <head></head>\n    <body>\n        <input type=\"text\" id=\"textbox\">\n        <button onclick=\"sayHello()\">Say Hello</button>\n        <p id=\"message\">Hello World!</p>\n        \n        <script>\n            function sayHello() {\n                var text = document.getElementById('textbox').value;\n                document.getElementById('message').innerHTML = \"Hello \" + text + \"!\";\n            }\n        </script>\n    </body>\n</html>", "task_type": "coding"}
{"input": "Edit the following HTML code to allow Google Chrome to accurately render the page.", "output": "<html>\n  <head>\n    <title>My Webpage</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n      </tr>\n    </table>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Create a command to delete a folder with all its contents.", "output": "import os \ndef remove_folder(folder): \n    for filename in os.listdir(folder): \n        file_path = os.path.join(folder, filename) \n        try: \n            if os.path.isfile(file_path) or os.path.islink(file_path): \n                os.unlink(file_path) \n            elif os.path.isdir(file_path): \n                shutil.rmtree(file_path) \n        except Exception as e: \n            print('Failed to delete %s. Reason: %s' % (file_path, e))   \nremove_folder('/root/folder')", "task_type": "coding"}
{"input": "Implement an algorithm to find all the sets of three numbers in an array which adds up to a given number.", "output": "def three_sum(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\nprint(three_sum([2, 5, 8], 10)) # Result: [[2, 5, 8]]", "task_type": "coding"}
{"input": "Create a dictionary where the numbers 1 to 100 are the keys and the strings \"one\" to \"one hundred\" are the values.", "output": "d = {\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine',\n    10: 'ten',\n    11: 'eleven',\n    12: 'twelve',\n    13: 'thirteen',\n    14: 'fourteen',\n    15: 'fifteen',\n    16: 'sixteen',\n    17: 'seventeen',\n    18: 'eighteen',\n    19: 'nineteen',\n    20: 'twenty',\n    21: 'twenty-one',\n    22: 'twenty-two',\n    23: 'twenty-three',\n    24: 'twenty-four',\n    25: 'twenty-five',\n    26: 'twenty-six',\n    27: 'twenty-seven',\n    28: 'twenty-eight',\n    29: 'twenty-nine',\n    30: 'thirty',\n    31: 'thirty-one',\n    32: 'thirty-two',\n    33: 'thirty-three',\n    34: 'thirty-four',\n    35: 'thirty-five',\n    36: 'thirty-six',\n    37: 'thirty-seven',\n    38: 'thirty-eight',\n    39: 'thirty-nine',\n    40: 'forty',\n    41: 'forty-one',\n    42: 'forty-two',\n    43: 'forty-three',\n    44: 'forty-four',\n    45: 'forty-five',\n    46: 'forty-six',\n    47: 'forty-seven',\n    48: 'forty-eight',\n    49: 'forty-nine',\n    50: 'fifty',\n    51: 'fifty-one',\n    52: 'fifty-two',\n    53: 'fifty-three',\n    54: 'fifty-four',\n    55: 'fifty-five',\n    56: 'fifty-six',\n    57: 'fifty-seven',\n    58: 'fifty-eight',\n    59: 'fifty-nine',\n    60: 'sixty',\n    61: 'sixty-one',\n    62: 'sixty-two',\n    63: 'sixty-three',\n    64: 'sixty-four',\n    65: 'sixty-five',\n    66: 'sixty-six',\n    67: 'sixty-seven',\n    68: 'sixty-eight',\n    69: 'sixty-nine',\n    70: 'seventy',\n    71: 'seventy-one',\n    72: 'seventy-two',\n    73: 'seventy-three',\n    74: 'seventy-four',\n    75: 'seventy-five',\n    76: 'seventy-six',\n    77: 'seventy-seven',\n    78: 'seventy-eight',\n    79: 'seventy-nine',\n    80: 'eighty',\n    81: 'eighty-one',\n    82: 'eighty-two',\n    83: 'eighty-three',\n    84: 'eighty-four',\n    85: 'eighty-five',\n    86: 'eighty-six',\n    87: 'eighty-seven',\n    88: 'eighty-eight',\n    89: 'eighty-nine',\n    90: 'ninety',\n    91: 'ninety-one',\n    92: 'ninety-two',\n    93: 'ninety-three',\n    94: 'ninety-four',\n    95: 'ninety-five',\n    96: 'ninety-six',\n    97: 'ninety-seven',\n    98: 'ninety-eight',\n    99: 'ninety-nine',\n    100: 'one hundred'\n    }", "task_type": "coding"}
{"input": "Write a Java program to display a pattern of numbers.", "output": "class PatternTest\n{\n    public static void main(String[] args)\n    {\n        int[][] pattern = {\n            {1,2,3},\n            {4,5,6},\n            {7,8,9}\n        };\n\n        for (int i=0; i<pattern.length; i++) \n        {\n            for (int j=0; j<pattern[i].length; j++) \n            {\n                System.out.print(pattern[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}", "task_type": "coding"}
{"input": "Demonstrate how to use an arraylist in Java.", "output": "import java.util.ArrayList;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        // Create an arraylist \n        ArrayList<String> list = new ArrayList<String>(); \n  \n        // Adding elements to the list \n        list.add(\"Adam\"); \n        list.add(\"Bob\"); \n        list.add(\"Charlie\"); \n  \n        // Printing elements in the list \n        System.out.println(list); \n  \n        // Accessing elements using get() method \n        String name = list.get(1); \n        System.out.println(\"Name at index 1 is : \" + name); \n  \n        // Adding elements at a specific index \n        list.add(1, \"David\"); \n        System.out.println(\"Updated list : \"+list); \n  \n        // Removing elements from a list \n        list.remove(\"Adam\"); \n        System.out.println(\"Updated list : \"+list); \n  \n        // Check if an element exists in a list \n        boolean isPresent = list.contains(\"Bob\"); \n        System.out.println(\"Bob is present in the list : \" + isPresent); \n    } \n}\n\n// Output:\n// [Adam, Bob, Charlie] \n// Name at index 1 is : Bob\n// Updated list : [Adam, David, Bob, Charlie]\n// Updated list : [David, Bob, Charlie]\n// Bob is present in the list : true", "task_type": "coding"}
{"input": "Create a python dictionary consisting of the names of the seven dwarfs and a list of their ages.", "output": "\"\"\"\nCreate a python dictionary consisting of the names of the seven dwarfs and a list of their ages\n\"\"\"\n\ndwarfs = {\"Doc\": 84, \n          \"Grumpy\": 67,\n          \"Happy\": 76,\n          \"Sleepy\": 75,\n          \"Sneezy\": 71,\n          \"Dopey\": 76,\n          \"Bashful\": 70}\nprint(dwarfs)", "task_type": "coding"}
{"input": "Define a function which can generate a list of 15 random numbers between 1 to 30.", "output": "\"\"\"\nDefine a function which can generate a list of 15 random numbers between 1 to 30\n\"\"\"\nimport random\n\ndef generate_random_list():\n    return [random.randint(1,30) for _ in range(15)]\n    \nif __name__ == '__main__':\n    print(generate_random_list())", "task_type": "coding"}
{"input": "Compare and contrast Java and Python for developing applications.", "output": "Java and Python are both popular programming languages used for developing applications. Java is a statically typed language and requires extra effort in the form of type checking during compilation, while Python is a dynamically typed language and no type checking is required. Java is more suitable for large-scale enterprise software development and is known for its performance and scalability, whereas Python is generally easier to work with and better suited for smaller projects and prototyping. Java is also more verbose than Python, requiring more lines of code to accomplish the same task. On the other hand, Python has a large library of additional modules and provides simpler syntax and more intuitive programming style.", "task_type": "coding"}
{"input": "Implement a function which will take a list of numbers as an input and return a sorted list", "output": "def sort_list(numbers):\n    #Base case\n    if len(numbers) <= 1:\n        return numbers\n\n    pivot = numbers[0]\n    left = []\n    right = []\n    #Divide\n    for num in numbers[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n    #Conquer\n    left = sort_list(left)\n    right = sort_list(right)\n    #Combine\n    return left + [pivot] + right\n\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(sort_list(arr))", "task_type": "coding"}
{"input": "Write a Python script to call a web API", "output": "import requests \n  \napi_key = \"YOURAPIKEY\"\n  \n# base_url variable to store url \nbase_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n  \n# Give city name \ncity_name = input(\"Enter city name : \") \n  \n# complete_url variable to store \n# complete url address \ncomplete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name \n\n# get method of requests module \n# return response object \nresponse = requests.get(complete_url) \n  \n# json method of response object  \n# convert json format data into \n# python format data \nx = response.json() \n  \n# Now x contains list of nested dictionaries \n# Check the value of \"cod\" key is equal to \n# \"404\", means city is found otherwise, \n# city is not found \nif x[\"cod\"] != \"404\": \n  \n    # store the value of \"main\" \n    # key in variable y \n    y = x[\"main\"] \n  \n    # store the value corresponding \n    # to the \"temp\" key of y \n    current_temperature = y[\"temp\"] \n  \n    # store the value corresponding \n    # to the \"pressure\" key of y \n    current_pressure = y[\"pressure\"] \n  \n    # store the value corresponding \n    # to the \"humidity\" key of y \n    current_humidiy = y[\"humidity\"] \n  \n    # store the value of \"weather\" \n    # key in variable z \n    z = x[\"weather\"] \n  \n    # store the value corresponding  \n    # to the \"description\" key at  \n    # the 0th index of z \n    weather_description = z[0][\"description\"] \n  \n    # print following values \n    print(\" Temperature (in kelvin unit) = \" +\n                    str(current_temperature) + \n          \"\\n atmospheric pressure (in hPa unit) = \" +\n                    str(current_pressure) +\n          \"\\n humidity (in percentage) = \" +\n                    str(current_humidiy) +\n          \"\\n description = \" +\n                    str(weather_description)) \n  \nelse: \n    print(\" City Not Found \")", "task_type": "coding"}
{"input": "Write a code that takes two lists and find the longest common starting substring", "output": "def find_longest_substring(list1, list2):\n    string1 = list1[0]\n    string2 = list2[0]\n    min_length = min(len(string1), len(string2))\n    longest_substring = \"\"\n    \n    for i in range(min_length):\n        if string1[i] == string2[i]:\n            longest_substring += string1[i]\n        else:\n            break\n    return longest_substring\n    \nprint(find_longest_substring(list1, list2))", "task_type": "coding"}
{"input": "What is the difference between a sequential and a parallel collection?", "output": "The difference between a sequential and a parallel collection is the way in which data is processed. A sequential collection is processed one item at a time, from start to finish in a single thread. A parallel collection is processed in chunks at the same time, using multiple threads. The main advantage of using a parallel collection is that it can take advantage of multiple cores in a processor, allowing for faster data processing.", "task_type": "coding"}
{"input": "Create a program that can output the permutation of a given string.", "output": "def permutation(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    lst = [] \n    for i in range(len(str)):\n       m = str[i] \n       remLst = permutation(str[:i] + str[i+1:])\n       for p in remLst:\n           lst.append([m] + p)\n    return lst\n\nif __name__ == \"__main__\":\n    str = \"ABC\"\n    print(permutation(str))", "task_type": "coding"}
{"input": "Design an algorithm that can be used to identify if a given binary tree is a valid BST.", "output": "def isValidBST(root): \n\t\n\t# Base Case \n\tif root is None: \n\t\treturn True\n\t\t\n\t# Check recursive if left is valid \n\tif not isValidBST(root.left): \n\t\treturn False\n\n\t# If root's value is smaller than left subtree, not valid \n\tif root.left is not None and root.data < root.left.data: \n\t\treturn False\n\n\t# Check recursive if right is valid \n\tif not isValidBST(root.right): \n\t\treturn False\n\n\t# If root's value is greater than right subtree, not valid \n\tif root.right is not None and root.data > root.right.data: \n\t\treturn False\n\n\treturn True", "task_type": "coding"}
{"input": "Write a code in PHP to display the top 5 most viewed pages in a website.", "output": "$sql = \"SELECT page_name, view_count FROM pages ORDER BY view_count DESC LIMIT 5\";\n$result = mysqli_query($conn, $sql);\n\nif (mysqli_num_rows($result) > 0) {\n  while($row = mysqli_fetch_assoc($result)) {\n    echo \"Page Name: \" . $row[\"page_name\"]. \" - Views: \" . $row[\"view_count\"]. \"\";\n  }\n} else {\necho \"No records found\";\n}", "task_type": "coding"}
{"input": "Write a Java program to find the sum of elements in a 3x3 matrix.", "output": "// Java program to find sum of elements in a matrix \npublic class Matrix \n{ \n\tpublic static void main(String[] args) \n\t{ \n\t\t// Initialize matrix \n\t\tint[][] matrix = {{1, 2, 3}, \n\t\t\t\t\t\t{4, 5, 6}, \n\t\t\t\t\t\t{7, 8, 9}}; \n\n\t\t// Initialize sum \n\t\tint sum = 0; \n\n\t\t// Compute sum of elements \n\t\tfor (int i = 0; i < 3; i++) \n\t\t\tfor (int j = 0; j < 3; j++) \n\t\t\t\tsum = sum + matrix[i][j]; \n\n\t\t// Print Sum \n\t\tSystem.out.println(\"Sum of elements is: \" + sum); \n\t} \n}", "task_type": "coding"}
{"input": "Write a script to identify the even numbers in the given PHP array.", "output": "<?php\n\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n// Create an empty array to store even numbers\n$even_numbers = [];\n\n// Loop through the array, check if each element is even\n// If even, add to the even numbers array\nforeach($arr as $item) {\n    if($item % 2 == 0) {\n        array_push($even_numbers, $item);\n    }\n}\n\n// Output the array of even numbers\nprint_r($even_numbers);", "task_type": "coding"}
{"input": "Using the given array, create a JavaScript function that returns the sum of all element in the array.", "output": "// Function to find the sum of all elements in an array\n\nfunction sumElements(arr){\n  let sum = 0;\n  arr.forEach(element => {\n    sum += element;\n  });\n  return sum;\n}\n\nlet arr = [3, 5, 2, 6, 4, 4];\nconsole.log(sumElements(arr)); // Output: 24", "task_type": "coding"}
{"input": "Build a Bash script that takes two argument and write a function to swap the values of the arguments.", "output": "#!/bin/bash\n\n# bash script to swap two arguments\n\n# function to swap two numbers\nswap(){\n    local temp=$1\n    1=$2\n    2=$temp\n}\n\n# main program \nswap $a $b\necho \"swapped values: a = $a and b = $b\"", "task_type": "coding"}
{"input": "Design an efficient algorithm to search for an item in an array.", "output": "One efficient algorithm to search for an item in an array is the binary search algorithm. The binary search algorithm works by dividing the array into two parts and then searching through the divided parts in logarithmic time. The algorithm starts by comparing the item to be searched with the middle element of the array. If the item is smaller than the middle element, then the algorithm searches the first part of the array. If the item is larger than the middle element, then the algorithm searches the second part of the array. The process is then repeated until the item is found or the algorithm reaches the end of the array.", "task_type": "coding"}
{"input": "Create a pseudocode to solve the FizzBuzz problem.", "output": "```\n#For numbers from 1 through 100\nfor i from 1 to 100:\n    #If the number is divisible by both 3 and 5\n    if i is divisible by 3 and 5:\n        #Print FizzBuzz\n        print \"FizzBuzz\"\n    #If the number is divisible only by 3\n    elif i is divisible by 3:\n        #Print Fizz\n        print \"Fizz\"\n    #If the number is divisible only by 5\n    elif i is divisible by 5:\n        #Print Buzz\n        print \"Buzz\"\n    #Otherwise\n    else: \n        #Print the number\n        print i\n```", "task_type": "coding"}
{"input": "Create a function that takes two numbers and returns their greatest common divisor in Python.", "output": "\"\"\"\nCreate a function that takes two numbers and returns their greatest common divisor in Python.\n\"\"\"\n\ndef greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n\nif __name__ == '__main__':\n    print(greatest_common_divisor(20, 25))  # 5", "task_type": "coding"}
{"input": "Design a WebGL program to generate a snow flake effect in the browser.", "output": "The WebGL program would utilize shaders and particles to generate a snowflake effect in the browser. The vertex shader would compute the spherical coordinates of each snowflake particle, and the fragment shader would output a point representing each particle as a snowflake with the appropriate colors and depth. Additionally, the program would compute a set of transforms on each particle based on the time elapsed, to bring the scattering and movement effects of snow.", "task_type": "coding"}
{"input": "Build a program in C to find all prime numbers within a given range.", "output": "#include <stdio.h>  \nvoid primeCount(int lower, int upper) \n{ \n    while (lower < upper) { \n        int flag = 0; \n  \n        for (int i = 2; i <= lower / 2; ++i) { \n            if (lower % i == 0) { \n                flag = 1; \n                break; \n            } \n        } \n  \n        if (flag == 0) \n            printf(\"%d \", lower); \n  \n        ++lower; \n    } \n} \n  \n// Driver program \nint main() \n{ \n    int lower = 1;\n    int upper = 20;\n    primeCount(lower, upper); \n    return 0; \n}", "task_type": "coding"}
{"input": "Design a React component that builds a navigation menu from the given input.", "output": "class Nav extends React.Component {\n  render() {\n    const navLinks = Object.keys(this.props.nav).map(key => (\n      <li>\n        <Link to={this.props.nav[key]}>{key}</Link>\n      </li>\n    ));\n\n    return (\n      <nav>\n        <ul>{navLinks}</ul>\n      </nav>\n    );\n  }\n}", "task_type": "coding"}
{"input": "Write pseudocode to implement a sorting algorithm using recursion.", "output": "Function sort(array, leftIndex, rightIndex):\n  // If leftIndex is greater than or equal to rightIndex, do nothing. \n  If (leftIndex >= rightIndex) : \n      return \n  \n  // Get the middle index\n  middleIndex = (rightIndex + leftIndex) / 2\n  \n  // Sort the left side  \n  sort(array, leftIndex, middleIndex) \n  \n  // Sort the right side \n  sort(array, middleIndex+1, rightIndex) \n  \n  // Merge the sides\n  merge (array, leftIndex, middleIndex, rightIndex)\n  \nFunction merge(array, leftIndex, middleIndex, rightIndex):\n  // Create two temporary arrays;\n  leftArray = [middleIndex - leftIndex + 1] \n  rightArray = [rightIndex - middleIndex]\n  \n  // Copy data from array to the respective arrays  \n  for (i = 0 to middleIndex - leftIndex) : \n      leftArray[i] = array[leftIndex + i] \n  for (j = 0 to rightIndex-middleIndex: j++) \n      rightArray[j] = array[middleIndex + 1 + j] \n  \n  // sort the leftArray \n  sortLeftArray(leftArray) \n  \n  // sort the rightArray \n  sortRightArray(rightArray) \n  \n  // merge the sorted halves \n  i = 0     \n  j = 0    \n  k = leftIndex     \n  while (i < sizeof(leftArray) //&& j < sizeof(rightArray)) \n  { \n      if (leftArray[i] <= rightArray[j]) \n      { \n          array[k] = leftArray[i]; \n          i++; \n      } \n      else\n      { \n          array[k] = rightArray[j]; \n          j++; \n      } \n      k++; \n  } \n  \n  // Copy the remaining elements  \n  while (i < sizeof(leftArray)) : \n  { \n      array[k] = leftArray[i]; \n      i++; \n      k++; \n  } \n  \n  while (j < sizeof(rightArray)) \n  { \n      array[k] = rightArray[j]; \n      j++; \n      k++; \n  }", "task_type": "coding"}
{"input": "Parse a HTML page and find all text content within the page.", "output": "from bs4 import BeautifulSoup\n \nhtml_doc = \"\"\"\n<html><head><title>Page Title</title></head>\n<body>\n<h1>Header Text</h1>\n<p>Paragraph 1</p>\n<p>Paragraph 2</p>\n</body>\n</html>\n\"\"\"\n \nsoup = BeautifulSoup(html_doc, 'html.parser')\ntext_content = soup.find_all(text=True)\n \nfor content in text_content:\n print(content)", "task_type": "coding"}
{"input": "Create a class called \"Vector\" with x and y coordinates.", "output": "\"\"\"\nCreate a class called \"Vector\" with x and y coordinates\n\"\"\"\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nif __name__ == \"__main__\":\n    v = Vector(2, 3)\n    print (v.x, v.y)", "task_type": "coding"}
{"input": "Design a class that stores and prints a complex number.", "output": "class ComplexNumber:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __str__(self):\n        return '{} + {}i'.format(self.real, self.imag)\n\nif __name__ == '__main__':\n    c = ComplexNumber(2, 8)\n    print(c)", "task_type": "coding"}
{"input": "Create a script that can predict the next letter in a given string of text.", "output": "\"\"\"\nCreate a script that can predict the next letter in a given string of text\n\"\"\"\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ndef predict_next_letter(text):\n  data = [ord(char) for char in text]\n  data = pad_sequences([data], maxlen=10, truncating='post')\n  prediction = model.predict(data)\n  index = tf.argmax(prediction[0]).numpy()\n  \n  return chr(index)\n\nif __name__ == '__main__':\n    print(predict_next_letter('Hello'))", "task_type": "coding"}
{"input": "Write a function that takes two strings and determines if the first string is one character away from the second string.", "output": "def oneAway(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    if abs(len1 - len2) > 1: \n        return False\n    i = 0\n    j = 0 \n    count = 0 \n    while i < len1 and j < len2: \n        if str1[i] != str2[j]: \n            if count == 1: \n                return False\n            count = 1\n            if len1 > len2: \n                i += 1\n            elif len1 < len2: \n                j += 1 \n            else: \n                i +=1\n                j += 1 \n        else: \n            i += 1\n            j += 1\n    if i < len1 or j < len2: \n        count += 1 \n    return count == 1", "task_type": "coding"}
{"input": "Reorder a given array such that all even elements are placed before odd elements.", "output": "def reorder_array(arr):\n    \"\"\"Reorders a given array such that all even elements are placed before odd elements.\"\"\"\n    even = [i for i in arr if i % 2 == 0]\n    odd = [j for j in arr if j % 2 != 0]\n\n    return even + odd\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    ordered = reorder_array(arr)\n    print(ordered)", "task_type": "coding"}
{"input": "Create a program that prints a given 2D array in a spiral form.", "output": "def spiral_print(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\n    dir = 0\n    while l<=r and t<=b:\n\n        if dir == 0:\n            for i in range(l, r+1):\n                print(a[t][i], end=\" \")\n            t += 1\n        elif dir == 1:\n            for i in range(t, b+1):\n                print(a[i][r], end=\" \")\n            r -= 1\n        elif dir == 2:\n            for i in range(r, l-1, -1):\n                print(a[b][i], end=\" \")\n            b -= 1\n        elif dir == 3:\n            for i in range(b, t-1, -1):\n                print(a[i][l], end=\" \")\n            l += 1\n\n        dir=(dir+1)%4", "task_type": "coding"}
{"input": "Suggest an algorithm for finding the maximum element in an unordered array given in JavaScript.", "output": "// max is assign to 0 as a starting point\nlet max = 0;\n\nfor (let i=0; i < array.length; i++) {\n  // If the current value of i is greater than max, max will be updated\n  if (array[i] > max) { \n    max = array[i];\n  }\n}\n\nconsole.log(max); // Output: 20", "task_type": "coding"}
{"input": "Write a code that returns the longest substring of the given string without repeating characters.", "output": "def longestSubstring(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n    return longest_string", "task_type": "coding"}
{"input": "Write a code to delete all the vowels from a given string.", "output": "\"\"\"\nWrite a code to delete all the vowels from a given string\n\"\"\"\n\n# Given string\nstring = \"hello world\"\n\n# Removing all the vowels from the string\nno_vowels = \"\".join([letter for letter in string if letter not in \"aeiouAEIOU\"])\n\n# Printing the new string\nprint(\"String without vowels is\", no_vowels)", "task_type": "coding"}
{"input": "Write a C++ program that prints the following pattern to the screen:", "output": "#include <iostream>\n\nint main()\n{\n    // Print the pattern using nested for loop\n    for (int i=0; i<5; i++)\n    {\n        for (int j=0; j<i+1; j++)\n            std::cout << \"*\";\n        std::cout << std::endl;\n    } \n    return 0;\n}\n\n/* Output\n*\n**\n***\n****\n*****\n*/", "task_type": "coding"}
{"input": "Create an algorithm that takes two numbers a and b and returns the largest number.", "output": "\"\"\"\nAn algorithm that takes two numbers a and b and returns the largest number\n\"\"\"\n\ndef get_largest_number(a, b):\n    if (a > b):\n        return a\n    else:\n        return b\n    \nif __name__ == \"__main__\":\n    print (get_largest_number(5, 6))", "task_type": "coding"}
{"input": "Create a Java program that prints out the contents of a given two-dimensional array.", "output": "public class TwoDArray {\n\n    public static void main(String[] args) {\n        int[][] arr = {{1,2},{3,4},{5,6}};\n\n        for(int i=0;i<arr.length;i++){\n            for(int j=0;j<arr[i].length;j++){\n                System.out.print(arr[i][j]+\" \");\n            }\n            System.out.println();\n        }\n    }\n}", "task_type": "coding"}
{"input": "Write an HTML program to display a table with a list of names and ages of people.", "output": "<table>\n  <tr>\n    <th>Name</th> \n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>20</td>\n  </tr>\n  <tr>\n    <td>Dylan</td>\n    <td>15</td>\n  </tr>\n  <tr>\n    <td>Mary</td>\n    <td>18</td>\n  </tr>\n</table>", "task_type": "coding"}
{"input": "How can you execute a beta test using a web application?", "output": "To execute a beta test using a web application, you can create a prototype or minimum viable version of the web application and allow a limited number of users to access it. You can gather feedback from these users on the usability and performance of the application, which can be then used to make improvements before launching the app. Additionally, you can invite more users to join the beta program, so that you can get a wide range of user experiences and insights that can help make the web application robust.", "task_type": "coding"}
{"input": "Write a java program to print the frequencies of all characters in a string.", "output": "public class Frequency { \n\tstatic void characterFrequency(String str) \n\t{ \n\t\t// size of the string 'str' \n\t\tint n = str.length(); \n\n\t\t// 'freq[]' implemented as hash table \n\t\tint freq[] = new int[256]; \n\n\t\t// accumulate freqeuncy of each character \n\t\t// in 'str' \n\t\tfor (int i = 0; i < n; i++) \n\t\t\tfreq[str.charAt(i)]++; \n\n\t\t// traverse 'str' from left to right \n\t\tfor (int i = 0; i < n; i++) { \n\n\t\t\t// if frequency of character str.charAt(i) \n\t\t\t// is not equal to 0 \n\t\t\tif (freq[str.charAt(i)] != 0) { \n\n\t\t\t\t// print the character along with its \n\t\t\t\t// frequency \n\t\t\t\tSystem.out.print(str.charAt(i)); \n\t\t\t\tSystem.out.print(freq[str.charAt(i)] + \" \"); \n\n\t\t\t\t// update frequency of str.charAt(i) to \n\t\t\t\t// 0 so that the same character is not printed \n\t\t\t\t// again \n\t\t\t\tfreq[str.charAt(i)] = 0; \n\t\t\t} \n\t\t} \n\t} \n\n\t// Driver code \n\tpublic static void main(String args[]) \n\t{ \n\t\tString str = \"mississippi\"; \n\t\tcharacterFrequency(str); \n\t} \n}", "task_type": "coding"}
{"input": "Implement a function that calculates the greatest common divisor of two integers.", "output": "def cal_gcd(n1, n2): \n   if n2 == 0: \n       return n1 \n   else: \n       return cal_gcd(n2, n1 % n2) \n \ngcd = cal_gcd(n1, n2) \nprint (\"GCD of \" + str(n1) + \" and \" + str(n2) + \" is \" + str(gcd))", "task_type": "coding"}
{"input": "Trace the given solution to find the output for the given input.", "output": "max_num = 2\n\nLoop 1: num = 3, max_num = 3\nLoop 2: num = 4, max_num = 4\nLoop 3: num = 6, max_num = 6\nLoop 4: num = 5, max_num = 6\n\nOutput: 6", "task_type": "coding"}
{"input": "Given a list of words, write a Python program to find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.", "output": "def find_palindrome_pairs(words): \n    res = [] \n    for i in range(len(words)): \n  \n        for j in range(len(words)): \n            if i != j: \n                word = words[i] + words[j] \n                if word == word[::-1]: \n                    res.append((i, j)) \n    return res \nprint(find_palindrome_pairs(words))", "task_type": "coding"}
{"input": "Create a customer class in Java that can be used to store information about customers.", "output": "public class Customer { \n\t \n    private int id; \n    private String firstName; \n    private String lastName; \n\tprivate String email; \n    private String address;  \n\t\n    // getter and setter methods \n    public int getId() { \n        return id; \n    } \n    public void setId(int id) { \n        this.id = id; \n    } \n    public String getFirstName() { \n        return firstName; \n    } \n    public void setFirstName(String firstName) { \n        this.firstName = firstName; \n    } \n\tpublic String getLastName() { \n        return lastName; \n    } \n    public void setLastName(String lastName) { \n        this.lastName = lastName; \n    }\n\tpublic String getEmail() { \n        return email; \n    } \n    public void setEmail(String email) { \n        this.email = email; \n    }\n\tpublic String getAddress() { \n        return address; \n    } \n    public void setAddress(String address) { \n        this.address = address; \n    } \n\n}", "task_type": "coding"}
{"input": "In a React.js application, how would you set the state object 'userData' to an empty object?", "output": "To set the state object \"userData\" to an empty object in a React.js application, we would first name the class in which we intend to store the state object, and then use the useState hook to initialize the state object. Inside the useState hook, the state object would be declared and set to have an empty object as its initial state.\n\nExample:\n\nclass UserDataState {\n  const [userData, setUserData] = useState({});\n}", "task_type": "coding"}
{"input": "Create a basic HTML page with a title, a heading and a brief introduction to yourself.", "output": "<html>\n  <head>\n    <title>Introducing John Doe</title>\n  </head>\n  <body>\n    <h1>Introducing John Doe</h1>\n    <p>\n      Hi, I'm John Doe. I am an engineer and webdeveloper with 20 years of experience. I have worked on projects for some of the biggest companies in the world, and I'm proud to say that I have always delivered quality work. I'm excited to have a chance to work on new projects and be part of an amazing team.\n    </p>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Create a dictionary mapping each character in a string to its frequency", "output": "char_freq = {\n    'H': 1,\n    'e': 1,\n    'l': 2,\n    'o': 2,\n    ',': 1,\n    ' ': 1,\n    'w': 1,\n    'r': 1,\n    'd': 1,\n    '!': 1\n}", "task_type": "coding"}
{"input": "Write a code to construct a BST with the elements 11, 18, 14, 6 and 7.", "output": "# A node  \nclass Node:  \n    def __init__(self,key): \n        self.left = None\n        self.right = None\n        self.val = key \n\n# A function to insert a new node with the given key  \ndef insert(root,node): \n    if root is None: \n        root = node \n    else: \n        if root.val < node.val: \n            if root.right is None: \n                root.right = node \n            else: \n                insert(root.right, node) \n        else: \n            if root.left is None: \n                root.left = node \n            else: \n                insert(root.left, node) \n\n# Create root node with the key 11  \nroot = Node(11)  \ninsert(root,Node(18))  \ninsert(root,Node(14))  \ninsert(root,Node(6))  \ninsert(root,Node(7))", "task_type": "coding"}
{"input": "Devise a function that converts a number represented in the binary system to a decimal number.", "output": "\"\"\"\nDevise a function that converts a number represented in the binary system to a decimal number\n\"\"\"\n\ndef binary_to_decimal(number):\n    decimal = 0\n    power = 0\n    while number != 0:\n        last_digit = number % 10\n        decimal += last_digit * pow(2, power)\n        power += 1\n        number //= 10\n    return decimal", "task_type": "coding"}
{"input": "Create a Swift program to remove duplicates from a given array.", "output": "func removeDuplicates(_ array: inout [Int]) -> [Int] {\n    var encountered = Set<Int>()\n    var result: [Int] = []\n\n    for element in array {\n        if encountered.contains(element) {\n            // Do not add a duplicate element.\n        } else {\n            // Add value to the set.\n            encountered.insert(element)\n            // Append the element.\n            result.append(element)\n        }\n    }\n    return result\n}", "task_type": "coding"}
{"input": "Write Java code to create a class called Card with two string fields, rank and suit.", "output": "public class Card {\n \n    private String rank;\n    private String suit;\n \n    // constructor\n    public Card(String rank, String suit) {\n        this.rank = rank;\n        this.suit = suit;\n    }\n \n    // getters\n    public String getRank() {\n        return rank;\n    }\n \n    public String getSuit() {\n        return suit;\n    }\n \n}", "task_type": "coding"}
{"input": "Explain the differences between the sorting algorithms Insertion Sort and Bubble Sort", "output": "Insertion sort and bubble sort are two of the most common sorting algorithms. Insertion sort is based on iterating and swapping through a list to find the right location for each element. Each element is compared to the previous element and swapped if it is out of order. Bubble sort is based on comparing each pair of adjacent elements and swapping them if they are out of order. Insertion sort has a time complexity of O(n^2) in average and worst-case scenarios, while bubble sort has a time complexity of O(n^2) in both. Bubble sort requires fewer comparison compared to insertion sort, however insertion sort requires fewer swaps. Therefore, insertion sort is usually more efficient when sorting a partially sorted list.", "task_type": "coding"}
{"input": "Create a function to return a random letter from a given string.", "output": "import random \n  \ndef random_letter(string): \n    \"\"\" \n    Function to return a random letter \n    from a given string \n    \"\"\"\n  \n    # Get the length of the string \n    length = len(string) \n  \n    # Get a random index  \n    # from 0 to length - 1 \n    index = random.randint(0, length - 1) \n  \n    # Return the letter at the  \n    # randomly generated index \n    return string[index] \n  \n# Driver Code \nstring = \"Geek\"\nprint(random_letter(string))", "task_type": "coding"}
{"input": "Create a Swift program that reads in three values from the user and prints out the maximum value.", "output": "import Foundation\n\nvar a = 0\nvar b = 0\nvar c = 0\n\nprint(\"Enter 3 values:\")\n\nif let aInput = readLine() {\n    if let aInt = Int(aInput) {\n        a = aInt\n    }\n}\n\nif let bInput = readLine() {\n    if let bInt = Int(bInput) {\n        b = bInt\n    }\n}\n\nif let cInput = readLine() {\n    if let cInt = Int(cInput) {\n        c = cInt\n    }\n}\n\nvar maximum = max(max(a, b), c)\nprint(\"The maximum value is: \\(maximum)\")", "task_type": "coding"}
{"input": "Propose a fast sorting algorithm for a list of integers", "output": "The QuickSort algorithm is a fast sorting algorithm for a list of integers. QuickSort is a divide and conquer algorithm, meaning it divides a list into smaller lists and then sorts and combines the lists. It starts by partitioning the input list around a pivot element, then recursively sorts the two partitions and recombines them. Its average time complexity is O(n log n) with a space complexity of O(n).", "task_type": "coding"}
{"input": "Develop an R program that returns the node of a linked list.", "output": "# Defining a node \nNode <- function(value){\t \n   this$value <- value\n   this$next <- NULL\n   return(this)\n} \n\t\n# Defining a Linked List \nLinkedList <- function(){ \n   this$head <- NULL\n   this$tail <- NULL\n\t\n   # Function to add an element in the linked list \n   addNode <- function(value){\n        newnode <- Node(value) \n\t\t\n        # If the Linked List has no node \n        if(is.null(this$head)){ \n            this$head <- newnode\n            this$tail <- newnode \n        } else { \n\t\t\t\n            # Point tail node to newly added node\n            this$tail$next <- newnode \n            this$tail <- newnode \n        } \n\t\t\n        # Return the new linked list\n        return(this) \n   } \n\t\n   # Return the linked list\n   return(list(addNode = addNode)) \n}", "task_type": "coding"}
{"input": "Write an assembly language program to calculate 2 to the power of 8.", "output": ".data\n    x:    .word 8\n.text\n    li $v0, 2       # load 2 to $v0\n    li $t0, 1       # load 1 to $t0\n    lw $a0, x       # load 8  to $a0\n    jal pow\n    j exit\n\npow:\n    mul $t1, $v1, $v0 # r3 = $v0 * r2 \n    mflo $v1         # r2 = lo(r3)\n    addi $a0, $a0, -1 # r1 = r1-1 \n    bne $a0, 0, pow  # if r1 != 0 go to loop start\n    mfhi $v0         # r0 = hi(r3)\n    jr $ra           \n\nexit:\n    nop", "task_type": "coding"}
{"input": "Create another function to remove duplicates from the array.", "output": "def remove_duplicates(arr):\n    result = []\n    for num in arr:\n        if num not in result: # if current element is unique, add to the list.\n            result.append(num)\n    return result\n    \nnew_arr = remove_duplicates(arr)\nprint(new_arr) # [1, 2, 3, 4, 5, 6, 7]", "task_type": "coding"}
{"input": "Sort the following array using the merge sort algorithm.", "output": "def merge_sort(arr):\n    if len(arr) > 1: \n      mid = len(arr)//2\n      left_arr = arr[:mid]\n      right_arr = arr[mid:]\n\n      merge_sort(left_arr)\n      merge_sort(right_arr)\n\n      i = j = k = 0\n\n      while i < len(left_arr) and j < len(right_arr): \n        if left_arr[i] < right_arr[j]: \n            arr[k] = left_arr[i] \n            i+=1\n        else: \n            arr[k] = right_arr[j] \n            j+=1\n        k+=1\n      while i < len(left_arr): \n        arr[k] = left_arr[i] \n        i+=1\n        k+=1\n      \n      while j < len(right_arr): \n        arr[k] = right_arr[j] \n        j+=1\n        k+=1", "task_type": "coding"}
{"input": "Write a function to detect the smallest window in a string containing all characters of another string.", "output": "def smallest_window(str1, str2):\n min_str = \"\"\n min_size = float(\"inf\")\n \n for i in range(len(str1)):\n  for j in range(i+1, len(str1)):\n   curr_str = str1[i:j+1]\n   count = 0\n   for ch in str2:\n    if ch in curr_str:\n     count += 1\n   if len(curr_str) < min_size and count == len(str2):\n    min_str = curr_str\n    min_size = len(curr_str)\n return min_str\n \nprint(smallest_window(\"abcde\", \"ade\"))", "task_type": "coding"}
{"input": "Complete the following code to implement a binary search.", "output": "def binary_search(arr, x):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "task_type": "coding"}
{"input": "Write a JavaScript function that returns that number of elements from an array of numbers which sum up to a given target.", "output": "function findElementsSum(array, target){\n    let result = [];\n    for (let i = 0; i < array.length; i++){\n        for (let j = i+1; j < array.length; j++){\n            if (array[i] + array[j] == target){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result;\n}", "task_type": "coding"}
{"input": "Write a Java program to find the largest number among three numbers entered by the user.", "output": "import java.util.Scanner;\n \npublic class Main {\n \n    public static void main(String[] args) {\n     \n        Scanner input = new Scanner(System.in);\n        System.out.println(\"Enter three numbers:\");\n \n        int n1 = input.nextInt();\n        int n2 = input.nextInt();\n        int n3 = input.nextInt();\n \n        int result = Math.max(n1, Math.max(n2, n3));\n \n        System.out.println(\"Largest number: \" + result);\n    }\n}", "task_type": "coding"}
{"input": "What is a multithreaded application and how does it work?", "output": "A multithreaded application is an application that creates multiple concurrent threads to execute tasks in parallel. These threads can communicate with each other and work together to accomplish a task faster than if they were executed sequentially. A multithreaded application makes use of modern computer hardware which has multiple core processors, each with its own thread. The threads then share access to a pool of memory and hardware resources which can be accessed and manipulated simultaneously. By working together, the threads can work faster and complete the task before any single thread working alone.", "task_type": "coding"}
{"input": "Sort the following array in ascending order using insertion sort in JavaScript.", "output": "function insertionSort(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    let currentVal = arr[i];\n    for (var j = i - 1; j >= 0 && arr[j] > currentVal; j--) {\n      arr[j + 1] = arr[j];\n    }\n    arr[j + 1] = currentVal;\n  }\n  return arr;\n}\n\n// Test\nlet arr = [7, 2, 5, 3, 8];\ninsertionSort(arr);\n// [2, 3, 5, 7, 8]", "task_type": "coding"}
{"input": "Given a String and a list of words, write a Python program to determine if the String is a sequence of any of the words in the list.", "output": "def is_valid_sequence(string, words_list):\n    str_index = 0\n    for word in words_list:\n        if len(string[str_index:]) < len(word):\n            return False\n        if string[str_index:str_index+len(word)] != word:\n            return False\n        str_index += len(word)\n    return True", "task_type": "coding"}
{"input": "Construct an algorithm that checks if the given sequence is an arithmetic sequence.", "output": "def is_arithmetic_sequence(sequence):\n    is_arithmetic = True\n    diff = 0\n    for i in range(1, len(sequence)):\n        if i ==1:\n            diff = sequence[i]-sequence[i-1]\n        else:\n            new_diff = sequence[i]-sequence[i-1]\n            if new_diff != diff:\n                is_arithmetic = False\n                break\n    return is_arithmetic", "task_type": "coding"}
{"input": "Given a binary tree, write a code to search a given value in the tree.", "output": "def search_tree(tree, value):\n    # If the tree is empty\n    if not tree:\n        return False\n \n    if value == tree.val:\n        return True\n \n    # If the given value is less than the tree's value\n    # search left subtree\n    elif value < tree.val:\n        return search_tree(tree.left, value)\n \n    # If the given value is more than tree's value\n    # search right subtree\n    else:\n        return search_tree(tree.right, value)", "task_type": "coding"}
{"input": "Implement the following algorithm in Java.", "output": "public void bubbleSort(int[] arr){\n  for (int i = 0; i < arr.length - 1; i++) {\n    for (int j = 0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        int temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n}", "task_type": "coding"}
{"input": "Create a function that can transform a string of text into an object containing the number of occurrences of each letter in the string.", "output": "\"\"\"\nCreate a function that can tranform a string of text into an object containing the number of occurrences of each letter in the string\n\"\"\"\ndef count_letters(s):\n  letter_dict = {}\n  for letter in s:\n    if letter in letter_dict:\n      letter_dict[letter] += 1\n    else:\n      letter_dict[letter] = 1\n  \n  return letter_dict\n\nif __name__ == '__main__':\n    print(count_letters('Hello World')) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, 'W': 1, 'r': 1, 'd': 1}", "task_type": "coding"}
{"input": "Construct a 3 level hierarchical tree data structure in PHP.", "output": "class Node {\n    public $item;\n    public $parent;\n    public $children;\n\n    public function __construct($item, $parent = null) {\n        $this->item = $item;\n        $this->parent = $parent;\n        $this->children = array();\n    }\n\n    public function addChild($item) {\n        $node = new Node($item, $this);\n        array_push($this->children, $node);\n        return $node;\n    }\n}", "task_type": "coding"}
{"input": "Describe the working of a set in Python.", "output": "A set in Python is an unordered collection of unique elements. It is an efficient data structure which provides a variety of operations such as membership testing, intersection, union and difference. Sets in Python do not allow duplicate elements and also do not maintain any particular order of the elements. Sets are mutable meaning that elements can be added or removed from them.", "task_type": "coding"}
{"input": "How does a for loop work?", "output": "A for loop is a type of loop used in programming languages to execute a set of instruction multiple times. It consists of an initialization statement, condition expression, and a loop body. The code block of the loop is executed until the condition expression evaluates to false. The initialization statement is processed once, while the condition expression is evaluated each time before the loop body is executed. If the condition expression is true, the loop is executed; otherwise, the loop is terminated.", "task_type": "coding"}
{"input": "What are the key differences between C and C++?", "output": "The key differences between C and C++ are that C is a procedural programming language while C++ is an object-oriented programming language. C does not support classes, whereas C++ does. C does not support function or operator overloading whereas C++ does. C does not support exception handling, while C++ does. C does not support templates, while C++ does. Additionally, C does not support reference variables, while C++ does.", "task_type": "coding"}
{"input": "Debug this Java code to make it work.", "output": "public class test\n{\n  public static void main(String args[])\n  {\n    int a = 5;\n    int b = 0;\n    if(b!=0)\n    {\n      int c = a + b;\n      System.out.println(\"Result is: \" + c);\n    }\n    else\n    {\n      System.out.println(\"Error: Cannot divide by 0!\");\n    }\n  }\n}", "task_type": "coding"}
{"input": "You are given an array of integers. Write a program to find the maximum number in this array.", "output": "def max_int(arr):\n  max_val = arr[0]\n  for i in range(1, len(arr)):\n    if arr[i] > max_val:\n      max_val = arr[i]\n  return max_val\n\nprint(max_int([10, 5, 11, 23, 9]))", "task_type": "coding"}
{"input": "Rewrite the following in-place insertion sort algorithm in Java.", "output": "public class InsertionSort { \n\tpublic static void inplaceInsertionSort(int[] array) { \n\t\t// Iterate over array elements \n\t\tfor (int i = 1; i < array.length; i++) { \n\t\t\tint value = array[i]; \n\t\t\tint j = i; \n\t\t\t// Check whether the adjacent element in \n\t\t\t// left side is greater or not \n\t\t\twhile (j > 0 && array[j - 1] > value) { \n\t\t\t\t// shifting the elements \n\t\t\t\tarray[j] = array[j - 1]; \n\t\t\t\tj--; \n\t\t\t} \n\t\t\t// moving the element in right side \n\t\t\tarray[j] = value; \n\t\t} \n\t} \n\t// Driver Code \n\tpublic static void main(String[] args) { \n\t\tint[] arr = { 20, 12, 10, 15, 2 }; \n\t\tinplaceInsertionSort(arr); \n\t\tfor (int i : arr) { \n\t\t\tSystem.out.print(i + \" \"); \n\t\t} \n\n\t}", "task_type": "coding"}
{"input": "Write a function to determine the largest integer in an unordered array.", "output": "def largest_int(arr): \n    largest_int = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] > largest_int: \n            largest_int = arr[i] \n    return largest_int \n  \n# Driver Code\narray = [6, 8, 1, 3, 4]\nprint(largest_int(array))", "task_type": "coding"}
{"input": "Create a cURL request for getting the response from an API endpoint.", "output": "$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n    CURLOPT_URL => \"https://api.example.com/endpoint\",\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 0,\n    CURLOPT_FOLLOWLOCATION => true,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;", "task_type": "coding"}
{"input": "Divide a list of numbers into two smaller lists, one with even numbers and one with odd numbers.", "output": "def divide_list(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\n# Driver Code\nnumbers = [1, 2, 3, 4, 5, 6]\neven_list, odd_list = divide_list(numbers)\nprint(even_list) # [2, 4, 6]\nprint(odd_list)  # [1, 3, 5]", "task_type": "coding"}
{"input": "Create a program to input numerical data which can then be stored and retrieved into/from a database.", "output": "def store_data(table_name, data):\n    conn = sqlite3.connect('database.db') \n    cursor = conn.cursor()\n\n    cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"\"\" + table_name + \"(data text)\") \n  \n    insert_query = \"INSERT INTO \" + table_name + \" VALUES (?)\"\n    cursor.execute(insert_query, (data,))\n  \n    conn.commit() \n  \ndef retrieve_data(table_name):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n\n    return_query = \"SELECT * FROM \" + table_name\n    cursor.execute(return_query) \n    return cursor.fetchall()", "task_type": "coding"}
{"input": "Describe a pipelined architecture for a processor", "output": "A pipelined Processor architecture is one in which the instruction set is divided into separate stages, each associated with a specific segment in the computation process. As an instruction is entered, it is routed to the appropriate stage in the pipeline and progresses sequentially, thereby allowing the processor to complete multiple instructions simultaneously. The stages, known as the pipeline stages, can include IF (Instruction Fetch), ID (Instruction Decode), EX (Execution), MEM (Memory Access) and WB (Write-Back). The IF and ID stages typically handle instruction fetch and decode, while EX and MEM perform instruction execution and memory access, respectively. The final stage, WB, is responsible for writing the result to memory or a register.", "task_type": "coding"}
{"input": "Design a function to validate a phone number.", "output": "def check_phone_number(phone_number):\n  #Remove any non-numeric characters\n  phone_number = phone_number.replace(\"-\", \"\")\n  phone_number = phone_number.replace(\" \", \"\")\n\n  #Check if the phone number is 10 digits long\n  if (len(phone_number) != 10):\n    return False\n\n  #Check each digit is a number\n  for digit in phone_number:\n    if not digit.isdigit():\n      return False\n\n  #Check the area code is valid\n  area_code = phone_number[0:3]\n  valid_area_codes = [\"201\", \"212\", \"203\", \"202\", \"205\"]\n  if area_code not in valid_area_codes:\n    return False\n\n  #All tests passed\n  return True\n\nprint(check_phone_number('212-555-0000'))\n\nOutput:\nTrue", "task_type": "coding"}
{"input": "Construct a generic BST in Swift", "output": "class Node<T> {\n    var value: T\n    weak var parent: Node?\n    var left: Node?\n    var right: Node?\n\n    init(value: T) {\n        self.value = value\n    }\n}\n\nclass BinarySearchTree<T: Comparable> {\n    fileprivate var root: Node<T>?\n\n    init(elements: [T]) {\n        for element in elements {\n            add(value: element)\n        }\n    }\n    // Add additional functions here \n}", "task_type": "coding"}
{"input": "Use JavaScript to convert 24-hour time format to 12-hour time format.", "output": "function convertTimeFormat(time) {\n    let hour = time.slice(0, 2);\n    let am_or_pm = hour >= 12 ? 'pm' : 'am';\n    let twelve_hour_format = (hour % 12 ? hour % 12 : 12) + time.slice(2, 5) + am_or_pm;\n    \n    return twelve_hour_format;\n}", "task_type": "coding"}
{"input": "Create a method in JavaScript that will return the area of a triangle.", "output": "// Calculating area of triangle in JavaScript\nfunction areaOfTriangle(a, b, c) {\n    // Calculate the semi-perimeter of the triangle\n    var s = (a + b + c) / 2;\n    \n    // Calculate the area of triangle using Heron's Formula\n    var area =  Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    // Return the area of triangle\n    return area;\n}", "task_type": "coding"}
{"input": "Understand the parameters used in the following code and explain their purpose.", "output": "The parameters x, y and z are used in this function to represent arbitrary values. They can represent integers, floats, strings, lists, dictionaries, objects, etc. Depending on the specific implementation of this function, the parameters can take any meaning, representing any value. For example, it could be a function that performs an arithmetic operation, in which case x, y and z will represent the three numbers in the operation, or a function that processes a list, in which case x, y and z will represent the start index, end index and the list respectively.", "task_type": "coding"}
{"input": "What is the difference between a list and a tuple in Python?", "output": "The main difference between a list and a tuple in Python is that a list is mutable while a tuple is immutable. This means that a list can be changed or modified, while a tuple cannot. Tuples also have better performance than lists in terms of speed and memory usage. Tuples are also generally easier to read than lists, since they don't have commas separating their elements.", "task_type": "coding"}
{"input": "What is an event in JavaScript?", "output": "In JavaScript, an event is an action that a user performs that causes a change in the state of the program. Events can be generated by a user (e.g. pressing a button, clicking a link), by the browser (e.g. loading a page, scrolling, resizing the window) or by the system (e.g. device orientation changes, network connection changes). Events can trigger handlers (functions in JavaScript) that respond to the event with the appropriate action.", "task_type": "coding"}
{"input": "Generate HTML code for a table that displays the result of multiplication for the numbers from 1 to 10.", "output": "<table>\n  <thead>\n    <tr>\n      <th>x</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>6</td>\n      <td>8</td>\n      <td>10</td>\n      <td>12</td>\n      <td>14</td>\n      <td>16</td>\n      <td>18</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>3</td>\n      <td>6</td>\n      <td>9</td>\n      <td>12</td>\n      <td>15</td>\n      <td>18</td>\n      <td>21</td>\n      <td>24</td>\n      <td>27</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>4</td>\n      <td>8</td>\n      <td>12</td>\n      <td>16</td>\n      <td>20</td>\n      <td>24</td>\n      <td>28</td>\n      <td>32</td>\n      <td>36</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>5</td>\n      <td>10</td>\n      <td>15</td>\n      <td>20</td>\n      <td>25</td>\n      <td>30</td>\n      <td>35</td>\n      <td>40</td>\n      <td>45</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>6</td>\n      <td>12</td>\n      <td>18</td>\n      <td>24</td>\n      <td>30</td>\n      <td>36</td>\n      <td>42</td>\n      <td>48</td>\n      <td>54</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>7</td>\n      <td>14</td>\n      <td>21</td>\n      <td>28</td>\n      <td>35</td>\n      <td>42</td>\n      <td>49</td>\n      <td>56</td>\n      <td>63</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>8</td>\n      <td>16</td>\n      <td>24</td>\n      <td>32</td>\n      <td>40</td>\n      <td>48</td>\n      <td>56</td>\n      <td>64</td>\n      <td>72</td>\n      <td>80</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>9</td>\n      <td>18</td>\n      <td>27</td>\n      <td>36</td>\n      <td>45</td>\n      <td>54</td>\n      <td>63</td>\n      <td>72</td>\n      <td>81</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <td>10</td>\n      <td>10</td>\n      <td>20</td>\n      <td>30</td>\n      <td>40</td>\n      <td>50</td>\n      <td>60</td>\n      <td>70</td>\n      <td>80</td>\n      <td>90</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table>", "task_type": "coding"}
{"input": "Extract the phone numbers from a string of text", "output": "import re\n\ndef extract_phone_numbers(text): \n    phones = re.findall(\"\\(\\d{3}\\) \\d{3}\\-\\d{4}\",text) \n    return phones\n\nprint(extract_phone_numbers(text))\n\n# Output\n['(202) 555-0123', '(703) 555-9876']", "task_type": "coding"}
{"input": "How would you write a function in Python for generating a Fibonacci sequence?", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "task_type": "coding"}
{"input": "Write a function in Java that takes a string consisting of brackets and output true if the brackets are properly nested, else output false.", "output": "public static boolean isBalanced(String str) \n{ \n    if(str.length() == 0) \n        return true; \n      \n    Stack<Character> stack  = new Stack<Character>(); \n  \n    for(int i = 0; i < str.length(); i++) \n    { \n        char current = str.charAt(i); \n          \n        if(current == '{' || current == '(' || current == '[') \n        { \n        stack.push(current); \n        } \n  \n        if(current == '}' || current == ')' || current == ']') \n        { \n            if(stack.isEmpty()) \n                return false; \n  \n            char last = stack.peek(); \n            if(current == '}' && last == '{' || current == ')' && last == '(' || current == ']' && last == '[') \n                stack.pop(); \n            else \n                return false; \n        }\n    } \n \n    return stack.isEmpty(); \n}", "task_type": "coding"}
{"input": "Generate a random password using a given string of characters.", "output": "\"\"\"\nGenerate a random password using a given string of characters\n\"\"\"\n\nimport random \n\ndef generate_password(string):\n    password = ''\n    for _ in range(16):\n        password += random.choice(string)\n    return password\n\nif __name__ == '__main__':\n    string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"\n    print(generate_password(string))", "task_type": "coding"}
{"input": "Create a program that prints the vowels in a string.", "output": "#include <iostream> \n#include <string> \n\nvoid print_vowels(std::string str) \n{ \n    for (int i = 0; i < str.length(); i++)\n    {\n        if (str[i] =='a' || str[i] =='e' || str[i] =='i'\n            || str[i] =='o' || str[i] =='u'||str[i] =='A'\n            || str[i] =='E' || str[i] =='I' || str[i] =='O'\n            || str[i] =='U') \n            std::cout << str[i] << \" \" ;\n    } \n    std::cout << std::endl;\n}\n\nint main() \n{ \n    std::string str = \"Hello World!\"; \n    print_vowels(str); \n    return 0; \n}", "task_type": "coding"}
{"input": "Write a code to traverse a given tree in breadth-first order.", "output": "// function to traverse a tree in breadth-first order\nfunction traverseBreadthFirst(root) {\n    // create an empty array to store nodes\n    const nodes = [];\n\n    // create an empty array to store the visited nodes\n    const visited = [];\n\n    // add the root node to the array\n    nodes.push(root);\n\n    // loop through the nodes in the array\n    while (nodes.length) {\n        // get the first node in the array\n        const node = nodes.shift();\n\n        // add it to the visited array\n        visited.push(node);\n\n        // loop through the node's children\n        for (let child of node.children) {\n            // add the child to the array if it is not visited\n            if (!visited.includes(child)) {\n                nodes.push(child);\n            }\n        }\n    }\n\n    // return the visited array\n    return visited;\n}", "task_type": "coding"}
{"input": "Write an Angular directive to validate input fields.", "output": "@Directive({ selector: '[validateInput]' })\nexport class InputValidationDirective {\n  @Input() validateInput: string;\n  \n  constructor(private el: ElementRef) {\n  }\n\n  @HostListener('keyup') onKeyup() {\n    let value = this.el.nativeElement.value\n    if(!this.validateInput || this.validateInput === 'creditcard'){\n       //creditcard validation logic\n    }\n    if(this.validateInput ==='number'){\n       //number validation logic\n    }\n  }\n}", "task_type": "coding"}
{"input": "Generate a random 29 character hexadecimal string using javascript.", "output": "function generateRandomHexString(length) {\n    let result = '';\n    const characters = '0123456789ABCDEF';\n\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n \n    return result;\n}\nlet hexString = generateRandomHexString(29);\nconsole.log(hexString);", "task_type": "coding"}
{"input": "Write a Java program to compare two strings lexicographically.", "output": "public class CompareStringLexicographically { \n    public static void main(String[] args) \n    { \n        String str1 = \"GeeksforGeeks\"; \n        String str2 = \"GeeksQuiz\"; \n  \n        // Comparing both strings lexicographically \n        int result = str1.compareTo(str2); \n  \n        // checking for the comparison output \n        if (result > 0) \n            System.out.println(\"str1 is greater than str2\"); \n        else if (result < 0) \n            System.out.println(\"str1 is smaller than str2\"); \n        else\n            System.out.println(\"str1 is equal to str2\"); \n    } \n}", "task_type": "coding"}
{"input": "Create the following function that parses a valid IP address from a string and returns the address string without delimiters and periods.", "output": "def parse_ip_address(ip_string):\n    ip_list = ip_string.split(\".\")\n    ip_str = \"\".join(ip_list)\n    return ip_str\n\nif __name__ == '__main__':\n    ip_str = parse_ip_address(\"192.168.137.8\")\n    print(ip_str)", "task_type": "coding"}
{"input": "Create an algorithm for sorting a list of numbers using bubble sort.", "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nbubble_sort([3,1,5,4,2])", "task_type": "coding"}
{"input": "How would you sort an array of integers using Merge Sort algorithm?", "output": "def merge_sort(arr): \n    # Base case: if the list has 0 or 1 elements it is already sorted \n    if len(arr) > 1: \n        mid = len(arr)//2 \n        # Split the array \n        left = arr[:mid]  \n        right = arr[mid:]  \n  \n        # Recursively call merge_sort on left and right half\n        merge_sort(left) \n        merge_sort(right) \n  \n        # Set up variables to help track merges\n        i = 0 # left array index \n        j = 0 # right array index \n        k = 0 # result array index \n  \n        # Merge the two halves \n        while i < len(left) and j < len(right): \n            if left[i] < right[j]: \n                arr[k] = left[i] \n                i+=1 \n            else: \n                arr[k] = right[j] \n                j+=1 \n            k+=1\n          \n        # Copy the rest of the left half and right half \n        while i < len(left): \n            arr[k] = left[i] \n            i+=1\n            k+=1\n          \n        while j < len(right): \n            arr[k] = right[j] \n            j+=1\n            k+=1", "task_type": "coding"}
{"input": "Create a program in Python to remove duplicate values from a list.", "output": "def remove_duplicates(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\nlist_a = [1, 2, 2, 3, 4, 4]\nlist_a = remove_duplicates(list_a)\nprint(list_a)", "task_type": "coding"}
{"input": "Write a code to convert a given string of English characters to corresponding Morse code.", "output": "def morse_encode(input_string):\n    morse_encoder = {\n        \"A\":\".- \",\n        \"B\":\"-... \",\n        \"C\":\"-.-. \",\n        \"D\":\"-.. \",\n        \"E\":\" . \",\n        \"F\":\"..-. \",\n        \"G\":\"--. \",\n        \"H\":\".... \",\n        \"I\":\".. \",\n        \"J\":\".--- \",\n        \"K\":\"-.- \",\n        \"L\":\".-.. \",\n        \"M\":\"-- \",\n        \"N\":\"-. \",\n        \"O\":\"--- \",\n        \"P\":\".--. \",\n        \"Q\":\"--.- \",\n        \"R\":\".-. \",\n        \"S\":\"... \",\n        \"T\":\"- \",\n        \"U\":\"..- \",\n        \"V\":\"...- \",\n        \"W\":\".-- \",\n        \"X\":\"-..- \",\n        \"Y\":\"-.-- \",\n        \"Z\":\"--.. \",\n        \" \": \"  \"\n    }\n    morse_string = []\n\n    for char in input_string.upper():\n        encoded_char = morse_encoder.get(char)\n        morse_string.append(encoded_char)\n    \n    return ''.join(morse_string)\n\nprint(morse_encode(\"Hello World!\")) # Output: \".... . .-.. .-.. ---  .-- --- .-. .-.. -.. ! \"", "task_type": "coding"}
{"input": "Write a function that takes two strings as parameters and returns whether they are an anagram of each other or not.", "output": "def is_anagram(string1, string2):\n    if sorted(string1) == sorted(string2):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    string1 = \"abcde\"\n    string2 = \"edcba\"\n\n    result = is_anagram(string1, string2)\n    print(result)", "task_type": "coding"}
{"input": "Implement a sorting algorithm for a given array in Python.", "output": "sorted_array = [1, 2, 3, 4]\n\ndef SortArray(array):\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\n\nsorted_array = SortArray(array)", "task_type": "coding"}
{"input": "Given a 2D array of integers, write a Java method to find the sum of an hourglass pattern.", "output": "public static int findSumOfHourglass(int[][] arr){ \n    int sum = 0;\n    for(int i = 0; i < arr.length - 2; i++){ \n        for(int j = 0; j < arr[i].length - 2; j++){ \n            int tempSum = arr[i][j] + arr[i][j+1] + arr[i][j+2] + \n                arr[i+1][j+1] + \n                arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]; \n            if(sum < tempSum) \n                sum = tempSum; \n        } \n    } \n    return sum; \n}", "task_type": "coding"}
{"input": "Design a Python class to represent geometric shapes.", "output": "class GeometricShape:\n\n    def __init__(self, sides):\n        self.sides = sides\n\n    def area(self):\n        if self.sides == 3:\n            return ((self.sides[0] + self.sides[1] + self.sides[2]) / 2)\n        else:\n            return 0", "task_type": "coding"}
{"input": "Create a C++ program for randomly shuffling an array of integers.", "output": "#include <iostream>\n#include <algorithm>\n#include <random>\n\nvoid shuffleArray(int array[], int size) {\n\tstd::random_device rd;\n\tstd::mt19937 g(rd()); \n\tstd::shuffle(array, array+size, g); \n}\n\nint main() \n{ \n\tint array[] = {1, 2, 3, 4, 5, 6, 7, 8}; \n\tint size = sizeof(array) / sizeof(array[0]); \n\n    // Print original array\n    std::cout << \"Original array: \";\n    for (int i : array)\n        std::cout << i << \" \";\n    std::cout << \"\\n\";\n\n    // Shuffle array\n\tshuffleArray(array, size); \n\n    // Print shuffled array\n    std::cout << \"Shuffled array: \";\n    for (int i : array)\n        std::cout << i << \" \";\n    std::cout << \"\\n\";\n\n\treturn 0; \n}", "task_type": "coding"}
{"input": "Write a code that takes the input of two strings, and returns the longest common substring in them.", "output": "\"\"\"\nA code that takes the input of two strings, and returns the longest common substring in them\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nif __name__ == '__main__': \n    s1 = \"Hello World\"\n    s2 = \"Hey World\"\n    print(\"The longest common substring is: %s\" % longest_common_substring(s1, s2))", "task_type": "coding"}
{"input": "Given two arrays of integers, find a pair of values (one from each array) that you can swap to give the two arrays the same sum.", "output": "def find_pair(arr1, arr2):\n    sum_arr1 = sum(arr1)\n    sum_arr2 = sum(arr2)\n    diff = abs(sum_arr1 - sum_arr2)\n\n    for x in arr1:\n        for y in arr2:\n            if x + y == diff:\n                return (x, y)\n\n    return -1", "task_type": "coding"}
{"input": "Write a code to add two linked lists of different sizes.", "output": "# adding two linked lists\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef addTwoLists(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\n    # looping until one list has all nodes added\n    while(first is not None or second is not None): \n        Node = Node() \t\t# Node data\n\n        Node.data = carry + (first.data if first else 0) + (second.data if second else 0) \n\t\t\n        # update carry\n        if Node.data >= 10: \n            Node.data = Node.data % 10\n            carry = 1\n        else: \n            carry = 0\n \n        temp = Node\n        # Move first, second pointers ahead\n        if first is not None: \n            first = first.next\n        if second is not None: \n            second = second.next\n\n        # Attach the previous node to the current node\n        if prev is not None: \n            prev.next = Node \n        prev = Node\n\t\t\n    if carry > 0: \n        temp.next = Node \n        temp.data = carry \n    return result", "task_type": "coding"}
{"input": "Given a matrix, write a program to fill it with zeroes in constant time and space complexity.", "output": "def fill_matrix_zeros(matrix):\n    n, m = len(matrix), len(matrix[0])\n    col0_zero = False\n    for i in range(n):\n        if matrix[i][0] == 0:\n            col0_zero = True\n        for j in range(1, m):\n            if matrix[i][j] == 0:\n                matrix[i][0] = 0\n                matrix[0][j] = 0\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][0] == 0 or matrix[0][j] == 0:\n                matrix[i][j] = 0\n\n    if matrix[0][0] == 0:\n        for j in range(m):\n            matrix[0][j] = 0\n\n    if col0_zero:\n        for i in range(n):\n            matrix[i][0] = 0", "task_type": "coding"}
{"input": "Write a Python program to print out the longest word entered by the user.", "output": "def find_longest_word(string): \n    # split the string \n    word_list = string.split() \n  \n    # sort the list \n    word_list.sort(key = len) \n  \n    # return the last word \n    # which will be the longest \n    return word_list[-1]\n  \n# driver code \nstring = \"Happiness is the best thing\"\n \nprint(find_longest_word(string)) # Output: Happiness", "task_type": "coding"}
{"input": "Use CSS to create a dark mode version of the following website.", "output": "body {\n  background-color: #2d2d2d;\n  color: #ffffff;\n}\n\n// Set the typeface\nbody {\n  font-family: \"Open Sans\", Helvetica, sans-serif;\n}\n\n// Create the dark mode toggle switch\n.dark-mode-toggle{\n  margin-left: 10px;\n}\n\n// Create a dark background for all elements\n * {\n  background-color: #2d2d2d;\n}\n\n// Change the link color\na {\n  color: #38a9ff;\n}\n\n// Change the button color\nbutton {\n  background-color: #38a9ff;\n  border-radius: 10px;\n  color: #2d2d2d;\n}", "task_type": "coding"}
{"input": "Create a HTML page that shows the data provided in an interactive table.", "output": "<html>\n  <head>\n    <title>Interactive Table</title>\n  </head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>First Name</th>\n          <th>Last Name</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for item in data %}\n          <tr>\n            <td>{{ item.id }}</td>\n            <td>{{ item.first_name }}</td>\n            <td>{{ item.last_name }}</td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Using React, create a component that displays a greeting with the current time.", "output": "class Greeting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date().toLocaleTimeString(), \n    };\n  }\n  render() {\n    return <h3>Good {this.props.timeOfDay}, the current time is {this.state.time}.</h3>;\n  }\n}", "task_type": "coding"}
{"input": "Create a Java program to find the area and circumference of a circle with a given radius.", "output": "public class Circle\n{\n    public static void main(String[] args)\n    {\n        double radius = 6.2;\n        double area = Math.PI * radius * radius;\n        double circumference = 2 * Math.PI * radius;\n\n        System.out.println(\"Area = \" + area);\n        System.out.println(\"Circumference = \" + circumference);\n    }\n\n}", "task_type": "coding"}
{"input": "Sort the following list of numbers in increasing order without using any built-in sorting method.", "output": "def sort_increasing(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n\narr = [2, 5, 3, 8, 7] \nsorted_arr = sort_increasing(arr)\nprint(*sorted_arr) # Output: 2 3 5 7 8", "task_type": "coding"}
{"input": "Create an array containing 5 records of emplyee data, including name, age and city.", "output": "let employeeData = [\n  {\n    \"name\": \"John\",\n    \"age\": 24,\n    \"city\": \"New York\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 28,\n    \"city\": \"London\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 32,\n    \"city\": \"Los Angeles\"\n  },\n  {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"San Francisco\"\n  },\n  {\n    \"name\": \"Greg\",\n    \"age\": 30,\n    \"city\": \"Paris\"\n  }\n]", "task_type": "coding"}
{"input": "Write a Python script to merge two given dictionaries into one", "output": "dict1 = {'a': 1, 'c': 3, 'd': 4}\ndict2 = {'a': 6, 'b': 2, 'c': 4}\n\ndict3 = {**dict1, **dict2}\nprint(dict3) # {'a': 6, 'c': 4, 'd': 4, 'b': 2}", "task_type": "coding"}
{"input": "Write a Python code to find the largest and the second largest numbers in a list.", "output": "def getLargestTwo(l):\n    first_largest = second_largest = float('-inf')\n    for num in l:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif num > second_largest and num != first_largest:\n            second_largest = num\n    return (first_largest, second_largest)", "task_type": "coding"}
{"input": "Generate a correct C++ program that computes the square root of a given number.", "output": "float square_root(float number){\n    float low = 0;\n    float high = number;\n    float mid;\n    \n    while (low <= high){\n        mid = (low + high) / 2;\n        if (mid * mid == number){\n            return mid;\n        }\n        else if (mid * mid > number){\n            high = mid;\n        }\n        else {\n            low = mid;\n        }\n    }\n    return -1;\n}", "task_type": "coding"}
{"input": "Given a Dataframe, select the two columns as specified and store into a new separate Dataframe.", "output": "import pandas as pd \n  \ndata = {'Name':['Tom', 'nick', 'krish', 'jack'], \n        'Age':[20, 21, 19, 18] \n       } \n\ndf = pd.DataFrame(data)  \n\ncols = ['Name', 'Age']\n\n# Creating new Dataframe  \ndf_new = df[cols] \n\nprint(df_new)", "task_type": "coding"}
{"input": "Write a JavaScript program to accept a string and check if it is a palindrome or not.", "output": "function isPalindrome(str) { \n    var len = str.length; \n    for ( var i = 0; i < Math.floor(len/2); i++ ) { \n        if (str[i] !== str[len - 1 - i]) { \n            return false; \n        } \n    } \n\n    return true; \n}", "task_type": "coding"}
{"input": "Write the C++ code to print the smallest prime factor of a given number", "output": "int main()\n{\n    int factor = 2;\n    int number = 54;\n\n    while (number > 1)\n    {\n        if (number % factor == 0)\n        {\n            cout << factor << endl;\n            number /= factor;\n        }\n        else\n            factor++;\n    }\n    return 0;\n}", "task_type": "coding"}
{"input": "Create a class in C++ for a light emitting diode (LED) object that describes the color of the LED.", "output": "class LED \n{ \n    private: \n    int color; \n\npublic: \n    // default constructor \n    LED() \n    { \n        color = 0; \n    } \n\n    // setter function \n    void setColor(int c) \n    { \n        color = c; \n    } \n\n    // getter function  \n    int getColor() \n    { \n        return color; \n    } \n};", "task_type": "coding"}
{"input": "Implement a function in C++ that takes two strings as parameters and returns the longest common substring between the two.", "output": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n//function to find common substring\nstring longestCommonSubstring(string str1, string str2)\n{\n    int m = str1.length();\n    int n = str2.length();\n    int table[m + 1][n + 1];\n \n    //fill the lookup table\n    int res_len = 0;\n    string res;\n    for(int i=0; i<=m; i++)\n    {\n     for(int j=0; j<=n; j++)\n     { \n         // If first string is empty, only the second string is found in second string\n         if(i==0 || j==0)\n            table[i][j] = 0;\n         // if matching character\n         else if(str1[i-1] == str2[j-1])\n         {\n            table[i][j] = table[i - 1][j - 1] + 1;\n            //update the result\n            if (table[i][j] > res_len)\n            {\n                res_len = table[i][j];\n                int index = i - res_len;\n                res = str1.substr(index,res_len);\n            }\n        }\n        else table[i][j] = 0;\n      }\n    }\n \n  return res;\n}\n\n// Driver Code\nint main()\n{\n    string str1 = \"stackoverflow\";\n    string str2 = \"overburning\";\n \n    cout << rand_string(str1, str2);\n    return 0;\n}", "task_type": "coding"}
{"input": "Create a TensorFlow program to implement a multi-layer neural network", "output": "import tensorflow as tf\n\n# create the model\nmodel = tf.keras.models.Sequential()\n\n# add layers to the model\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(32, activation='relu'))\nmodel.add(tf.keras.layers.Dense(16, activation='relu'))\nmodel.add(tf.keras.layers.Dense(8, activation='sigmoid'))\nmodel.add(tf.keras.layers.Dense(4, activation='softmax'))\n\n# compile the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])", "task_type": "coding"}
{"input": "Create a c++ class to store data for a student including their name, age, and address.", "output": "class Student \n{ \n    private: \n        string name; \n        int age; \n        string address; \n  \n    public: \n        void setName(string name); \n        void setAge(int age); \n        void setAddress(string address); \n  \n        string getName(); \n        int getAge(); \n        string getAddress(); \n};", "task_type": "coding"}
{"input": "Create a HTML page to display a navigation bar with a dropdown list that includes a list of the months of the year.", "output": "<nav>\n  <div class=\"dropdown\">\n    <button class=\"dropbtn\">Months</button>\n    <div class=\"dropdown-content\">\n      <a href=\"\">January</a>\n      <a href=\"\">February</a>\n      <a href=\"\">March</a>\n      <a href=\"\">April</a>\n      <a href=\"\">May</a>\n      <a href=\"\">June</a>\n      <a href=\"\">July</a>\n      <a href=\"\">August</a>\n      <a href=\"\">September</a>\n      <a href=\"\">October</a>\n      <a href=\"\">November</a>\n      <a href=\"\">December</a>\n    </div>\n  </div>\n</nav>", "task_type": "coding"}
{"input": "Suggest a way to find the number of occurrences of a time value in a given array.", "output": "We can use the reduce method to count the number of occurrences of a certain time value in the array.\n\nvar array = [10:00, 11:30, 10:00, 8:30, 10:00];\nvar desiredTime = '10:00';\n\nvar count = array.reduce((n, val) => {\n    return n + (val === desiredTime);\n}, 0);\n\nconsole.log(count); // output: 3", "task_type": "coding"}
{"input": "Develop Python code to print out all the divisors of a given number", "output": "def get_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \n\nprint(get_divisors(30)) # output [1, 2, 3, 5, 6, 10, 15, 30]", "task_type": "coding"}
{"input": "Write a JavaScript program to find the sum of two numbers using a recursive function.", "output": "// create a recursive function to find the sum of two numbers\nfunction addNums(num1, num2) {\n  // base case\n  if (num2 == 0) {\n    return num1;\n  }\n  // recursive case\n  else {\n    return addNums(++num1, --num2);\n  }\n}", "task_type": "coding"}
{"input": "Edit a first person narrative created by a GPT model in order to make the narrative more coherent.", "output": "I was strolling through the dense forest when, out of the corner of my eye, I noticed something large and shimmering in the sunlight. As I approached, I saw a magnificent dragon lounging among the trees. Its scales glinted in the sun's rays and its massive, sharply-clawed feet were planted firmly into the ground. Its eyes burned a deep red as it watched my slow approach.", "task_type": "coding"}
{"input": "Write an Iterative program in Java to print the first n terms of the Fibonacci sequence.", "output": "public static void printFibonacciIterative(int n) \n{ \n    int prev1=0, prev2=1, sum=0; \n  \n    for (int i = 0; i < n; i++) \n    { \n        System.out.print(sum + \" \"); \n        prev2 = sum; \n        sum = prev1 + prev2; \n        prev1 = prev2; \n    } \n}", "task_type": "coding"}
{"input": "Create a web crawler to extract all the links within a given web page", "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    links = [link.get('href') for link in soup.find_all('a')]\n    return links\n\nif __name__ == '__main__':\n    print(get_links(url))", "task_type": "coding"}
{"input": "Create an Angular service to authenticate a user using an API endpoint.", "output": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class AuthService {\n \n constructor(private http: HttpClient) { }\n\n authenticateUser(username: string, password: string) {\n  const body = { username: username, password: password };\n \n  return this.http.post('/api/auth', body);\n }\n}", "task_type": "coding"}
{"input": "Create an algorithm that uses a hash table to detect if an element is a duplicate.", "output": "def detect_duplicate(array): \n  # Create a hash table to store elements in the array \n  hash_table = dict() \n  \n  # Iterate through the array, check if the elements are already stored in the hash table  \n  # If the elements are already stored in the hash table, return True \n  for element in array: \n    if element in hash_table: \n      return True \n    else: \n      # Else, add the element to the hash table \n      hash_table[element] = 1\n    \n  # Return False if no duplicates are found \n  return False\n\nprint(detect_duplicate(array)) # True", "task_type": "coding"}
{"input": "Create a Swift method to sort a dictionary alphabetically.", "output": "func sort(dict: [String: String]) -> [String: String] {\n    let sortedKeys = dict.keys.sorted { $0 < $1 }\n    var sortedDict = [String: String]()\n    for key in sortedKeys {\n        sortedDict[key] = dict[key]\n    }\n    return sortedDict\n}", "task_type": "coding"}
{"input": "Output a list with all the numbers from 0 to 100 that are divisible by 8.", "output": "result = [x for x in range(101) if x % 8 == 0]\nprint(result)# [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 100]", "task_type": "coding"}
{"input": "Decompose the following code into two different functions.", "output": "def calculate_diff(arr):\n    return abs(arr[0] - arr[1])\n\ndef calculate_minimum_difference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, calculate_diff(nums[x-1:x+1]))\n    return min_diff", "task_type": "coding"}
{"input": "Design a web API that enables users to register and log in.", "output": "The API should be able to accept GET and POST requests and should be able to handle URLs like /register, /login, and /logout. The API should make use of JSON as the data format and should support client-server communication via API keys. The API should also implement other standard security protocols like TLS, OAuth, and OpenID Connect. Additionally, the API should be extensible and should support features like social media integration for user registration and login.", "task_type": "coding"}
{"input": "Modify the following C++ code to capitalize the uppercase letters in a given string.", "output": "#include <iostream> \n#include <string> \n#include <algorithm>\n\nint main() \n{ \n    std::string str = \"hello world\"; \n    //Convert to uppercase letters\n    std::transform(str.begin(), str.end(), str.begin(), ::toupper); \n        std::cout << str;\n\nreturn 0; \n}", "task_type": "coding"}
{"input": "Write a C++ program that calculates the sum of consecutive numbers from 1 to 10.", "output": "#include <iostream>\n\nint main() {\n int sum = 0;\n \n for (int i = 1; i <= 10; i++) {\n  sum += i;\n }\n \n std::cout << \"Sum of consecutive number from 1 to 10 is \" << sum << std::endl;\n \n return 0;\n}", "task_type": "coding"}
{"input": "Use Java to send an HTTP request to an API endpoint with a login form.", "output": "import java.net.*; \nimport java.io.*; \n\npublic class HttpClient {\n\n  public static void main(String[] args) {\n\n    try { \n      URL url = new URL(\"http://example.com/api/login\"); \n\n      HttpURLConnection con = (HttpURLConnection) url.openConnection(); \n\n      // Request headers\n      con.setRequestMethod(\"POST\");\n      con.setRequestProperty(\"Content-Type\", \"application/json\");\n\n      // Request body\n      String body = \"{\\\"username\\\":\\\"john_doe\\\", \\\"password\\\":\\\"password123\\\"}\";\n\n      // Send POST request\n      con.setDoOutput(true);\n      DataOutputStream wr = new DataOutputStream(con.getOutputStream());\n      wr.writeBytes(body);\n      wr.flush();\n      wr.close();\n\n      // Output response \n      int responseCode = con.getResponseCode();\n      System.out.println(\"Response code: \" + responseCode);\n      BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n      String inputLine;\n      StringBuffer content = new StringBuffer();\n      while ((inputLine = in.readLine()) != null) {\n        content.append(inputLine);\n      }\n      in.close();\n      System.out.println(content.toString());\n    } \n    catch (Exception ex) { \n      ex.printStackTrace();\n    } \n  } \n}", "task_type": "coding"}
{"input": "Create a code that removes all duplicate elements in a given array.", "output": "def unique_elements(arr): \n    new_arr = [] \n    for i in arr:\n        if i not in new_arr: \n            new_arr.append(i) \n    return new_arr \n  \narr = [5, 10, 5, 7, 10] \n\nprint(unique_elements(arr)) # [5, 10, 7]", "task_type": "coding"}
{"input": "Write a code for creating a Fibonacci sequence", "output": "def fibonacci_seq(n):\n    seq = [0, 1]\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\nif __name__ == '__main__':\n    n = 10\n    result = fibonacci_seq(n)\n    print(result)  # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "task_type": "coding"}
{"input": "Generate a JavaScript solution to print all prime numbers between 1 and 50.", "output": "for(var i = 2; i <= 50; i++) {\n     var isPrime = true;\n     for(var j = 2; j < i; j++) {\n         if(i % j == 0) {\n             isPrime = false;\n         }\n     }\n     if(isPrime) {\n         console.log(i);\n     }\n}", "task_type": "coding"}
{"input": "Using C++, write a program to find the Fibonacci number at a given position.", "output": "int Fibonacci(int n) \n{ \n    int a = 0, b = 1, c, i; \n    if( n == 0) \n        return a; \n    for (i = 2; i <= n; i++) \n    { \n        c = a + b; \n        a = b; \n        b = c; \n    } \n    return b; \n}", "task_type": "coding"}
{"input": "Create a function which takes a string, converts it to lowercase, and prints out the most commonly-used character in the string.", "output": "def most_common_char(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\n    return most_common_char\n\n# Example\nstring = \"Hello World\"\nprint(most_common_char(string))\n# Output: l", "task_type": "coding"}
{"input": "Write a HTML structure with a form that includes ``name`` and ``email`` fields.", "output": "<form>\n    <label>Name: </label>\n    <input type=\"text\" name=\"name\" ></input>\n    <br>\n    <label>Email: </label>\n    <input type=\"email\" name=\"email\" ></input>\n    <br>\n    <input type=\"submit\" value=\"Submit\" ></input>\n </form>", "task_type": "coding"}
{"input": "Develop a class in Java to implement a calculator with functions add(), subtract(), multiply(), and divide().", "output": "public class Calculator {\n\n    public static double add(double a, double b) {\n        return a + b;\n    }\n\n    public static double subtract(double a, double b) {\n        return a - b;\n    }\n\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public static double divide(double a, double b) {\n        return a / b;\n    }\n\n}", "task_type": "coding"}
{"input": "Create a SQL database containing three tables.", "output": "CREATE TABLE Employee (\n  Id INT NOT NULL UNIQUE PRIMARY KEY,\n  Name VARCHAR(50) NOT NULL,\n  Age INT NOT NULL\n);\n\nCREATE TABLE Department (\n  Id INT NOT NULL UNIQUE PRIMARY KEY,\n  Name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Employee_Department (\n  EmployeeId INT NOT NULL UNIQUE,\n  DepartmentId INT NOT NULL UNIQUE\n);", "task_type": "coding"}
{"input": "Sort the following list of numbers using Merge Sort", "output": "def mergesort(nums): \n    if len(nums) == 1: \n        return nums \n  \n    mid = len(nums) // 2\n    left_list = nums[:mid] \n    right_list = nums[mid:] \n  \n    left_list = mergesort(left_list) \n    right_list = mergesort(right_list) \n    return merge(left_list, right_list) \n\ndef merge(left_list, right_list): \n    sorted_list = [] \n    left_list_index = right_list_index = 0\n  \n    left_list_length, right_list_length = len(left_list), len(right_list) \n  \n    for _ in range(left_list_length + right_list_length): \n        if left_list_index < left_list_length and right_list_index < right_list_length: \n            if left_list[left_list_index] <= right_list[right_list_index]: \n                sorted_list.append(left_list[left_list_index]) \n                left_list_index += 1\n            else: \n                sorted_list.append(right_list[right_list_index]) \n                right_list_index += 1\n        elif left_list_index == left_list_length: \n            sorted_list.append(right_list[right_list_index]) \n            right_list_index += 1\n        elif right_list_index == right_list_length: \n            sorted_list.append(left_list[left_list_index]) \n            left_list_index += 1\n  \n    return sorted_list \n\nOutput:\n[2, 3, 5, 7, 9]", "task_type": "coding"}
{"input": "Write a code to print out all dates between two given dates in Python", "output": "from datetime import timedelta, date\n\ndef daterange(start_date, end_date):\n    for n in range(int ((end_date - start_date).days)):\n        yield start_date + timedelta(n)\n\nstart_date = date(2020, 8, 20)\nend_date = date(2020, 8, 30)\nfor single_date in daterange(start_date,end_date):\n    print(single_date.strftime(\"%d/%m/%Y\"))", "task_type": "coding"}
{"input": "Using the following input and code, edit the code so the output returns a list with only the unique elements from the list.", "output": "def unique_list(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\n# testing\nlist1 = [1,2,2,4,4,4,5]\nprint(unique_list(list1)) # Output: [1, 2, 4, 5]", "task_type": "coding"}
{"input": "Explain the working of a function that takes a string as an argument, removes all the duplicate characters from it and returns the modified string", "output": "The given function takes a string as an argument, creates an empty string to store unique characters from the given string. It then iterates through the given string and checks if the character is already present in the new string. If the character is not present, it adds the character to the new string. After iterating through the entire string, the modified string which doesn’t contain any duplicate characters is returned.", "task_type": "coding"}
{"input": "Create a Java program for finding the first non-repeated character in a string.", "output": "public class NonRepeatedCharacters \n{ \n    static final int NO_OF_CHARS = 256; \n      \n    /* Returns an array of size 256 conaining count \n    of characters in the passed char array */\n    static int[] getCharCountArray(String str) \n    { \n        int count[] = new int[NO_OF_CHARS]; \n        int len = str.length(); \n          \n        /* Increment count of characters in count[] */\n        for (int i = 0; i < len; i++) \n            count[str.charAt(i)]++; \n          \n        return count; \n    } \n      \n    /* The function returns index of first non-repeating \n    character in a string. If all characters are repeating \n    then returns -1 */\n    static int firstNonRepeating(String str) \n    { \n        int count[] = getCharCountArray(str); \n        int index = -1, i; \n          \n        for (i = 0; i < str.length(); i++) \n        { \n            if (count[str.charAt(i)] == 1) \n            { \n                index = i; \n                break; \n            }    \n        }   \n          \n        return index; \n    } \n}", "task_type": "coding"}
{"input": "Provide a solution for the following coding challenge:", "output": "Solution:\n\n// Using Kadane's algorithm\nfunction maxSubArraySum(arr) {\n  let max_so_far = 0; \n  let max_ending_here = 0; \n \n  for (let i = 0; i < arr.length; i++) { \n    max_ending_here = max_ending_here + arr[i]; \n    if (max_ending_here < 0) {\n      max_ending_here = 0; \n    }\n    else if (max_so_far < max_ending_here) {\n      max_so_far = max_ending_here; \n    }\n  } \n  return max_so_far; \n}", "task_type": "coding"}
{"input": "Write a Python program to print the numbers of a specified list after removing even numbers from it.", "output": "def print_odd(numbers):\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(print_odd(numbers))", "task_type": "coding"}
{"input": "Write a Python program to remove the elements that occur only once from a given array.", "output": "def remove_once(arr): \n    freq_table  = {} \n    for num in arr: \n        if num in freq_table.keys(): \n            freq_table[num] += 1\n        else: \n            freq_table[num] = 1\n\n    filtered_array = [] \n    for num, freq in freq_table.items(): \n        if freq > 1: \n            filtered_array.append(num) \n    return filtered_array\n\nremove_once([1, 2, 2, 3, 3, 3, 4, 4])\n\n#Output: [2, 3, 4]", "task_type": "coding"}
{"input": "Write a JavaScript program to convert an array of objects into an object of objects.", "output": "const arrayToObj = (arr) => {\n    return arr.reduce((acc, item) => {\n      acc[item.id] = item;\n      return acc;\n    }, {});\n  }\n\nconst result = arrayToObj([\n  { id: '001', firstName: 'John' , lastName: 'Doe' },\n  { id: '002', firstName: 'Jim' , lastName: 'Smith' },\n  { id: '003', firstName: Joe , lastName: 'Mail' },\n]);\n\nconsole.log(result);\n// Output\n// {\n//   001: { id: '001', firstName: 'John', lastName: 'Doe' },\n//   002: { id: '002', firstName: 'Jim', lastName: 'Smith' },\n//   003: { id: '003', firstName: 'Joe', lastName: 'Mail' },\n// }", "task_type": "coding"}
{"input": "Write an HTML page that takes an email address as input and displays a \"Thank you\" message after the submission.", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Thank You</title>\n  </head>\n \n  <body>\n    <form method=\"POST\" action=\"\">\n      <label>\n        Email:\n        <input type=\"email\" name=\"email\">\n      </label>\n      <input type=\"submit\" value=\"Submit\">\n    </form>\n \n<?php\nif ($_POST) {\n  echo 'Thank you for signing up!';\n}\n?>\n \n  </body>\n</html>", "task_type": "coding"}
{"input": "Find the longest common substring between two strings.", "output": "\"\"\"\nFind the longest common substring between two strings\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    \"\"\"Find the longest common substring between two strings.\n    \n    Args:\n        s1 (str): The first string.\n        s2 (str): The second string.\n        \n    Returns:\n        str: The longest common substring.\n    \"\"\"\n    max_length = 0\n    longest_substring = \"\"\n    len1, len2 = len(s1), len(s2)\n    for i in range(len1): \n        for j in range(len2):\n            length = 0\n            while i + length < len1 and j + length < len2:\n                if s1[i + length] != s2[j + length]:\n                    break \n                length += 1\n            if length > max_length:\n                max_length = length\n                longest_substring = s1[i : i + length]\n    return longest_substring\n    \nif __name__ == '__main__':\n    s1 = \"Tangible\"\n    s2 = \"Non-Tangible\"\n    print(longest_common_substring(s1, s2))", "task_type": "coding"}
{"input": "Create a Python function to find all unique values in a list.", "output": "def find_unique_values(L):\n    \"\"\"\n    Function to find all the unique values in a list.\n    \n    Arguments:\n        L {list}: The list to search in.\n    \n    Returns:\n        set: The set of unique values.\n    \"\"\"\n    unique_values = set()\n    for item in L:\n        if item not in unique_values:\n            unique_values.add(item)\n    return unique_values", "task_type": "coding"}
{"input": "Given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digits. Add the two numbers and return the sum as a linked list.", "output": "class Solution:\n    def addTwoNumbers(self, l1, l2):\n        # Initialize current, previous and \n        # next pointers \n        curr1 = l1\n        curr2 = l2\n        head = None\n        prev = None\n        \n        carry = 0\n        while curr1 != None or curr2 != None or carry != 0:\n            val1 = 0\n            if curr1 != None:\n                val1 = curr1.val\n                curr1 = curr1.next\n            \n            val2 = 0\n            if curr2 != None:\n                val2 = curr2.val\n                curr2 = curr2.next\n                \n            val = val1 + val2 + carry\n            carry = val // 10\n            temp = ListNode(val%10)\n\n            if prev == None:\n                head = temp\n            else:\n                prev.next = temp\n            \n            prev = temp\n\n        return head", "task_type": "coding"}
{"input": "Write a code that takes a list of strings and a string, and returns a list containing all strings from the given list that have the given string as a substring.", "output": "def find_substring(lst, query):\n    result = []\n    for el in lst:\n        if query in el:\n            result.append(el)\n    return result\n\nfind_substring(['Hello', 'Hello, world', 'Bonjour', 'My name is John'], 'lo')\n# output: ['Hello', 'Hello, world']", "task_type": "coding"}
{"input": "Write a code to train a random forest classifier for a given dataset.", "output": "\"\"\"\nWrite a code to train a random forest classifier for a given dataset\n\"\"\"\n\n# import the packages\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\n\n# Create the dataset\nX, y = make_classification(n_samples=100, n_features=5, n_classes=2)\n\n# Create and train the random forest classifier\nclf = RandomForestClassifier(n_estimators=1000)\nclf.fit(X, y)", "task_type": "coding"}
{"input": "Write a regex pattern to find all words that start with 'a' in a sentence.", "output": "\"\"\"\nFind all words that start with 'a' in a sentence\n\"\"\"\n\nimport re\n\ndef find_words_with_a(sentence):\n    pattern = r\"\\b[aA]\\w+\\b\"\n    matches = re.findall(pattern, sentence)\n    return matches\n\nif __name__ == '__main__':\n    sentence = \"All animals are amazing\"\n    print(find_words_with_a(sentence))", "task_type": "coding"}
{"input": "Write a Python program to print out the list of even numbers from 0 to given limit.", "output": "# declare list of numbers\nnumbers = [x for x in range(0, limit+1)]\n\n# declare empty list of even numbers\neven_numbers = []\n\n# loop through list of numbers\nfor num in numbers:\n    # if number is even, append to even_numbers list\n    if num % 2 == 0:\n        even_numbers.append(num)\n\n# print even numbers\nprint(even_numbers) # Output: [0, 2, 4, 6, 8, 10]", "task_type": "coding"}
{"input": "Create a Node.js server which serves a static HTML page.", "output": "// Import the necessary modules\nconst http = require('http');\nconst fs = require('fs');\n\n// Create a simple server which serves a static HTML page\nhttp.createServer((req, res) => {\n    fs.readFile('./index.html',(err, data) => {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        res.write(data);\n        res.end();\n    });\n }).listen(3000);", "task_type": "coding"}
{"input": "Find the bug in the following C++ program and suggest a fix.", "output": "#include <iostream>\nusing namespace std;\n\nint main() \n{\n    int a = 3;\n    int b = 4;\n    if(a < b)\n     return 0;\n    else\n     return 1;\n}\n\n// fix: making it an if-else statement instead of using the return statements\nif (a < b)\n{\n    return 0;\n}\nelse \n{\n    return 1;\n}", "task_type": "coding"}
{"input": "What are the differences between data types int and float in Java?", "output": "In Java, data types int and float represent different levels of precision: int is for whole numbers, while float is for decimal numbers. Int has a 32-bit size, which allows for whole numbers from -2^31 to 2^31-1. Float is 32-bit and can refer to decimal values of up to seven digits. Float can also be expressed in scientific notation. In addition, int is an integer type, while float is a floating-point type. Both int and float can be used in arithmetic operations in Java.", "task_type": "coding"}
{"input": "Write a function that returns the largest number in a list.", "output": "def get_largest(lst):\n    largest = 0\n    for i in range (0,len(lst)):\n        if lst[i] > largest:\n            largest = lst[i]\n    return largest\n\n# Driver code\nmyList = [1,2,3,4,5,6]\nprint(get_largest(myList)) # Output: 6", "task_type": "coding"}
{"input": "Describe how LSTMs are used to predict time-series data.", "output": "Long Short-Term Memory (LSTM) networks are a type of Recurrent Neural Network (RNN) that enable the model to learn long-term dependencies by remembering information from long periods of time. LSTMs are commonly used to model time-series data such as stock prices, sensor readings, or other sequences of data points that contain predictable patterns. The LSTM predicts the next step in the sequential data using the past data points, and can be used to perform tasks such as forecasting future data points and anomaly detection.", "task_type": "coding"}
{"input": "Write a C++ code to store the marks of a student in an array.", "output": "#include <iostream>\n\nint marks[5];\n\nint main() {\n  marks[0] = 10;\n  marks[1] = 20;\n  marks[2] = 30;\n  marks[3] = 40;\n  marks[4] = 50;\n  \n  return 0;\n}", "task_type": "coding"}
{"input": "Create an array of objects that contains the inventory of a store.", "output": "var inventory = [ \n    {item: 'Apple', qty: 10}, \n    {item: 'Orange', qty: 20}, \n    {item: 'Banana', qty: 5}, \n    {item: 'Grapes', qty: 15} \n];", "task_type": "coding"}
{"input": "Debug this Python code and explain why it was not running.", "output": "def string_split(string, n):\n    words = string.split(\" \")\n    for x in range(n):\n        print(\" \".join(words[:x]))\n\nThe code was not running as initially written because the range used in the for loop was not provided. Inside the for loop, the variable x needed to be given a range (e.g. range(n)) so that it can iterate over each of the elements of the words list properly. The loop should have looked like this: for x in range(n):.", "task_type": "coding"}
{"input": "Generate a list of distinct dates between two given dates using JavaScript.", "output": "function generateDates(startdate, enddate) {\n    const dates=[],\n          start=new Date(startdate),\n          end=new Date(enddate);\n\n    while (start <= end) {\n        const newdate = new Date(start);\n        const formatteddate = `${newdate.getDate()}/${newdate.getMonth()+1}/${newdate.getFullYear()}`;\n        if(!dates.includes(formatteddate)) dates.push(formatteddate)\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}", "task_type": "coding"}
{"input": "Determine the maximum sum of a subarray within the given array.", "output": "let max_sum = 0;\nlet current_sum = 0;\n\nfor (let i=0; i < arr.length; i++)\n{\n    current_sum += arr[i];\n    \n    if (current_sum < 0)\n        current_sum = 0;\n        \n    max_sum = Math.max(current_sum, max_sum);\n}\n\nconsole.log(max_sum);", "task_type": "coding"}
{"input": "Write code to find the intersection of two sorted lists", "output": "def find_intersection(list1, list2):\n    \"\"\"\n    Find the intersection of two sorted lists\n    :param list1: the first sorted list\n    :param list2: the second sorted list\n    :return: a list with elements found in both lists\n    \"\"\"\n    intersection = []\n    p1 = p2 = 0\n    while p1 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    return intersection\n\nlist1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]\nprint(find_intersection(list1, list2))", "task_type": "coding"}
{"input": "Write a shell script to perform a binary search of an array", "output": "#!/bin/bash\n\narr=(2 3 6 8 10)\ntarget=8\nfunction binary_search()\n{\n   left=0\n   right=${#arr[@]}-1\n   while [ $left -le $right ]\n   do\n      mid=$(( ($left+$right)/2 ))\n      if [ ${arr[$mid]} -eq $target ]\n      then\n         echo \"Number found at position: $(($mid+1))\"\n         return\n      elif [ ${arr[$mid]} -lt $target ]\n      then\n         left=$(($mid + 1))\n      else\n         right=$(($mid - 1))\n      fi\n   done\n   echo \"Number not found!\"\n}\nbinary_search ${arr[@]} $target", "task_type": "coding"}
{"input": "Write a Java program to define a class for a Dice object.", "output": "class Dice {\n    private int number;\n    private int roll_count = 0;\n    Random random = new Random();\n\n    public int roll() {\n        roll_count++;\n        number = random.nextInt(6) + 1;\n        return number;\n    }\n\n    public int getNumber() {\n        return number;\n    }\n\n    public int getRollCount() {\n        return roll_count;\n    }\n}", "task_type": "coding"}
{"input": "Write a Java method to insert a given string at the beginning of every word in a given sentence.", "output": "String addPrefix(String sentence, String prefix) { \n  String[] words = sentence.split(\" \"); \n  StringBuilder sb = new StringBuilder(); \n\n  for (String word: words) { \n    sb.append(prefix + word + \" \"); \n  } \n  return sb.toString(); \n}\n\naddPrefix(sentence, \"The\"); // Output: \"TheThe quick Thebrown Thefox Thejumps Theover Thethe Thelazy Thedog\"", "task_type": "coding"}
{"input": "Write a function in C# for sorting an array (using an appropriate sorting algorithm).", "output": "public static void SortArray(int[] arr) \n{ \n   int n = arr.Length; \n\n   for (int i = 0; i < n - 1; i++) \n   { \n       int min_idx = i; \n       for (int j = i + 1; j < n; j++) \n           if (arr[j] < arr[min_idx]) \n               min_idx = j; \n  \n       int temp = arr[min_idx]; \n       arr[min_idx] = arr[i]; \n       arr[i] = temp; \n   } \n}", "task_type": "coding"}
{"input": "Implementation the quicksort algorithm using c++.", "output": "// C++ code for quick sort \n#include <bits/stdc++.h> \nusing namespace std; \n  \n// A utility function to swap two elements \nvoid swap(int* a, int* b) \n{ \n    int t = *a; \n    *a = *b; \n    *b = t; \n} \n  \n/* This function takes last element as pivot, \nplaces the pivot element at its correct \nposition in sorted array, and places all \nsmaller (smaller than pivot) to left of \npivot and all greater elements to right \nof pivot */\nint partition (int arr[], int low, int high) \n{ \n    int pivot = arr[high];    // pivot \n    int i = (low - 1);  // Index of smaller element \n  \n    for (int j = low; j <= high- 1; j++) \n    { \n        // If current element is smaller than or \n        // equal to pivot \n        if (arr[j] <= pivot) \n        { \n            i++;    // increment index of smaller element \n            swap(&arr[i], &arr[j]); \n        } \n    } \n    swap(&arr[i + 1], &arr[high]); \n    return (i + 1); \n} \n  \n/* The main function that implements QuickSort \narr[] --> Array to be sorted, \nlow  --> Starting index, \nhigh  --> Ending index */\nvoid quickSort(int arr[], int low, int high) \n{ \n    if (low < high) \n    { \n        /* pi is partitioning index, arr[p] is now \n           at right place */\n        int pi = partition(arr, low, high); \n  \n        // Separately sort elements before \n        // partition and after partition \n        quickSort(arr, low, pi - 1); \n        quickSort(arr, pi + 1, high); \n    } \n} \n  \n/* Function to print an array */\nvoid printArray(int arr[], int size) \n{ \n    int i; \n    for (i=0; i < size; i++) \n        cout << arr[i] << \" \"; \n    cout << endl; \n}", "task_type": "coding"}
{"input": "What data type is best suited to store a list of students' names?", "output": "A list of students' names can best be stored using a string data type. Strings are character sequences, making them well-suited for storing text-based information such as names. Storing a list of student names as a string is also more efficient memory-wise than other data types, since strings are immutable and can be reused for different values.", "task_type": "coding"}
{"input": "Write a recursive function in JS to traverse a multi-dimensional array.", "output": "function traverseArray (arr) {\n  for (let i = 0; i < arr.length; i++) {\n    if (Array.isArray(arr[i])) {\n      traverseArray(arr[i]);\n    } else {\n      console.log(arr[i]);\n    }\n  }\n}\n\ntraverseArray(arr);\n// Output: 1, 2, 3, 4, 5, 6", "task_type": "coding"}
{"input": "What is an inheritance in Java?", "output": "In Java, inheritance is a mechanism in which one class (known as the subclass) inherits the characteristics of another class (known as the superclass). This enables the subclass to reuse the attributes and methods of the superclass without having to code them again. It also allows for increased code modularity and code reusability.  With class inheritance, a subclass can obtain all of the public and protected methods and fields from its parent class. This allows the developer to reuse existing code and to avoid writing the same code over and over again.  Additionally, class inheritance promotes polymorphism, which allows the same code to be used with different objects.", "task_type": "coding"}
{"input": "Create discrete buckets in a given array using the following algorithm.", "output": "def create_buckets(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ncreate_buckets([2, 3, 6, 7, 8])\n# Output: [2, 3, 6, 8]", "task_type": "coding"}
{"input": "Write a Java program to convert a binary string to a decimal number.", "output": "public class BinaryToDecimal { \n\n\tpublic static int binToDecimal(String binaryNumber)  \n\t{  \n\t\tint decimal = 0;  \n\t\tint power = 0;  \n\t\tfor(int i = binaryNumber.length() - 1; i >= 0; i--)  \n\t\t{   \n\t\t\tif (binaryNumber.charAt(i) == '1') \n\t\t\t\tdecimal += Math.pow(2, power); \n\t\t\tpower++; \n\t\t}  \n\t\treturn decimal;  \n\t}  \n\t\n}", "task_type": "coding"}
{"input": "Create an algorithm to find the longest substring of a given string with distinct characters.", "output": "def find_longest_substring(string):\n    max_length = 0\n    for i in range(len(string)):\n        seen_chars = set()\n        length = 0\n        for j in range(i, len(string)):\n            if string[j] not in seen_chars:\n                seen_chars.add(string[j])\n                length += 1\n            else:\n                break\n        max_length = max(max_length, length)\n    return max_length", "task_type": "coding"}
{"input": "Write an HTML document with a table containing three columns: name, email and phone.", "output": "<html>\n <head>\n  <title>Contacts Table</title></title>\n </head>\n <body>\n  <table>\n   <thead>\n    <th>Name</th>\n    <th>Email</th>\n    <th>Phone</th>\n   </thead>\n   <tbody>\n    <tr>\n     <td>John</td>\n     <td>john@example.com</td>\n     <td>123-456-7890</td>\n    </tr>\n   </tbody>\n  </table>\n </body>\n</html>", "task_type": "coding"}
{"input": "Describe a method to generate the next element in a Fibonacci series.", "output": "A Fibonacci series is a sequence of numbers in which each number is the sum of the previous two numbers. To generate the next element in the series, simply add the current and previous number to get the next one. For example, given 0 and 1, the next number is 1 (0 + 1).", "task_type": "coding"}
{"input": "Design a text-based game in C++ in which the player can move around the game world.", "output": "#include <iostream>\n#include <string>\n\nstd::string room_name;\nint player_position_x = 0;\nint player_position_y = 0;\n\nvoid move_player(int x, int y) {\n    player_position_x += x;\n    player_position_y += y;\n    room_name = get_room_name(player_position_x, player_position_y);\n    std::cout << \"Moved to \" << room_name << std::endl;\n}\n\nstd::string get_room_name(int x, int y) {\n    std::string name;\n    // implement function to return the name of the room at given coordinates\n \n    return name;\n}\n\nint main() {\n    while(true) {\n        std::string input;\n        std::cout << \"Where do you want to go?\" << std::endl;\n        std::cin >> input;\n        // implement function to interpret user input and move the player accordingly\n    }\n    return 0;\n}", "task_type": "coding"}
{"input": "Given a 2-D array, write a C++ code snippet to find the maximum sum of all the numbers that are strictly increasing in a diagonal pattern.", "output": "int maxSum = 0;\n \n// traverse elements in upper-left \n// to lower-right diagonal order \nfor (int i = 0; i < Matrix.size(); i++ )\n{\n    int sum = 0; \n    // traverse diagonal element \n    for (int j = 0; (i+j) < Matrix.size() && j < Matrix.size(); j++ )\n        sum += Matrix[i+j][j]; \n    // update max sum \n    maxSum = max(maxSum, sum); \n} \n\n// traverse elements in upper-right \n// to lower-left diagonal order \nfor (int i = 1; i < Matrix.size(); i++ ) \n{ \n    int sum = 0; \n    // traverse diagonal element \n    for (int j = 0; (i+j) < Matrix.size() && j < Matrix.size(); j++ ) \n        sum += Matrix[j][i+j]; \n    // update max sum \n    maxSum = max(maxSum, sum); \n}", "task_type": "coding"}
{"input": "Write a Java program to calculate the sum of the two given integers.", "output": "public static int addIntegers(int a, int b) {\n    int sum = a + b;\n    return sum;\n}\n\npublic static void main(String[] args) {\n    int x = 4, y = 9;\n    int sum = addIntegers(x, y);\n    System.out.println(\"Sum is: \"+sum);\n}", "task_type": "coding"}
{"input": "Create a CSS page for styling a header.", "output": "h1 {\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 28px;\n    font-style: normal;\n    font-weight: bold;\n    line-height: 32px;\n    letter-spacing: 0.5px;\n    color: #000000;\n    text-align: center;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    margin-bottom: 0px;\n}", "task_type": "coding"}
{"input": "Implement a backtracking algorithm to solve a sudoku puzzle.", "output": "def solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\n    return True\n\n\ndef find_empty(bo):\n    for i in range(len(bo)):\n        for j in range(len(bo[0])):\n            if bo[i][j] == 0:\n                return (i, j)  # row, col\n\nprint(solve([\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]))", "task_type": "coding"}
{"input": "Create an algorithm in JavaScript to find the closest pair of points from a given set of points.", "output": "// algorithm to find closest pair of points \n// uses divide and conquer approach \nconst closestPair = (points) => { \n  // base case: two or fewer points\n  if (points.length <= 2) {\n    return points;\n  }\n\n  // divide\n  const middle = Math.floor(points.length / 2);\n  const left = points.slice(0, middle);\n  const right = points.slice(middle);\n  \n  // conquer\n  const leftPoints = closestPair(left);\n  const rightPoints = closestPair(right);\n\n  const closestPair = getClosestPair(leftPoints, rightPoints);\n\n  // combine\n  return closestPair;\n}\n \n// get closest pair between two sets of points\nconst getClosestPair = (leftPoints, rightPoints) => {\n  // calculating the minimum distance\n  let minDist = getDistance(leftPoints[0], rightPoints[0]);\n  let closestPair = [leftPoints[0], rightPoints[0]];\n  \n  for (let i = 0; i < leftPoints.length; i++) {\n    for (let j = 0; j < rightPoints.length; j++) {\n      let dist = getDistance(leftPoints[i], rightPoints[j]);\n      if (dist < minDist) {\n        minDist = dist;\n        closestPair = [leftPoints[i], rightPoints[j]];\n      }\n    }\n  }\n \n  // return the minimum distance and its pair\n  return closestPair;\n}\n \n// calculate the Euclidean distance between two points\nconst getDistance = (point1, point2) => {\n  let xDist = Math.abs(point2[0] - point1[0]);\n  let yDist = Math.abs(point2[1] - point1[1]);\n \n  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n}\n\n// testing our function \nlet points = [[2, 0], [4, 4], [-2, 2], [-3, -4], [4, -2]];\nlet closestPoints = closestPair(points);\nconsole.log(closestPoints);\n//Output: [[-2, 2], [2, 0]]", "task_type": "coding"}
{"input": "Write a Python function that prints the frequencies of even and odd numbers in a given array.", "output": "def frequency_of_odd_and_even(arr):\n    freq_even = 0\n    freq_odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            freq_even += 1\n        else:\n            freq_odd += 1\n    print(\"Frequency of even numbers:\", freq_even)\n    print(\"Frequency of odd numbers:\", freq_odd)", "task_type": "coding"}
{"input": "Sort an array of integers in C++.", "output": "int array [] = {4, 2, 9, 5, 1, 3};\nint n = sizeof(array)/sizeof(array[0]);\n \n//sort the array\nstd::sort(array, array+n);\n \n//print the sorted array\nfor (int i=0; i<n; i++)\n   cout << array[i] << \" \";", "task_type": "coding"}
{"input": "Create a function to convert an integer to its binary representation.", "output": "def int_to_binary(num):\n    '''This function will convert an integer to its binary representation.'''\n    binary = ''\n    while num > 0:\n        binary += str(num % 2)\n        num //= 2\n    return binary[::-1]\n\nif __name__ == '__main__':\n    num = 15\n    print(int_to_binary(num))", "task_type": "coding"}
{"input": "Write a code in Java to convert any string to camel case format.", "output": "\"\"\"\nWrite a code to convert any string to camel case format in Java\n\"\"\"\npublic class CamelCaseFormat {\n    public static String toCamelCase(String s){\n        String[] parts = s.split(\"_\");\n        String camelCaseString = \"\";\n        for (String part : parts){\n            camelCaseString = camelCaseString + toProperCase(part);\n        }\n        return camelCaseString;\n    }\n    \n    static String toProperCase(String s) {\n        return s.substring(0, 1).toUpperCase() +\n               s.substring(1).toLowerCase();\n    }\n \n    public static void main(String[] args)\n    {\n        String s = \"this_is_a_string\";\n        System.out.println(toCamelCase(s));\n    }\n}", "task_type": "coding"}
{"input": "Output the letter frequency from a text", "output": "Letter frequency: \n\nL: 1\nO: 2\nR: 2\nE: 2\nM: 2\nI: 2\nP: 2\nS: 2\nU: 2\nD: 1\nA: 2\nC: 2\nT: 2\nG: 1", "task_type": "coding"}
{"input": "Design a shell script for sorting the elements of a given array [2, 5, 1, 8, 4].", "output": "#!/bin/bash\n\n#array elements\narr=(2 5 1 8 4)\n\n#Sorting the array in ascending order\nfor((i=0;i<4;i++))\ndo\n    for((j=0;j<4-i;j++))\n    do\n        if [ ${arr[j]} -gt ${arr[$((j+1))]} ]\n        then\n           # swap\n           temp=${arr[j]}\n           arr[$j]=${arr[$((j+1))]}\n           arr[$((j+1))]=$temp\n        fi\n    done\ndone\necho ${arr[*]}", "task_type": "coding"}
{"input": "Create a Python program that takes two strings as input and finds their longest common subsequence.", "output": "def longestSubsequence(x, y): \n    m = len(x) \n    n = len(y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n   \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    index = L[m][n] \n  \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\\0\" \n  \n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        if x[i-1] == y[j-1]: \n            lcs[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    print(\"Longest common subsequence of \" + x + \" and \" + y + \" is \\\"\" + \"\".join(lcs) + \"\\\"\")", "task_type": "coding"}
{"input": "Rewrite the following Java code using different functions.", "output": "import java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] courses = {\"Math\",\"Science\",\"English\", \"History\"};\n\n        printCourses(courses);\n    }\n\n    public static void printCourses(String[] courses){\n        Arrays.stream(courses).forEach(System.out::println);\n    }\n}", "task_type": "coding"}
{"input": "Create a CSS animation to animate a ball bouncing up and down", "output": "@keyframes bounce {\n 0%, 20%, 50%, 80%, 100% {\n  transform: translateY(0);\n }\n 40% {\n  transform: translateY(-50px);\n }\n 60% {\n  transform: translateY(-45px);\n }\n}\n\n.ball {\n animation: bounce 1s ease infinite;\n}", "task_type": "coding"}
{"input": "Describe the concept of text mining.", "output": "Text mining is the process of extracting valuable information from textual data, typically through the application of natural language processing and machine learning algorithms. Text mining can identify hidden patterns and relationships in text, including key words, topics, and complex themes, by analyzing sentence structure, co-occurrences, metaphors and other characteristics of natural language.", "task_type": "coding"}
{"input": "Develop a Python3 program to extract the words of length 3 from a given sentence.", "output": "def extract_words(s):   \n    words = s.split()\n    length_3_words = []\n    for word in words:\n        if len(word) == 3:\n            length_3_words.append(word)\n    return length_3_words\n\ns = \"The quick brown fox jumped over the lazy dog\"\nprint(extract_words(s))", "task_type": "coding"}
{"input": "Design a web page with the following HTML elements: (1) Heading, (2) Subheading, (3) Form, (4) Button.", "output": "<html>\n    <head>\n        <title> My Web Page </title>\n    </head>\n    <body>\n        <h1> Heading </h1>\n        <h2> Subheading </h2>\n        <form>\n            ...\n        </form>\n        <button> Button </button>\n    </body>\n</html>", "task_type": "coding"}
{"input": "Use features of the Python language to implement 3-way partitioning of a given array.", "output": "\"\"\"\nUse features of the Python language to implement 3-way partitioning of a given array.\n\"\"\"\ndef threeWayPartition(array, pivot): \n    less = [] \n    equal = [] \n    greater = [] \n    for i in array: \n        if i < pivot: \n            less.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i)   \n    return less + equal + greater \n\nif __name__ == '__main__': \n    array = [9,6,7,4,1,6,3]\n    pivot = 6\n    print(threeWayPartition(array, pivot))", "task_type": "coding"}
{"input": "Generate a script to print out the sum of all even numbers in a given list", "output": "def get_sum_of_evens(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\nnumbers = [2, 4, 5, 6, 7, 8]\nprint(get_sum_of_evens(numbers))", "task_type": "coding"}
{"input": "Explain how to use functions in Python to perform operations on dictionaries.", "output": "Python dictionaries are mappings between keys and values, allowing for efficient retrieval of values using its associated key. Various functions can be used to manipulate the data in the dictionaries, such as the get() function to retrieve the value for a given key, the clear() function to delete all values, the keys() and values() functions to retrieve all keys and values respectively, and the items() function to retrieve a list of key-value pairs.", "task_type": "coding"}
{"input": "Write a code in Java to print out the power of two of the given number.", "output": "\"\"\"\nWrite a code in Java to print out the power of two of the given number\n\"\"\"\n\npublic class TwoPower \n{\n    public static void main(String[] args) \n    {\n        int number = 4;\n        double res = Math.pow(2,number);\n        System.out.println(\"2 to the power of \" + number + \" is \" + res);\n    }\n}", "task_type": "coding"}
{"input": "How to check if a number is prime or not in Java", "output": "public class Number { \n\t\n    public static boolean isPrime(int n) \n    { \n        // Corner cases \n        if (n <= 1) \n            return false; \n        if (n <= 3) \n            return true; \n  \n        // This is checked so that we can skip \n        // middle five numbers in below loop \n        if (n % 2 == 0 || n % 3 == 0) \n            return false; \n  \n        for (int i = 5; i * i <= n; i = i + 6) { \n            if (n % i == 0 || n % (i + 2) == 0) \n                return false; \n        } \n  \n        return true; \n    } \n  \n    public static void main(String[] args) \n    { \n        int n = 25; \n        if (isPrime(n)) \n            System.out.println(\"Yes\"); \n        else\n            System.out.println(\"No\"); \n    } \n}", "task_type": "coding"}
{"input": "Create a Java program to find the maximum element of an array.", "output": "public class Maximum {\n\tpublic static int findMax(int[] arr) {\n\t\tint max = arr[0];\n\t\tfor(int i = 1; i < arr.length; i++) {\n\t\t\tif(arr[i] > max)\n\t\t\t\tmax = arr[i];\n\t\t}\n\t\treturn max;\n\t}\n\n\tpublic static void main(String args[]) {\n\t\tint arr[] = {2, 3, 1, 4, 5};\n\t\tint max = findMax(arr);\n\t\tSystem.out.println(\"Maximum Element: \" + max);\n\t}\n}", "task_type": "coding"}
{"input": "Create a C++ program that computes the average of the given array elements.", "output": "#include <iostream>\n\nint main() {\n   int arr[] = {1, 2, 3, 4, 5};\n   int sum = 0;\n   int n = 5;\n \n   for (int i = 0; i < n; i++) {\n      sum = sum +arr[i];\n   }\n   int avg = sum/n;\n   std::cout << \"Average = \" << avg; \n   return 0;\n}", "task_type": "coding"}
{"input": "Write Python code to return all indices of substrings in a given string.", "output": "def substring_indices(string): \n    lengths = []\n    # calculate length of substring \n    for i in range(len(string)): \n        for j in range(i+1, len(string)+1): \n            lengths.append(string[i:j]) \n\n    # create array to hold all indices \n    indices = []\n    for length in lengths:\n        indices.append([i for i in range(len(string)) if string.startswith(length, i)])\n\n    return indices", "task_type": "coding"}
{"input": "Explain the effect of using recursion as a programming technique", "output": "Recursion is a programming technique that allows a function to call itself repeatedly until a certain condition is met. This allows for a clear solution to problems that involve repeated cycles of steps in their execution. Recursion also helps to solve complex problems by breaking them down into simpler sub-problems which can then be more easily solved. By effectively breaking a problem down into simpler sub-problems, the result is often a much more efficient and elegant implementation of a solution than an iterative approach. Recursion helps to reduce the complexity of code, making it easier to read, debug and maintain.", "task_type": "coding"}
{"input": "Describe a method for sorting a list of integers using selection sort.", "output": "def selection_sort(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n# Driver code to test above \nlist = [3, 6, 8, 9, 5] \nselection_sort(list) \nprint (\"Sorted array\") \nfor i in range(len(list)): \n    print(\"%d\" %list[i])", "task_type": "coding"}
{"input": "Write a java code to accept a student name and display a greeting.", "output": "import java.util.Scanner;\n\npublic class GreetStudent {\n    public static void main(String[] args) {\n        // Create a Scanner object\n        Scanner scanner = new Scanner(System.in);\n  \n        // Accept a student name\n        System.out.println(\"Please enter student name:\");\n        String studentName = scanner.nextLine();\n\n        // Display a greeting\n        System.out.println(\"Hello, \" + studentName + \"!\");\n    }\n}", "task_type": "coding"}
{"input": "Convert a given number from binary to hexadecimal using C programming language.", "output": "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    int binary=10101;\n    int decimal=0, i=0, rem;\n    while (binary!=0)\n    {\n        rem=binary%10;\n        decimal=decimal+rem*pow(2,i);\n        binary=binary/10;\n        ++i;\n    }\n    printf(\"The hexadecimal equivalent is : %x\", decimal);\n    return 0;\n}", "task_type": "coding"}
{"input": "Build a neural network using Python", "output": "import keras\n\n# Create a neural network\nmodel = keras.Sequential([\n    keras.layers.Dense(2, activation='sigmoid'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Train the model\nmodel.fit(X, y, epochs=1000)", "task_type": "coding"}
{"input": "Write a JavaScript code snippet to highlight the text 'Welcome' in the following string.", "output": "const string = \"Welcome to my website!\";\n\nconst highlightString = (str, highlight) => {\n  const startStringIndex = str.indexOf(highlight);\n  return (\n    str.slice(0, startStringIndex) +\n    \"<span class='highlight'>\" +\n    str.slice(startStringIndex, startStringIndex + highlight.length) +\n    \"</span>\" +\n    str.slice(startStringIndex + highlight.length)\n  );\n};\n\ndocument.body.innerHTML = highlightString(string, \"Welcome\");", "task_type": "coding"}
{"input": "Write a computer program to print all primes in an inputted range.", "output": "def print_primes(start, end):\n    for num in range(start, end + 1):\n        # all prime numbers are greater than 1\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)", "task_type": "coding"}
{"input": "Create a print statement that will print out a formatted table containing the elements of a 2D list.", "output": "# Get the list\ntwoD_list = [[1,2,3], [4,5,6], [7,8,9]]\n\n# Print it out as a table\nfor row in twoD_list:\n    for val in row:\n        print('{:4}'.format(val), end=\"\")\n    print()\n\n# Output\n#   1   2   3\n#   4   5   6\n#   7   8   9", "task_type": "coding"}
{"input": "Create a program in Python that takes a list of numbers as input and sorts it in ascending order.", "output": "def list_sort(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\nlist_sort(mylist)", "task_type": "coding"}
{"input": "Reorganize the provided data into an HTML table.", "output": "<table>\n <tr>\n  <th>Name</th>\n  <th>Age</th>\n </tr>\n <tr>\n  <td>John</td>\n  <td>23</td>\n </tr>\n <tr>\n  <td>Sarah</td>\n  <td>26</td>\n </tr>\n</table>", "task_type": "coding"}
{"input": "Write a function to check whether a number is a prime number in JavaScript.", "output": "function isPrime(num) { \n  \n    // Edge cases:\n    if (num <= 1)  return false; \n    if (num === 2)  return true; \n    if (num % 2 === 0) return false; \n\n    for (let i=3; i<=Math.sqrt(num); i+=2) { \n        if (num % i === 0) \n            return false; \n    } \n    return true; \n}", "task_type": "coding"}
{"input": "Filter the following list of integer using python, so that only the numbers divisible by 2 are left", "output": "def filter_list(list): \n    new_list = []\n    for item in list:\n        if item % 2 == 0:\n            new_list.append(item)\n    return new_list \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(filter_list(list))\n\n# Output: [2, 4, 6, 8]", "task_type": "coding"}
{"input": "Create an HTML webpage which when opened displays the current date in a paragraph.", "output": "<!DOCTYPE html> \n<html> \n   <head> \n   <title>Date Page</title> \n   </head> \n   <body> \n      <p> \n      <?php \n       echo \"Current date: \" . date(\"d-m-Y\"); \n      ?> \n      </p> \n   </body> \n</html>", "task_type": "coding"}
{"input": "Create a JavaScript program that updates the navigation menu based on user preferences", "output": "function updateNavMenu(preferences) {\n  // code to update navigation menu for each user preference\n  let html = '';\n  for (let preference in preferences) {\n    if (preferences[preference]) {\n      html += '<li>' + preference + '</li>';\n    }\n  }\n  document.getElementById(\"navMenu\").innerHTML = html;\n}", "task_type": "coding"}
{"input": "Implement quicksort algorithm in Python for a list of integers.", "output": "def quicksort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x < pivot]\n\tmiddle = [x for x in arr if x == pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quicksort(left) + middle + quicksort(right)", "task_type": "coding"}
{"input": "Generate an HTML form with three fields \"username\", \"password\" and \"confirm password\".", "output": "<form action=\"\" method=\"post\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\">\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\">\n  <label>Confirm Password:</label>\n  <input type=\"password\" name=\"confirm_password\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "task_type": "coding"}
{"input": "Fill in the blanks of the following Python code to implement a Selection Sort algorithm.", "output": "def selection_sort(arr):\n    for i in range(len(arr),1,-1):\n        max_element=arr[0]\n        for j in range(i):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        temp = arr[i-1]\n        arr[i-1] = max_element\n        arr[arr.index(max_element)] = temp", "task_type": "coding"}
{"input": "Explain the use of the Huffman encoding algorithm.", "output": "Huffman encoding is an algorithm used for lossless data compression. It works by taking a string of data, analysing it and creating a shorter bit string that represents the same data. The data is compressed by assigning shorter codes to commonly occurring characters. This process reduces the amount of bits needed to represent the data, which leads to overall data compression.", "task_type": "coding"}
{"input": "Construct a program in Java for solving the Tower of Hanoi puzzle.", "output": "import java.util.Stack;\n \npublic class TowerOfHanoi \n{\n    public static void towersOfHanoi(int disks) \n    {\n        Stack<Integer> source = new Stack<Integer>();\n        Stack<Integer> destination = new Stack<Integer>();\n        Stack<Integer> auxillary = new Stack<Integer>();\n        int i, total_moves;\n         \n        System.out.println(\"Source:\" + source);\n        System.out.println(\"Destination:\" + destination);\n        System.out.println(\"Auxillary:\" + auxillary);\n \n        // Put all disks onto source\n        for (i = disks; i > 0; i--) \n        {\n            source.push(i);\n        }  \n         \n        // Calculate total moves\n        total_moves = (int) (Math.pow(2, disks) - 1); \n         \n        for (i = 1; i <= total_moves; i++) \n        {\n            moveDisk(source, destination, auxillary, disks);\n        } \n        System.out.println(\"Source:\" + source);\n        System.out.println(\"Destination:\" + destination);\n        System.out.println(\"Auxillary:\" + auxillary);\n    }\n \n    public static void moveDisk(Stack<Integer> source, Stack<Integer> destination, \n                                Stack<Integer> auxillary, int disks) \n    {\n        int i;\n        if (disks == 1) \n        {\n            destination.push(source.pop());\n            return;\n        }        \n        moveDisk(source, auxillary, destination, disks - 1); \n         \n        destination.push(source.pop());\n        moveDisk(auxillary, destination, source, disks - 1);\n    }\n    \n    public static void main (String[] args) \n    {\n        int disks = 3;\n        towersOfHanoi(disks);\n    }\n}", "task_type": "coding"}
{"input": "Write a function to convert a list of characters into a string.", "output": "\"\"\"\nWrite a function to convert a list of characters into a string\n\"\"\"\n\ndef list_to_string(characters):\n    result = ''.join(characters)\n    return result\n\ncharacters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\n\nprint(list_to_string(characters)) # print Hello World", "task_type": "coding"}
{"input": "Given a list of student class enrollments, group students into classes that correspond with their major.", "output": "def group_students_by_major(student_list):\n    # create a dictionary with two empty lists \n    student_groups = {\"Computer Science\": [], \"Business Administration\": []}\n    # iterate through the student list\n    for student in student_list:\n        # for each student in the list, add their name to the respective list\n        student_groups[student[\"major\"]].append(student[\"name\"])\n    # return the dictionary of groups\n    return student_groups", "task_type": "coding"}
{"input": "Calculate the factorial of a positive integer in C.", "output": "#include <stdio.h>\n\nint factorial(int n) \n{ \n  int i, fact = 1; \n  \n  // handles cases greater than 1\n  if (n > 1) { \n    for (i = 2; i <= n; i++) \n      fact = fact * i; \n  } \n  return fact; \n} \n\nint main() \n{ \n  printf(\"The factorial of 5 is %d\", factorial(5)); \n  return 0; \n}", "task_type": "coding"}
{"input": "Create a Java class called 'Rectangle' that has two properties: length and width.", "output": "public class Rectangle { \n\n    // length and width parameters \n    private double length; \n    private double width; \n  \n    //Empty constructor \n    public Rectangle(){\n    }\n  \n    //Initialized constructor\n    public Rectangle(double length, double width) { \n        this.length = length; \n        this.width = width; \n    } \n  \n    // setters and getters \n    public void setLength(double length) { \n        this.length = length;\n    } \n    public double getLength() { \n        return length; \n    } \n  \n    public void setWidth(double width) { \n        this.width = width; \n    } \n    public double getWidth() { \n        return width; \n    }    \n}", "task_type": "coding"}
{"input": "Design a function to calculate the distance between two points in a 3-D space.", "output": "def get_distance(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\np1 = (3, 2, 1)\np2 = (5, 4, 6)\ndistance = get_distance(p1, p2)\nprint(distance) # Output: 5.196152422706632", "task_type": "coding"}
{"input": "Construct a regex pattern to match a valid IP address", "output": "^(((25[0–5]|2[0-4][0–9]|[01]?[0-9][0–9]?)\\.){3}(25[0–5]|2[0-4][0–9]|[01]?[0–9][0–9]?))$", "task_type": "coding"}
{"input": "Create a Node.js server that can listen on port 8080.", "output": "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 8080;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});", "task_type": "coding"}
{"input": "Write a function to check if all the items in a list are of the same data type.", "output": "def check_type(items):\n  # get the type of first item\n  item_type = type(items[0])\n  \n  # check if all items are of the same type\n  for item in items[1:]:\n    if item_type != type(item):\n      return False\n  return True\n\n# Test\nprint(check_type([1, 2, 3, 4])) # Output: True", "task_type": "coding"}
{"input": "Implement a function that returns the total number of vowels in a string in C++.", "output": "#include <iostream>\n#include <string>\n\nint countVowels(std::string str) {\n    int count = 0;\n    \n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u') \n            count++;\n    }\n    \n    return count;\n}\n\nint main() {\n    std::string str = \"Hello World!\";\n    \n    std::cout << \"Number of vowels : \" << countVowels(str);\n    return 0;\n}", "task_type": "coding"}
{"input": "Describe the difference between an abstract class and an interface in Java", "output": "The main difference between an abstract class and an interface in Java is that abstract classes can contain concrete (implemented) methods, while interfaces cannot. An abstract class is a class that cannot be instantiated, used as a base class that provides basic functionality and shared code to its derived classes. An interface is a purely abstract class and specifies what its derived classes must implement. Interfaces can also contain constants. A class can implement multiple interfaces but can only extend one abstract class.", "task_type": "coding"}
{"input": "Convert a JSON object to corresponding HTML table format.", "output": "<table>\n     <tr>\n        <td>Name</td>\n        <td>John</td>\n    </tr>\n    <tr>\n        <td>Age</td>\n        <td>31</td>\n    </tr>\n    <tr>\n        <td>City</td>\n        <td>New York</td>\n    </tr>\n</table>", "task_type": "coding"}
{"input": "Create an object-oriented C# program that prints \"Hello, World!\".", "output": "class Program \n{ \n    static void Main(string[] args) \n    { \n        // create an object of type Hello \n        Hello helloObject = new Hello(); \n       \n        // call the SayHello method of the helloObject \n        helloObject.SayHello(); \n    } \n} \n\n// Create a class named Hello \npublic class Hello \n{ \n    public void SayHello() \n    { \n        Console.WriteLine(\"Hello, World!\"); \n    } \n}", "task_type": "coding"}
{"input": "Write a function to merge two sorted lists into one sorted list.", "output": "def merge_lists(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        final_list.append(list2[j])\n        j += 1\n    \n    return final_list\n\nprint(merge_lists(list1, list2))", "task_type": "coding"}
{"input": "Modify the following Javascript code to check if a given number is prime or not.", "output": "function isPrime(n) {\n  if (n <= 1) {\n    return false;\n  }\n  \n  // Check from 2 to n-1\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n \n  return true;\n}", "task_type": "coding"}
{"input": "Design a URL shortening system where a given URL is converted to an 8 digit alphanumeric string.", "output": "An 8 digit alphanumeric string can be generated by mapping the given URL to a hash value and then truncating it to 8 characters. For example, the given URL could be mapped to the hash \"d7539b2d\" and the resulting 8 character string could be \"d7539b2d\".", "task_type": "coding"}
{"input": "Write a Java class that can be used to store and access a large dictionary.", "output": "import java.util.HashMap;\n\npublic class Dictionary {\n \n    private HashMap<String, String> dictionary;\n \n    public Dictionary() {\n        this.dictionary = new HashMap<>();\n    }\n \n    public void addWord(String word, String definition) {\n        dictionary.put(word, definition);\n    }\n \n    public String getDefinition(String word) {\n        return dictionary.get(word);\n    }\n}", "task_type": "coding"}
{"input": "Create classes in Java to represent a school and its students.", "output": "public class School {\n    private String name;\n    private List<Student> students;\n\n    //constructor, getters, setters, and other methods\n    \n    public void addStudent(Student student) {\n        students.add(student);\n    }\n}\n\npublic class Student {\n    private String name;\n    private int age;\n\n    //constructor, getters, setters, and other methods\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n}", "task_type": "coding"}
{"input": "Suggest an algorithm in Python for sorting an array of integers from smallest to largest.", "output": "def sortInts(nums): \n    # Traverse through all array elements \n    for i in range(len(nums)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(nums)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if nums[j] > nums[j+1] : \n                nums[j], nums[j+1] = nums[j+1], nums[j] \n                \n    return nums", "task_type": "coding"}
{"input": "Design a program to find the sum of all numbers in an array of size 5", "output": "public class SumOfElements { \n    // Function to get sum of all elements. \n    public static int getSum(int[] arr) \n    { \n        int sum = 0; \n        for (int i : arr) \n            sum += i; \n        return sum; \n    } \n  \n    public static void main(String[] args) \n    { \n        int arr[] = { 4, 8, 2, 6, 1 }; \n        int sum = getSum(arr); \n  \n        System.out.println(\"Sum is : \" + sum); \n    } \n}", "task_type": "coding"}
{"input": "Create an algorithm to generate a random password", "output": "def generate_password(length):\n  password = \"\"\n  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\"\n  for i in range(length):\n    password += choice(characters)\n  return password\n\nprint(generate_password(10)) // output 5s@N#s9J@2", "task_type": "coding"}
{"input": "Create an integer array using Java and sort it using the bubble sort algorithm.", "output": "// Create an integer array\nint[] array = {4, 2, 6, 1, 3};\n\n// Sort the array using the bubbleSort function\nbubbleSort(array);\n\n// Write a function to implement the bubbleSort algorithm\npublic static int[] bubbleSort(int[] array) {\n    int len = array.length;\n    for (int i = 0; i < len; i++) {\n        for (int j = 0; j < len; j++) {\n            if (array[j] > array[j+1]) {\n                int temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n            }\n        }\n    }\n    return array;\n}\n// The sorted array is [1, 2, 3, 4, 6]", "task_type": "coding"}
{"input": "How does a hash table work?", "output": "A hash table is a data structure that stores data items in an associative array where the key is used to quickly search for the data item. It is based on the concept of hashing which converts a key into an address in the array. Each address points to the data item associated with that key. The hash table offers fast lookup times by using hashing functions which are designed to spread data evenly over the table.", "task_type": "coding"}
{"input": "Discuss some of the common applications of ranking algorithms.", "output": "Ranking algorithms are commonly used for a wide range of applications such as web search, recommender systems, spam filtering, and sentiment analysis. In web search, ranking algorithms are used to rank websites according to relevance, so that the most relevant website appears first in the search results. Recommender systems use ranking algorithms to rank items according to user preference, so that the user can be recommended the item that best suits their preferences. Spam filtering is another application where ranking algorithms are used to identify and filter out unsolicited messages. Last but not least, sentiment analysis also uses ranking algorithms to analyze customer feedback, so that companies can identify customer sentiment and take the necessary steps to address it.", "task_type": "coding"}
{"input": "Write a SASS mixin to add shadow style to multiple elements", "output": "@mixin myshadow($shdwBlur, $shdwColor)\n{\n    -webkit-box-shadow : 0 0 $shdwBlur $shdwColor;\n    -moz-box-shadow    : 0 0 $shdwBlur $shdwColor;\n    box-shadow         : 0 0 $shdwBlur $shdwColor;\n}", "task_type": "coding"}
{"input": "Sort a list of words by the frequency of their occurrence.", "output": "\"\"\"\nSort a list of words by the frequency of their occurrence\n\"\"\"\n\ndef sort_words_by_frequency(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\n    sorted_words = sorted(frequency_dict.items(), key=lambda x: x[1], reverse=True)\n    return [word for word, _ in sorted_words]\n\nif __name__ == '__main__':\n    print(sort_words_by_frequency(['dog', 'cat', 'bed', 'dog', 'mouse', 'rat']))", "task_type": "coding"}
{"input": "Using string functions, capitalize each word in the given sentence.", "output": "sentence = \"python is a programming language\"\n\n# split the sentence into individual words\nwords = sentence.split(\" \")\n\n# capitalize each word in the sentence\ncapitalized_words = [word.capitalize() for word in words]\n\n# join the words back together\ncapitalized_sentence = \" \".join(capitalized_words)\n\nprint(capitalized_sentence) # prints \"Python Is A Programming Language\"", "task_type": "coding"}
{"input": "Create a JavaScript program to check if a string has at least one alphabet.", "output": "function hasAlphabet(str) {\n  let hasAlphabet = false;\n  for (let char of str) {\n    if (char >= 'A' && char <= 'Z' || char >= 'a' && char <= 'z') {\n      hasAlphabet = true;\n      break;\n    }\n  }\n  return hasAlphabet;\n}", "task_type": "coding"}
{"input": "Parse this JSON string into a JSONObject", "output": "JSONObject jsonObj = new JSONObject(jsonInput);\n\n// get the data\nJSONObject data = jsonObj.getJSONObject(\"data\");\n\n// get the users list\nJSONArray users = data.getJSONArray(\"users\");\n\n// traverse the users list\nfor(int i=0;i<users.length();i++){\n    JSONObject user = users.getJSONObject(i);\n    String name = user.getString(\"name\");\n    int age = user.getInt(\"age\");\n}", "task_type": "coding"}
{"input": "Process this CSV string into an array of objects.", "output": "const csvInput = `name, age\nJohn, 20\nKen, 30`;\n\nconst lines = csvInput.split('\\n');\n\nconst header = lines[0].split(', ');\n\nconst rows = lines.slice(1);\n\nconst objects = [];\n\nrows.forEach(row => {\n    const entries = row.split(', ');\n    const obj = {};\n    header.forEach((key, i) => {\n      obj[key] = entries[i];\n    });\n    objects.push(obj);\n});\n\n// [\n//   { name: 'John', age: '20' },\n//   { name: 'Ken', age: '30' }\n// ]", "task_type": "coding"}
{"input": "Create a web page with HTML/CSS that consists of three circles of different colors and different sizes.", "output": "<html>\n  <head>\n  <style>\n    div {\n        width: 100px;\n        height: 100px;\n        border-radius: 50%;\n    }\n    #circle1 {\n        background-color: red;  \n    }\n    #circle2 {\n        background-color: green;\n        width: 80px;\n        height: 80px;\n    }\n    #circle3 {\n        background-color: blue;\n        width: 60px;\n        height: 60px;\n    }\n    </style>\n  </head>\n  <body>\n    <div id=\"circle1\"></div>\n    <div id=\"circle2\"></div>\n    <div id=\"circle3\"></div>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Create an SQL table to store information about books and authors", "output": "CREATE TABLE books (\n    book_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES authors (author_id)\n);\n\nCREATE TABLE authors (\n    author_id INT PRIMARY KEY,\n    first_name VARCHAR(255) NOT NULL,\n    last_name VARCHAR(255) NOT NULL\n);", "task_type": "coding"}
{"input": "Create a function to insert a given character at every odd index in a given string.", "output": "def insert_character(string, character): \n    # initialise a new string\n    new_string = \"\"\n    # loop over the string\n    for i in range(len(string)):\n        # if the index is odd \n        if i % 2 != 0:\n            # add the character\n            new_string += character\n        # add the current character\n        new_string += string[i]\n    # return the new string\n    return new_string", "task_type": "coding"}
{"input": "Write an HTML program to display an output as a table.", "output": "<html>\n    <head>\n        <title>Table example</title>\n    </head>\n    <body>\n        <table border = \"1\">\n            <tr>\n            <td>Row 1, Column 1</td>\n            <td>Row 1, Column 2</td> \n            </tr>\n            <tr>\n                <td>Row 2, Column 1</td>\n                <td>Row 2, Column 2</td> \n            </tr>\n        </table>\n    </body>\n</html>", "task_type": "coding"}
{"input": "Design a class for an Employee with attributes name, experience, and salary.", "output": "class Employee: \n    def __init__(self, name, experience, salary):\n        self.name = name\n        self.experience = experience\n        self.salary = salary\n        \n    def get_name(self):\n        return self.name\n    \n    def get_experience(self):\n        return self.experience\n    \n    def get_salary(self):\n        return self.salary", "task_type": "coding"}
{"input": "Make a function in Python which calculates the covariance between two given lists.", "output": "def cov(list1, list2): \n    mean1 = sum(list1)/len(list1) \n    mean2 = sum(list2)/len(list2) \n    total = 0\n\tfor i in range(len(list1)): \n        total += (list1[i] - mean1)*(list2[i] - mean2) \n    return total/len(list1)", "task_type": "coding"}
{"input": "Suggest a method in Python to remove any whitespaces from a given string.", "output": "The easiest way to remove whitespaces from a string in Python is to use the replace() method. This method takes two arguments, the string to be replaced and the string to replace it with. To remove all existing whitespace, use the string ' ' as the replace argument. For example, given the string \"This is my string\", the following code would remove all whitespace from the string:\n\nstring = \"This is my string\"\nstring = string.replace(' ', '')", "task_type": "coding"}
{"input": "Write a code to select records from a database where the country name is identical to the input.", "output": "\"\"\"\nSelect records from the database where the country name is identical to the input\n\"\"\"\n\nimport sqlite3\n\ncountry = 'Australia'\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\nquery = \"SELECT * FROM countries WHERE name = ?\"\nc.execute(query, (country,))\n\ndata = c.fetchall()\n\nconn.close()", "task_type": "coding"}
{"input": "Create an algorithm to sort a list of numbers in ascending order.", "output": "def sort_list_ascending(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n# Driver code to test above \nlst = [2, 5, 1, 7, 4] \nprint(sort_list_ascending(lst))", "task_type": "coding"}
{"input": "Write a function to parse a given string and construct a dictionary which contains each word and the corresponding frequency.", "output": "def word_count(my_string): \n    words = my_string.split()  \n    frequency = {} \n    for word in words: \n        if word in frequency: \n            frequency[word] += 1\n        else: \n            frequency[word] = 1\n    return frequency\n\nfrequency_dict = word_count(my_string)\nprint(\"Frequency dictionary: \", frequency_dict)", "task_type": "coding"}
{"input": "Sort a list of integers in ascending order using selection sort.", "output": "def selection_sort(list): \n\n    for i in range(len(list)): \n  \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j\n        list[i], list[min_idx] = list[min_idx], list[i]\n\nlist = [9, 5, 2, 0, 7, 4, 1, 8, 6, 3]\nselection_sort(list) \nprint (\"Sorted array:\", list)", "task_type": "coding"}
{"input": "Implement a PHP function to retrieve all words that start with a given letter from a given array.", "output": "<?php\nfunction getWordsStartingWith($array, $letter)\n{\n    $matches = array_filter($array, function($word) use($letter) {\n        return strtolower($word[0]) == strtolower($letter);\n    });\n    return array_values($matches);\n}\n\n$array = [\"apple\", \"ball\", \"cat\", \"dart\", \"elephant\"];\n$letter = \"e\";\n$result = getWordsStartingWith($array, $letter);\n\nprint_r($result);", "task_type": "coding"}
{"input": "Build a Python program to generate a prime numbers list in a given range.", "output": "def prime_numbers(start_num, end_num):\n    prime_nums_list = []\n    for num in range(start_num, end_num + 1):  \n        # all prime numbers are greater than 1  \n        if num > 1:  \n            for i in range(2,num):  \n                if (num % i) == 0:  \n                    break  \n            else:  \n                prime_nums_list.append(num)\n\n    return prime_nums_list", "task_type": "coding"}
{"input": "Modify a given code to sort a two-dimensional array (matrix) using bubble sort.", "output": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+1][k] : \n                    arr[j][k], arr[j+1][k] = arr[j+1][k], arr[j][k]\n  \narr = [[1, 5, 2], \n       [8, 4, 6], \n       [3, 7, 9]]\n\nbubble_sort(arr)\nprint(\"Sorted matrix: \") \nfor row in arr: \n    print(row)", "task_type": "coding"}
{"input": "Create a dictionary in Python to store the frequency of characters in a string.", "output": "# Empty dictionary\nfrequencies = {}\n\n# Iterate over each character in the string\nfor char in string:\n    # Check if the character exists as a key in the dictionary\n    if char in frequencies:\n        # Increase the count by 1 if it exists\n        frequencies[char] += 1\n    else:\n        # Set the count to 1 for a new character\n        frequencies[char] = 1", "task_type": "coding"}
{"input": "Write a C++ program to print a decimal number in reverse", "output": "#include<iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 54321;\n    int reversed = 0;\n    \n    while(num != 0) {\n        reversed = reversed * 10 + num % 10;\n        num /= 10;\n    }\n    cout << \"Reversed Number: \" << reversed << endl;\n    return 0;\n}", "task_type": "coding"}
{"input": "Generate an appropriate function in Java to check if a given number is an Armstrong number.", "output": "public static boolean isArmstrongNumber(int number) \n{ \n    int originalNumber, remainder, result = 0;\n    originalNumber = number;\n\n    while (originalNumber != 0) \n    { \n        remainder = originalNumber % 10;\n        result += Math.pow(remainder, 3);\n        originalNumber /= 10;\n    } \n    if(result == number) \n        return true; \n    else\n        return false; \n}", "task_type": "coding"}
{"input": "Rewrite the following code using C# with the same output.", "output": "public string Roman_Number(int number)\n{\n string roman = \"\";\n int[] coefficients = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n string[] numerals = new string[]{\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n for (int i = 0; i < coefficients.Length; i++)\n {\n  while (number >= coefficients[i])\n  {\n   number -= coefficients[i];\n   roman += numerals[i];\n  }\n }\n\n return roman;\n}", "task_type": "coding"}
{"input": "Parse the following HTML text and print out all of the  elements and the content inside them.", "output": "from bs4 import BeautifulSoup\n\nhtml = '<html><div><h1>This is a test</h1><p>This is a paragraph</p></div></html>'\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Print out all the elements\nfor tag in soup.find_all():\n    print(f'Tag: {tag.name}')\n    \n# Print out the content inside the tags\nfor element in soup.find_all():\n    print(element.text)\n\n# Output:\nTag: html\nTag: div\nTag: h1\nTag: p\nThis is a test\nThis is a paragraph", "task_type": "coding"}
{"input": "Write a JavaScript code that creates an array of objects having keys \"name\", \"age\" and \"city\".", "output": "const users = [\n {name: 'John', age: 30, city: 'New York'}, \n {name: 'Lisa', age: 25, city: 'Sydney'},\n {name: 'Alex', age: 27, city: 'London'},\n {name: 'Cathy', age: 28, city: 'Tokyo'},\n {name: 'David', age: 32, city: 'Berlin'} \n];", "task_type": "coding"}
{"input": "Generate a data structure that can efficiently store an array of words", "output": "\"\"\"\nGenerate a data structure that can efficiently store an array of words\n\"\"\"\n\n# create a trie (a node with 26 references to other nodes)\nclass TrieNode:\n    def __init__(self):\n        self.children = dict()\n        self.end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.end = True\n\n# create an empty array\nword_array = []\n\n# create a new trie\ntrie = Trie()\n\n# iterate over the array and insert the words into the trie\nfor word in word_array:\n    trie.insert(word)", "task_type": "coding"}
{"input": "Generate a Java program to read two numbers from the user and print their sum.", "output": "import java.util.Scanner;\n  \npublic class SumOfTwoNumbers \n{\n    public static void main(String[] args) \n    {\n        Scanner scanner = new Scanner(System.in);\n        int num1, num2, sum;\n        System.out.print(\"Enter first number:\");\n        num1 = scanner.nextInt();\n        \n        System.out.print(\"Enter second number:\");\n        num2 = scanner.nextInt();\n        \n        scanner.close();\n        sum = num1 + num2;\n        System.out.println(\"Sum of both numbers :\" + sum);\n    }\n}", "task_type": "coding"}
{"input": "Create code that, given a string, returns the longest permutation of the same character", "output": "def longest_consecutive_character(str):\n\t# Store character, length of longest permutation, and current length\n    max_char = str[0]\n    max_length = 1\n    cur_length = 1\n    \n    # Iterate over the string\n    for i in range(1, len(str)):\n        # If the characters are the same\n        if str[i] == str[i-1]:\n            cur_length += 1\n            \n            # Check if the current permutation is longest\n            if cur_length > max_length:\n                max_char = str[i]\n                max_length = cur_length\n        # Reset count if character changes\n        else: \n            cur_length = 1\n    \n    return max_char, max_length", "task_type": "coding"}
{"input": "Write a function to traverse a tree using depth-first search algorithm in Java.", "output": "public void traverseTree(Node root) {\nS tack<Node> stack = new Stack<>();\nstack.push(root);\nwhile (!stack.isEmpty()) {\n    Node node = stack.pop();\n    // Process the node\n    if (node.right != null)\n        stack.push(node.right);\n    if (node.left != null)\n        stack.push(node.left);\n    }\n}", "task_type": "coding"}
{"input": "Given an array of integers, write a function to check if the sum of any two of them equals the given parameter ‘n’.", "output": "def check_sum(array, n):\n    \"\"\"\n    Given an array of integers, returns True if the sum of any two of them equals the given parameter 'n'. \n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] + array[j] == n:\n                return True\n    return False", "task_type": "coding"}
{"input": "Write a Python script to check for syntactic correctness of an algorithm.", "output": "def is_algorithm_syntactically_correct(algorithm):\n    algorithm = algorithm.replace('\\n', ' ').replace('\\t ', ' ').lower()\n    \n    required_words = ['read', 'input', 'initialize', 'variables', 'process', 'output', 'result']\n    for word in required_words:\n        if word not in algorithm:\n            return False\n    return True", "task_type": "coding"}
{"input": "Write an HTML form for a survey about a school.", "output": "<form action=\"survey.php\" method=\"post\">\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Age:</label>\n  <input type=\"number\" name=\"age\"><br>\n  <label>What did you think of your school experience?</label>\n  <input type=\"text\" name=\"experience\"><br>\n  <label>Would you recommend your school to a friend?</label>\n  <input type=\"yesno\" name=\"recommend\"><br>\n  <input type=\"submit\">\n</form>", "task_type": "coding"}
{"input": "Write a C++ code that implements the selection sort algorithm.", "output": "#include <iostream> \nusing namespace std; \n  \nvoid swap(int *xp, int *yp) \n{ \n  int temp = *xp; \n  *xp = *yp; \n  *yp = temp; \n} \n  \nvoid selectionSort(int arr[], int n) \n{ \n  int i, j, min_idx; \n  \n  for (i = 0; i < n-1; i++) \n  { \n    min_idx = i; \n    for (j = i+1; j < n; j++) \n      if (arr[j] < arr[min_idx]) \n        min_idx = j; \n  \n    swap(&arr[min_idx], &arr[i]); \n  } \n} \n  \nint main() \n{ \n  int arr[] = {7, 4, 3, 1, 9}; \n  int n = sizeof(arr)/sizeof(arr[0]); \n  selectionSort(arr, n); \n  return 0; \n}", "task_type": "coding"}
{"input": "What is the difference between pointer and reference variables in C++?", "output": "In C++, a pointer is a variable which holds the memory address of another variable. This memory address can point to a local variable within the same scope, or a global variable. On the other hand, a reference is an alias name for a previously defined variable. When a reference is initialized with a variable, it acts just like a pointer but unlike pointers, references cannot be reseated to point to a different object. A reference always refers to the same memory address for the lifetime of the reference.", "task_type": "coding"}
{"input": "Design a solution for the Towers of Hanoi problem using Java.", "output": "public class TowersOfHanoi { \n    public static void towersOfHanoi(int n, char from_rod, \n                              char to_rod, char aux_rod) \n    { \n        if (n == 1) { \n            System.out.println(\"Move disk 1 from rod \" +  from_rod + \" to rod \" + to_rod); \n            return; \n        } \n        towersOfHanoi(n - 1, from_rod, aux_rod, to_rod); \n        System.out.println(\"Move disk \" + n + \" from rod \" +  from_rod + \" to rod \" + to_rod); \n        towersOfHanoi(n - 1, aux_rod, to_rod, from_rod); \n    } \n  \n    //  Driver method \n    public static void main(String args[]) \n    { \n        // Number of disks \n        int n = 4; \n  \n        // A, B and C are names of rods \n        towersOfHanoi(n, 'A', 'C', 'B'); \n    } \n}", "task_type": "coding"}
{"input": "Construct an XML document for storing a collection of books and their authors.", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n \n<books>\n  <book id=\"1\">\n    <title>Book 1</title>\n    <author>John Doe</author>\n  </book>\n  <book id=\"2\">\n    <title>Book 2</title>\n    <author>Jane Doe</author>\n  </book>\n  <book id=\"3\">\n    <title>Book 3</title>\n    <author>Robert Smith</author>\n  </book>\n</books>", "task_type": "coding"}
{"input": "Write an algorithm to find the maximum subarray sum within the provided input array.", "output": "def max_subarray_sum(arr):\n    max_sum = 0\n    curr_sum = 0\n    for x in arr:\n        curr_sum += x\n        if curr_sum < 0:\n            curr_sum = 0\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    print(max_subarray_sum(arr))", "task_type": "coding"}
{"input": "Create a coding program that sorts a given list of numbers into ascending order.", "output": "def ascending_order(arr): \n\n# Bubble sort algorithm. \n    n = len(arr) \n   \n    # Traverse through all array elements \n    for i in range(n): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n   \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                \n    return arr\n\n# Test \narr = [4, 3, 2, 5, 9, 1, 8]\n\nascending_order(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "task_type": "coding"}
{"input": "Use class inheritance to create an object in Java.", "output": "// Base class \nclass Vehicle \n{ \n   String brand = \"Ford\"; \n   public void honk() \n   { \n      System.out.println(\"Tuut, tuut!\"); \n   } \n} \n  \n// sub class \nclass Car extends Vehicle \n{ \n   String modelName = \"Mustang\"; \n   public static void main(String[] args) \n   { \n      // Create an object of Car \n      Car myCar = new Car(); \n  \n      // Call the honk method (From the Vehicle class) on the myCar object \n      myCar.honk(); \n  \n      // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class \n      System.out.println(myCar.brand + \" \" + myCar.modelName);   \n   } \n}", "task_type": "coding"}
{"input": "Create a function that takes in a positive integer up to 1000 and prints out its prime factorization.", "output": "def prime_factorization(num):\n    '''This function takes in a positive integer and prints out its prime factorization.'''\n    factors = []\n    dividend = num\n    divisor = 2\n    while divisor <= dividend:\n        if dividend % divisor == 0:\n            factors.append(divisor)\n            dividend //= divisor\n        else:\n            divisor += 1\n    return factors", "task_type": "coding"}
{"input": "Write a class in Java to calculate the perimeter and area of a rectangle.", "output": "public class Rectangle { \n    int length, width; \n  \n    // Constructor \n    public Rectangle(int length, int width) \n    { \n        this.length = length; \n        this.width = width; \n    }\n\n    public int getPerimeter() \n    { \n        // Calculate perimeter \n        return 2*(length + width); \n    } \n  \n    public int getArea() \n    { \n        // Calculate area \n        return length*width; \n    } \n}", "task_type": "coding"}
{"input": "Write a ReactJS code to render the following DOM structure.", "output": "import React from 'react';\n\nconst App = () => {\n  return(\n    <div className=\"container\">\n      <h1>Welcome!</h1>\n      <div>\n        <h2>I'm a React App</h2>\n        <p>This is an example code to render a DOM structure.</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;", "task_type": "coding"}
{"input": "Create a program to generate the sum of all the elements in a given list", "output": "\"\"\"\nCreate a program to generate the sum of all the elements in a given list\n\"\"\"\n\ndef sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    print(sum_list([1, 2, 3, 4, 5]))", "task_type": "coding"}
{"input": "Create a function to take two integers and return the larger one.", "output": "def larger(num1, num2):\n    \"\"\"Takes two integers and returns the larger one.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The larger of the two given integers.\n    \"\"\"\n    return max(num1, num2)", "task_type": "coding"}
{"input": "Using jQuery, update the HTML code to provide the user a toggle switch that changes the text from \"off\" to \"on\" when clicked.", "output": "<div>\n    <p>Status: <span class='status'>off</span>\n        <button onclick=\"toggleStatus()\">Toggle</button>\n    </p>\n\n    <script>\n        function toggleStatus() {\n            $('.status').text($('.status').text() === 'off' ? 'on' : 'off');\n        }\n    </script>\n</div>", "task_type": "coding"}
{"input": "Use the NumPy package to multiply two matrices.", "output": "import numpy as np\n \nmatrix1 = np.array([[1, 2], [3, 4]])\nmatrix2 = np.array([[2, 3], [4, 5]])\n \nproduct = np.matmul(matrix1, matrix2)\nprint(product)\n\n# Output\n# array([[10, 13],\n#        [22, 29]])", "task_type": "coding"}
{"input": "Create a program to print the FizzBuzz series", "output": "def fizzbuzz(n): \n    for num in range(1, n+1):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0: \n            print(\"Fizz\") \n        elif num % 5 == 0: \n            print(\"Buzz\")\n        else: \n            print(num)", "task_type": "coding"}
{"input": "How is a 2D array declared and initialized in Java?", "output": "int[][] array 2D = new int[n][m]; \n//where n is the number of rows and m is the number of columns. \n//You can also create a 2D array by initializing elements with curly brackets, for example int[][] array2D = {{1,2,3},{4,5,6}};", "task_type": "coding"}
{"input": "Explain the differences between a multi-threaded application and a multi-process application.", "output": "A multi-threaded application is an application that uses multiple threads of execution to execute different tasks simultaneously. All threads share the same address space, so multiple threads can access the same data in memory. This provides a more optimized use of resources, as one thread does not need to wait for another thread to finish before accessing the same data.\n\nA multi-process application is an application that uses multiple processes to execute different tasks simultaneously. Each process has its own separate address space, meaning the processes do not share the same data in memory. This means that the processes can’t directly access data from each other, and communication between processes must be established through inter-process communication mechanisms like pipes, sockets, and message queues.", "task_type": "coding"}
{"input": "Generate a function to calculate the probability of an event.", "output": "\"\"\"\nGenerate a function to calculate the probability of an event\n\"\"\"\ndef calculate_probability(num_outcomes, num_favourable_outcomes):\n    # calculate probability \n    probability = float(num_favourable_outcomes) / float(num_outcomes)\n    return probability\n    \nif __name__ == '__main__': \n    num_outcomes = 36\n    num_favourable_outcomes = 9\n    print(\"Probability of an event is: \" + str(calculate_probability(num_outcomes, num_favourable_outcomes)))", "task_type": "coding"}
{"input": "Write a HTML page to set a background color for a table with the color code '#e6e6fa'.", "output": "<!DOCTYPE html>\n<html> \n  <head> \n    <title>Table with Background Color</title> \n  </head> \n \n  <body> \n    <h1>Table with Background Color</h1>\n  \n    <table style=\"background-color: #e6e6fa;\">\n      <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Occupation</th>\n      </tr>\n    </table>\n  </body> \n</html>", "task_type": "coding"}
{"input": "Re-implement the same program in a different language of your choice.", "output": "def quick sort(arr):\n    if len(arr) < 2:\n        return arr\n    else: \n        pivot = arr[0]\n        left = [x for x in arr[1:] if x <= pivot]\n        right = [x for x in arr[1:] if x > pivot]\n        return quick_sort(left) + [pivot] + quick_sort(right)", "task_type": "coding"}
{"input": "Write a regex to detect valid email addresses.", "output": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$", "task_type": "coding"}
{"input": "Design an algorithm in JavaScript to find maximum element within an array.", "output": "function findMax(arr) { \n\n    let max = arr[0]; \n \n    // Loop through array elements \n    // and compare with max \n    for (let i = 1; i < arr.length; i++) \n        if (arr[i] > max) \n            max = arr[i]; \n  \n    // return max element \n    return max; \n} \n\n// let arr = [4,7,2,1,0,6,5]\n// console.log(findMax(arr)) # returns 7", "task_type": "coding"}
{"input": "Develop a Python class for handling the API calls.", "output": "class APIHandler:\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.api_key = api_key\n    \n    def get(self, endpoint):\n        response = requests.get(self.base_url + endpoint)\n        return response\n    \n    def post(self, endpoint, data):\n        headers = {'Authorization': 'Bearer ' + self.api_key}\n        response = requests.post(self.base_url + endpoint, headers=headers, data=data)\n        return response", "task_type": "coding"}
{"input": "Create a class in Java which computes the sum of squares of even numbers between k and n.", "output": "public class SumSquares {\n    public static int sumSquares(int k, int n) {\n        int sum = 0;\n        for(int i = k; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += (i * i);\n            }\n        }\n        return sum;\n    }\n}", "task_type": "coding"}
{"input": "Write a PHP script to create a simple contact form", "output": "<?php\nif(isset($_POST['submit'])){\n \n$name = $_POST['name'];\n$subject = $_POST['subject'];\n$mailFrom = $_POST['email'];\n$message = $_POST['message'];\n\n$mailTo = \"example@gmail.com\";\n$headers = \"From: \".$mailFrom;\n$txt = \"You have received an email from \".$name.\".\\n\\n\".$message;\n \nmail($mailTo, $subject, $txt, $headers);\nheader(\"Location: index.php?mailsend\");\n}\n?>", "task_type": "coding"}
{"input": "Write a Java program for encrypting the text \"Hello World!\" using the Caesar Cipher.", "output": "public class CaesarCipher \n{ \n    // Encrypts text using a shift od \"s\" \n    public static StringBuffer encrypt(String text, int s) \n    { \n        StringBuffer result= new StringBuffer(); \n  \n        for (int i=0; i<text.length(); i++) \n        { \n            if (Character.isUpperCase(text.charAt(i))) \n            { \n                char ch = (char)(((int)text.charAt(i) + s - 65) % 26 + 65); \n                result.append(ch); \n            } \n            else\n            { \n                char ch = (char)(((int)text.charAt(i) + s - 97) % 26 + 97); \n                result.append(ch); \n            } \n        } \n        return result; \n    } \n  \n    // Driver code \n    public static void main(String[] args) \n    { \n        String text = \"Hello World!\"; \n        int s = 4; \n        System.out.println(\"Text  : \" + text); \n        System.out.println(\"Shift : \" + s); \n        System.out.println(\"Cipher: \" + encrypt(text, s)); \n    } \n} \n\n# Output: Cipher: Lipps Asvph!", "task_type": "coding"}
{"input": "Create a function in JavaScript that takes in a string and performs a bubble sort on it and returns the sorted string.", "output": "function bubbleSort(str) {\n    let arr = str.split('');\n    let sorted = false;\n    \n    while (!sorted) {\n        sorted = true;\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] > arr[i + 1]) {\n                let temp = arr[i];\n                arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n                sorted = false;\n            }\n        }\n    }\n    \n    return arr.join('');\n}", "task_type": "coding"}
{"input": "Write a JavaScript function 'formatDate' which takes a date as string in the format \"YYYYMMDD\" and returns it in the format \"MM/DD/YYYY\"", "output": "function formatDate(date) {\n    let newDate = date.substr(0, 4) + \"/\" + date.substr(4, 2) + \"/\" + date.substr(6);\n    return newDate;\n}\n\nconsole.log(formatDate(\"20210320\"))\n\nOUTPUT:\n03/20/2021", "task_type": "coding"}
{"input": "Generate a dictionary with 10 elements and display it.", "output": "dictionary = {\n 'A': 'Apple',\n 'B': 'Ball',\n 'C': 'Cat',\n 'D': 'Dog',\n 'E': 'Elephant',\n 'F': 'Fish',\n 'G': 'Goat',\n 'H': 'Horse',\n 'I': 'Ink',\n 'J': 'Jelly'\n}\n \nprint(dictionary)", "task_type": "coding"}
{"input": "Design a C++ program that prints out a Fibonacci series of numbers up to 20 elements.", "output": "#include <iostream> \nusing namespace std; \n\nint main() \n{ \n\tint ele, i, number[20]; \n\n\t//create the fibonacci series\n\tnumber[0] = 0; \n\tnumber[1] = 1; \n\n\tfor (i = 2; i < 20; i++) \n\t{\n\t\tnumber[i] = number[i-1] + number[i-2]; \n\t} \n\n\t//print the fibonacci series\n\tfor (i = 0; i < 20; i++) \n\t{\n\t\tcout << number[i] << \" \"; \n\t} \n\n\treturn 0; \n}", "task_type": "coding"}
{"input": "Write a Python script to check if an email address is valid depending on the given conditions.", "output": "import re\n\ndef is_valid_email(email):\n    regex = r\"^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,6}$\"\n    if re.search(regex, email) is not None:\n        return True\n    else:\n        return False\n\nemail = 'johnsmith@example.com'\nif is_valid_email(email):\n    print(\"Valid email\")\nelse:\n    print(\"Invalid email\")", "task_type": "coding"}
{"input": "Create a web page to display two input fields to enter the two numbers", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Input fields</title>\n</head>\n\n<body>\n    <h1>Input fields to enter two numbers</h1>\n    <form>\n        <p>Enter the first number:<p>\n        <input type=\"number\" name=\"number1\"><br><br>\n        <p>Enter the second number:</p>\n        <input type=\"number\" name=\"number2\"><br><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n</body>\n</html>", "task_type": "coding"}
{"input": "Determine the most frequent character in the provided string", "output": "function maxFrequencyChar(str) {\n  let maxChar = '';\n  let maxFrequency = 0;\n  let hashTable = {};\n \n  for(let char of str) {\n    if (hashTable[char]) {\n      hashTable[char] += 1;\n    } else {\n      hashTable[char] = 1;\n    }\n  }\n \n  for(let char in hashTable) {\n    if(hashTable[char] > maxFrequency) {\n      maxFrequency = hashTable[char];\n      maxChar = char;\n    }\n  }\n \n  return maxChar;\n}", "task_type": "coding"}
{"input": "Create a data structure in Java to store books and their associated information like ISBN, authors, etc.", "output": "class Book {\n   private int ISBN;\n   private String title;\n   private List<String> authors;\n   private int year;\n \n   public Book(int ISBN, String title, List<String> authors, int year) {\n     this.ISBN = ISBN;\n     this.title = title;\n     this.authors = authors;\n     this.year = year;\n   }\n   //getters and setters\n }", "task_type": "coding"}
{"input": "Code a script that prints out the first n elements of the Fibonacci sequence.", "output": "def Fibonacci(n): \n    fibList = [0, 1] \n    \n    if n <= 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        print(fibList[0]) \n    elif n == 2: \n        print(fibList) \n    else: \n        temp = fibList[0] + fibList[1] \n        while len(fibList) < n: \n            fibList.append(temp) \n            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2] \n      \n    return fibList \n  \n\nprint(Fibonacci(8))", "task_type": "coding"}
{"input": "Construct a function that adds two numbers written in reverse order in JavaScript.", "output": "function reversedAddition(reverseOrder1, reverseOrder2) {\n    let firstNum = parseInt(reverseOrder1.toString().split('').reverse().join(''));\n    let secondNum = parseInt(reverseOrder2.toString().split('').reverse().join(''));\n    let answer = firstNum + secondNum;\n  \n    return answer;\n}\n\nconsole.log(reversedAddition(893, 342))", "task_type": "coding"}
{"input": "Generate a code snippet to find the highest common factor of two given numbers", "output": "function highestCommonFactor(m, n) {\n  if (m === 0 || n === 0) {\n      return 0;\n  }\n\n  let a = Math.max(m, n);\n  let b = Math.min(m, n);\n\n  while (b !== 0) {\n      let c = b;\n      b = a % b;\n      a = c;\n  }\n\n  return a;\n}", "task_type": "coding"}
{"input": "Develop a program in Java that prints out the following star pattern.", "output": "public class Stars {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 0; j < i; j++) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}", "task_type": "coding"}
{"input": "Given a set of points and an origin point, calculate the distance between the origin point and each point in the set.", "output": "\"\"\"\nGiven a set of points and an origin point, calculate the distance between the origin point and each point in the set\n\"\"\"\nimport math \n\ndef points_distance(points, origin):\n    distances = []\n    for point in points:\n        distances.append(math.sqrt((point[0]-origin[0])**2 + (point[1]-origin[1])**2))\n    return distances\n\nif __name__ == '__main__':\n    print(points_distance([(1,1),(4,4),(3,3)], (0,0))) # [1.4142135623730951, 5.65685424949238, 4.242640687119285]", "task_type": "coding"}
{"input": "Develop a class in Python to print the name and age of the user.", "output": "class Hello: \n    def __init__(self,name,age): \n        self.name = name\n        self.age = age\n    \n    def printNameAge(self): \n        print(\"Name:\", self.name, \"Age:\", self.age)\n  \nobj1 = Hello(\"John\", 25) \nobj1.printNameAge()", "task_type": "coding"}
{"input": "What is memory management in C?", "output": "Memory management in C is a process of controlling and coordinating the use of memory in a program or operating system. It involves allocating and deallocating memory as needed. The main purpose of memory management is to provide ways of managing memory usage such that a program can run correctly and efficiently. This is done by allocating blocks of memory for the program to use and then deallocating the memory after its use.", "task_type": "coding"}
{"input": "Create an algorithm with pseudocode to find maximum and minimum element of an array.", "output": "Algorithm findMaxMin(arr)\n  Input: arr - an array of integers\n  Output: maxEle - the maximum element in the array, minEle - the minimum element in the array\nBegin\n  maxEle <- arr[0]\n  minEle <- arr[0]\n  for i = 0 to length(arr)-1 do\n    if arr[i] > maxEle then\n      maxEle <- arr[i]\n    end if\n    if arr[i] < minEle then\n      minEle <- arr[i]\n    end if\n  end for\n  return maxEle, minEle\nEnd", "task_type": "coding"}
{"input": "Design a C++ program to get the frequency of a subarray in an array.", "output": "int getFrequency(int arr[], int n, int subarr[], int m) \n{ \n    int count = 0; \n    for (int i = 0; i <= (n - m); i++) \n    { \n       int j;\n       for (j = 0; j < m; j++)\n       {\n          if (arr[i + j] != subarr[j])\n              break; \n       }\n       if (j == m) \n       count++;\n    }\n    return count; \n}", "task_type": "coding"}
{"input": "Create a HTML page to display the top 5 scores from a given array.", "output": "<html>\n  <head>\n    <title>Top 5 scores</title>\n  </head>\n  <body>\n    <h1>Top 5 scores</h1>\n    <ul>\n      <li>10</li>\n      <li>9</li>\n      <li>8</li>\n      <li>7</li>\n      <li>6</li>\n    </ul>\n  </body>\n</html>", "task_type": "coding"}
{"input": "Create an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.", "output": "\"\"\"\nCreate an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.\n\"\"\"\ndef optimal_sum(target, numbers): \n    if (target == 0): \n        return True\n    n = len(numbers) \n    subset = [True] + [False]*target \n      \n    for i in range(n): \n        for j in range(target,numbers[i]-1,-1): \n            subset[j] = subset[j] or subset[j-numbers[i]] \n  \n    return subset[target] \n\nif __name__ == '__main__': \n    target = 10\n    numbers = [1,4,5,3,6]\n    print(optimal_sum(target, numbers))", "task_type": "coding"}
{"input": "Use the following JSON data and write a JavaScript function to parse it.", "output": "function parseJSON(jsonString) {\n let employeeData = JSON.parse(jsonString);\n let employees = employeeData.employees;\n let parsedData = [];\n for (let i = 0; i < employees.length; i++){\n  let employee = employees[i];\n  let parsedEmployee = {};\n  parsedEmployee.firstName = employee.firstName;\n  parsedEmployee.lastName = employee.lastName;\n  parsedData.push(parsedEmployee);\n }\n return parsedData;\n};", "task_type": "coding"}
{"input": "Build a state machine in Python to process incoming keyboard events", "output": "# Define a StateMachine class\nclass StateMachine: \n    def __init__(self): \n        self.handlers = {} \n        self.startState = None\n        self.endStates = [] \n  \n    def add_state(self, state): \n        self.handlers[state.name] = state\n  \n    def set_start(self, name): \n        self.startState = name\n  \n    def set_end(self, name): \n        self.endStates.append(name) \n  \n    def run(self): \n        try: \n            handler = self.handlers[self.startState] \n        except: \n            raise(Exception, \"Must call .set_start() before .run()\")\n        while True:\n            # Get the next keyboard event\n            event = get_event()\n            if event:\n                newState = handler.run(event) \n            if newState.name in self.endStates: \n                break \n            else: \n                handler = self.handlers[newState.name]", "task_type": "coding"}
{"input": "Modify the given Java Program to generate the Fibonacci Series till provided number of terms.", "output": "public class Fibonacci { \n\n    static int fib(int n) \n    { \n    if (n <= 1) \n       return n; \n    return fib(n-1) + fib(n-2); \n    } \n       \n    public static void main (String args[]) \n    { \n    int n = 10; \n    System.out.println(fib(n)); \n    } \n}", "task_type": "coding"}
{"input": "Generate an HTML page with a table containing all the elements of an array in JavaScript.", "output": "<html>\n   <head>\n      <title>Array Table</title>\n   </head>\n   <body>\n      <table>\n         <tr>\n         <th>Element Value</th>\n         </tr>\n         <tr>\n            <td>1</td>\n         </tr>\n         <tr>\n            <td>2</td>\n         </tr>\n         <tr>\n            <td>3</td>\n         </tr>\n         <tr>\n            <td>4</td>\n         </tr>\n      </table>\n   </body>\n</html>", "task_type": "coding"}
{"input": "Write a code to encrypt a text using a Ceasar cipher", "output": "def ceasar_cipher(plaintext, shift): \n    ciphertext = \"\" \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + shift - 65) % 26 + 65)\n        else: \n            ciphertext += chr((ord(char) + shift - 97) % 26 + 97)\n    return ciphertext", "task_type": "coding"}
{"input": "Write a function to find the median of 3 numbers.", "output": "def median_of_three(x, y, z):\n    if x>= y:\n        if y>=z:\n            return y\n        elif x>=z:\n            return z\n        else:\n            return x\n    else:\n        if x>=z:\n            return x\n        elif y>=z:\n            return z\n        else:\n            return y", "task_type": "coding"}
{"input": "Create a dictionary that has each unique word as the key, and the number of times the word appears as the value.", "output": "words_counts = {\n    \"The\": 1,\n    \"quick\": 1,\n    \"brown\": 1,\n    \"fox\": 1,\n    \"jumped\": 1,\n    \"over\": 1,\n    \"the\": 1,\n    \"lazy\": 1,\n    \"dog.\": 1\n}", "task_type": "coding"}
{"input": "Create a code to generate a Mulberry Tree of height n levels.", "output": "def get_mulberry_tree(n):\n    spaces = n - 1\n    for i in range(1, n+1):\n        for j in range(spaces):\n            print(end = \" \") \n        spaces = spaces - 1\n        for j in range(i):\n            print(\"* \", end = \"\")\n        print() \n\nif __name__ == \"__main__\": \n    n = 5\n    get_mulberry_tree(n)", "task_type": "coding"}
{"input": "Develop a Python function to append a number with zeros to a given string up to a maximum number of characters.", "output": "def append_num_with_zeros(string, max_len):\n    \"\"\"Append a number with zeros to a given string up to a maximum number of characters.\"\"\"\n    # Convert string to list\n    ls = list(string)\n    # Calculate number of zeros required to append\n    num_zeros = max_len - len(string)\n    # Append zeros\n    for i in range(num_zeros):\n        ls.append('0')\n    # Convert list back to string\n    return ''.join(ls)", "task_type": "coding"}
{"input": "Generate a code that creates a dictionary from two different lists with equal length.", "output": "def create_dictionary(list1, list2):\n    if len(list1) != len(list2):\n        return \"lists have different lengths\"\n    else:\n        my_dict = dict(zip(list1, list2))\n        return my_dict\n\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\nprint(create_dictionary(list1, list2)) #output: {'a': 1, 'b': 2, 'c': 3}", "task_type": "coding"}
{"input": "Convert the following JSON array to an XML document.", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<data>\n    <person>\n        <name>Alice</name>\n        <age>25</age>\n    </person>\n    <person>\n        <name>Bob</name>\n        <age>30</age>\n    </person>\n</data>", "task_type": "coding"}
{"input": "Write a code to calculate the mean of the list of integers provided.", "output": "def calc_mean(nums):\n    \"\"\"\n    Calculate the mean of a list of integers\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        sum_of_nums = sum(nums)\n        mean = sum_of_nums/len(nums)\n        return mean\n\nnums = [10, 20, 30, 40, 50]\nmean = calc_mean(nums)\nprint(mean) # 30", "task_type": "coding"}
